{
  "spec_id": "semantic-search-2025-10-24-001",
  "generated": "2025-10-24T00:00:00Z",
  "last_updated": "2025-10-24T21:44:48.306697+00:00",
  "metadata": {
    "title": "Semantic Search for Documentation Query",
    "description": "Three-tier hybrid semantic search system combining keyword (regex), BM25 (fast keyword ranking), and semantic embeddings (conceptual understanding)",
    "estimated_hours": 80,
    "complexity": "high",
    "status": "approved",
    "objectives": [
      "Enable semantic search for natural language code queries",
      "Improve keyword search relevance with BM25",
      "Achieve <50ms BM25 search for 1000 entities",
      "Achieve <500ms semantic search for 1000 entities",
      "Zero breaking changes for existing users"
    ]
  },
  "hierarchy": {
    "spec-root": {
      "type": "spec",
      "title": "Semantic Search for Documentation Query",
      "status": "pending",
      "parent": null,
      "children": [
        "phase-1",
        "phase-2",
        "phase-3",
        "phase-4",
        "phase-5"
      ],
      "total_tasks": 62,
      "completed_tasks": 0,
      "metadata": {},
      "dependencies": {
        "blocks": [],
        "blocked_by": [],
        "depends": []
      }
    },
    "phase-1": {
      "type": "phase",
      "title": "Foundation & Configuration",
      "status": "pending",
      "parent": "spec-root",
      "children": [
        "phase-1-files",
        "phase-1-verify"
      ],
      "total_tasks": 8,
      "completed_tasks": 0,
      "metadata": {
        "purpose": "Set up dependencies, configuration modules, and code-aware tokenization",
        "risk_level": "low",
        "estimated_hours": 6
      },
      "dependencies": {
        "blocks": [
          "phase-2",
          "phase-3",
          "phase-5"
        ],
        "blocked_by": [],
        "depends": []
      }
    },
    "phase-1-files": {
      "type": "group",
      "title": "File Modifications",
      "status": "pending",
      "parent": "phase-1",
      "children": [
        "task-1-1",
        "task-1-2"
      ],
      "total_tasks": 6,
      "completed_tasks": 0,
      "metadata": {},
      "dependencies": {
        "blocks": [
          "phase-1-verify"
        ],
        "blocked_by": [],
        "depends": []
      }
    },
    "task-1-1": {
      "type": "task",
      "title": "src/claude_skills/pyproject.toml",
      "status": "pending",
      "parent": "phase-1-files",
      "children": [
        "task-1-1-1",
        "task-1-1-2"
      ],
      "dependencies": {
        "blocks": [],
        "blocked_by": [],
        "depends": []
      },
      "total_tasks": 2,
      "completed_tasks": 0,
      "metadata": {
        "file_path": "src/claude_skills/pyproject.toml"
      }
    },
    "task-1-1-1": {
      "type": "subtask",
      "title": "Add [semantic] optional dependency group",
      "status": "pending",
      "parent": "task-1-1",
      "children": [],
      "dependencies": {
        "blocks": [],
        "blocked_by": [],
        "depends": []
      },
      "total_tasks": 1,
      "completed_tasks": 0,
      "metadata": {
        "details": "Add rank-bm25>=0.2.2, sentence-transformers>=2.2.0, numpy>=1.21.0 to [project.optional-dependencies]"
      }
    },
    "task-1-1-2": {
      "type": "subtask",
      "title": "Add [semantic-cpu] optional dependency group",
      "status": "pending",
      "parent": "task-1-1",
      "children": [],
      "dependencies": {
        "blocks": [],
        "blocked_by": [],
        "depends": []
      },
      "total_tasks": 1,
      "completed_tasks": 0,
      "metadata": {
        "details": "Same as semantic but with CPU-only torch for non-Mac platforms"
      }
    },
    "task-1-2": {
      "type": "task",
      "title": "src/claude_skills/claude_skills/doc_query/semantic_config.py",
      "status": "pending",
      "parent": "phase-1-files",
      "children": [
        "task-1-2-1",
        "task-1-2-2",
        "task-1-2-3",
        "task-1-2-4"
      ],
      "dependencies": {
        "blocks": [],
        "blocked_by": [],
        "depends": []
      },
      "total_tasks": 4,
      "completed_tasks": 0,
      "metadata": {
        "file_path": "src/claude_skills/claude_skills/doc_query/semantic_config.py",
        "estimated_hours": 2,
        "changes": "Create new configuration module for semantic search",
        "reasoning": "Centralize configuration for BM25, embeddings, and search behavior"
      }
    },
    "task-1-2-1": {
      "type": "subtask",
      "title": "Create BM25Config dataclass",
      "status": "pending",
      "parent": "task-1-2",
      "children": [],
      "dependencies": {
        "blocks": [],
        "blocked_by": [],
        "depends": []
      },
      "total_tasks": 1,
      "completed_tasks": 0,
      "metadata": {
        "details": "k1=1.5, b=0.75, epsilon=0.25 (BM25 algorithm parameters)"
      }
    },
    "task-1-2-2": {
      "type": "subtask",
      "title": "Create EmbeddingConfig dataclass",
      "status": "pending",
      "parent": "task-1-2",
      "children": [],
      "dependencies": {
        "blocks": [],
        "blocked_by": [],
        "depends": []
      },
      "total_tasks": 1,
      "completed_tasks": 0,
      "metadata": {
        "details": "model_name='all-MiniLM-L6-v2', batch_size=32, max_seq_length=384"
      }
    },
    "task-1-2-3": {
      "type": "subtask",
      "title": "Create SearchConfig dataclass",
      "status": "pending",
      "parent": "task-1-2",
      "children": [],
      "dependencies": {
        "blocks": [],
        "blocked_by": [],
        "depends": []
      },
      "total_tasks": 1,
      "completed_tasks": 0,
      "metadata": {
        "details": "bm25_top_k=50, semantic_top_k=10, similarity_threshold=0.3"
      }
    },
    "task-1-2-4": {
      "type": "subtask",
      "title": "Implement tokenize_code_aware() function",
      "status": "pending",
      "parent": "task-1-2",
      "children": [],
      "dependencies": {
        "blocks": [],
        "blocked_by": [],
        "depends": []
      },
      "total_tasks": 1,
      "completed_tasks": 0,
      "metadata": {
        "details": "Handle snake_case, camelCase, PascalCase splitting. Use minimal stopwords (only 'the', 'a', 'an', 'and', 'or', 'but') - keep 'in', 'on', 'at' for code context"
      }
    },
    "phase-1-verify": {
      "type": "group",
      "title": "Verification",
      "status": "pending",
      "parent": "phase-1",
      "children": [
        "verify-1-1",
        "verify-1-2"
      ],
      "dependencies": {
        "blocks": [],
        "blocked_by": [
          "phase-1-files"
        ],
        "depends": []
      },
      "total_tasks": 2,
      "completed_tasks": 0,
      "metadata": {}
    },
    "verify-1-1": {
      "type": "verify",
      "title": "Tokenization handles code patterns correctly",
      "status": "pending",
      "parent": "phase-1-verify",
      "children": [],
      "dependencies": {
        "blocks": [],
        "blocked_by": [],
        "depends": []
      },
      "total_tasks": 1,
      "completed_tasks": 0,
      "metadata": {
        "verification_type": "auto",
        "command": "python -m pytest tests/test_semantic_config.py::test_tokenize_code_aware",
        "expected": "getUserName \u2192 ['get', 'user', 'name'], HTTPServer \u2192 ['http', 'server'], parse_json_file \u2192 ['parse', 'json', 'file']"
      }
    },
    "verify-1-2": {
      "type": "verify",
      "title": "Configuration dataclasses have correct defaults",
      "status": "pending",
      "parent": "phase-1-verify",
      "children": [],
      "dependencies": {
        "blocks": [],
        "blocked_by": [],
        "depends": []
      },
      "total_tasks": 1,
      "completed_tasks": 0,
      "metadata": {
        "verification_type": "manual",
        "expected": "BM25Config, EmbeddingConfig, SearchConfig instantiate with documented defaults",
        "command": ""
      }
    },
    "phase-2": {
      "type": "phase",
      "title": "BM25 Search Implementation",
      "status": "pending",
      "parent": "spec-root",
      "children": [
        "phase-2-files",
        "phase-2-verify"
      ],
      "dependencies": {
        "blocks": [
          "phase-4",
          "phase-5"
        ],
        "blocked_by": [
          "phase-1"
        ],
        "depends": []
      },
      "total_tasks": 11,
      "completed_tasks": 0,
      "metadata": {
        "purpose": "Add fast BM25-based search as first enhancement tier",
        "risk_level": "low",
        "estimated_hours": 8
      }
    },
    "phase-2-files": {
      "type": "group",
      "title": "File Modifications",
      "status": "pending",
      "parent": "phase-2",
      "children": [
        "task-2-1",
        "task-2-2"
      ],
      "total_tasks": 8,
      "completed_tasks": 0,
      "metadata": {},
      "dependencies": {
        "blocks": [
          "phase-2-verify"
        ],
        "blocked_by": [],
        "depends": []
      }
    },
    "task-2-1": {
      "type": "task",
      "title": "src/claude_skills/claude_skills/doc_query/bm25_search.py",
      "status": "pending",
      "parent": "phase-2-files",
      "children": [
        "task-2-1-1",
        "task-2-1-2",
        "task-2-1-3",
        "task-2-1-4"
      ],
      "dependencies": {
        "blocks": [],
        "blocked_by": [],
        "depends": [
          "task-1-2"
        ]
      },
      "total_tasks": 4,
      "completed_tasks": 0,
      "metadata": {
        "file_path": "src/claude_skills/claude_skills/doc_query/bm25_search.py",
        "estimated_hours": 3,
        "changes": "Create new BM25 search module",
        "reasoning": "Provides improved keyword search with better relevance ranking"
      }
    },
    "task-2-1-1": {
      "type": "subtask",
      "title": "Create BM25Result dataclass",
      "status": "pending",
      "parent": "task-2-1",
      "children": [],
      "dependencies": {
        "blocks": [],
        "blocked_by": [],
        "depends": []
      },
      "total_tasks": 1,
      "completed_tasks": 0,
      "metadata": {
        "details": "entity_id, score, entity_data fields"
      }
    },
    "task-2-1-2": {
      "type": "subtask",
      "title": "Create BM25Index class with build() method",
      "status": "pending",
      "parent": "task-2-1",
      "children": [],
      "dependencies": {
        "blocks": [],
        "blocked_by": [],
        "depends": []
      },
      "total_tasks": 1,
      "completed_tasks": 0,
      "metadata": {
        "details": "Use rank-bm25 library, tokenize with tokenize_code_aware(), weight name higher (2x repetition)"
      }
    },
    "task-2-1-3": {
      "type": "subtask",
      "title": "Implement BM25Index.search() method",
      "status": "pending",
      "parent": "task-2-1",
      "children": [],
      "dependencies": {
        "blocks": [],
        "blocked_by": [],
        "depends": []
      },
      "total_tasks": 1,
      "completed_tasks": 0,
      "metadata": {
        "details": "Return top-k results sorted by BM25 score"
      }
    },
    "task-2-1-4": {
      "type": "subtask",
      "title": "Add check_bm25_available() helper",
      "status": "pending",
      "parent": "task-2-1",
      "children": [],
      "dependencies": {
        "blocks": [],
        "blocked_by": [],
        "depends": []
      },
      "total_tasks": 1,
      "completed_tasks": 0,
      "metadata": {
        "details": "Gracefully handle ImportError if rank-bm25 not installed"
      }
    },
    "task-2-2": {
      "type": "task",
      "title": "src/claude_skills/claude_skills/doc_query/doc_query_lib.py",
      "status": "pending",
      "parent": "phase-2-files",
      "children": [
        "task-2-2-1",
        "task-2-2-2",
        "task-2-2-3",
        "task-2-2-4"
      ],
      "dependencies": {
        "blocks": [],
        "blocked_by": [],
        "depends": [
          "task-2-1"
        ]
      },
      "total_tasks": 4,
      "completed_tasks": 0,
      "metadata": {
        "file_path": "src/claude_skills/claude_skills/doc_query/doc_query_lib.py",
        "estimated_hours": 2,
        "changes": "Integrate BM25 indices into DocumentationQuery",
        "reasoning": "Enable BM25 search within existing query interface"
      }
    },
    "task-2-2-1": {
      "type": "subtask",
      "title": "Add BM25 state to __init__()",
      "status": "pending",
      "parent": "task-2-2",
      "children": [],
      "dependencies": {
        "blocks": [],
        "blocked_by": [],
        "depends": []
      },
      "total_tasks": 1,
      "completed_tasks": 0,
      "metadata": {
        "details": "self._bm25_available, self._bm25_indices = {classes, functions, modules}"
      }
    },
    "task-2-2-2": {
      "type": "subtask",
      "title": "Create _build_bm25_indices() method",
      "status": "pending",
      "parent": "task-2-2",
      "children": [],
      "dependencies": {
        "blocks": [],
        "blocked_by": [],
        "depends": []
      },
      "total_tasks": 1,
      "completed_tasks": 0,
      "metadata": {
        "details": "Build BM25Index for classes, functions, modules with error handling"
      }
    },
    "task-2-2-3": {
      "type": "subtask",
      "title": "Call _build_bm25_indices() in _reindex()",
      "status": "pending",
      "parent": "task-2-2",
      "children": [],
      "dependencies": {
        "blocks": [],
        "blocked_by": [],
        "depends": []
      },
      "total_tasks": 1,
      "completed_tasks": 0,
      "metadata": {
        "details": "Build BM25 indices after standard reindexing if available"
      }
    },
    "task-2-2-4": {
      "type": "subtask",
      "title": "Add error handling for BM25 build failures",
      "status": "pending",
      "parent": "task-2-2",
      "children": [],
      "dependencies": {
        "blocks": [],
        "blocked_by": [],
        "depends": []
      },
      "total_tasks": 1,
      "completed_tasks": 0,
      "metadata": {
        "details": "Disable BM25 and log warning if build fails, don't crash"
      }
    },
    "phase-2-verify": {
      "type": "group",
      "title": "Verification",
      "status": "pending",
      "parent": "phase-2",
      "children": [
        "verify-2-1",
        "verify-2-2",
        "verify-2-3"
      ],
      "dependencies": {
        "blocks": [],
        "blocked_by": [
          "phase-2-files"
        ],
        "depends": []
      },
      "total_tasks": 3,
      "completed_tasks": 0,
      "metadata": {}
    },
    "verify-2-1": {
      "type": "verify",
      "title": "BM25 search returns relevant results",
      "status": "pending",
      "parent": "phase-2-verify",
      "children": [],
      "dependencies": {
        "blocks": [],
        "blocked_by": [],
        "depends": []
      },
      "total_tasks": 1,
      "completed_tasks": 0,
      "metadata": {
        "verification_type": "auto",
        "command": "python -m pytest tests/test_bm25_search.py::test_bm25_search",
        "expected": "Query 'user login' returns authenticate_user and login_handler in top results"
      }
    },
    "verify-2-2": {
      "type": "verify",
      "title": "BM25 gracefully degrades when not installed",
      "status": "pending",
      "parent": "phase-2-verify",
      "children": [],
      "dependencies": {
        "blocks": [],
        "blocked_by": [],
        "depends": []
      },
      "total_tasks": 1,
      "completed_tasks": 0,
      "metadata": {
        "verification_type": "manual",
        "expected": "DocumentationQuery works without rank-bm25, _bm25_available=False",
        "command": ""
      }
    },
    "verify-2-3": {
      "type": "verify",
      "title": "BM25 search performance meets target",
      "status": "pending",
      "parent": "phase-2-verify",
      "children": [],
      "dependencies": {
        "blocks": [],
        "blocked_by": [],
        "depends": []
      },
      "total_tasks": 1,
      "completed_tasks": 0,
      "metadata": {
        "verification_type": "auto",
        "command": "python -m pytest tests/test_bm25_search.py::test_bm25_performance",
        "expected": "BM25 search completes in <50ms for 1000 entities"
      }
    },
    "phase-3": {
      "type": "phase",
      "title": "Semantic Embeddings Infrastructure",
      "status": "pending",
      "parent": "spec-root",
      "children": [
        "phase-3-files",
        "phase-3-verify"
      ],
      "dependencies": {
        "blocks": [
          "phase-4",
          "phase-5"
        ],
        "blocked_by": [
          "phase-1"
        ],
        "depends": []
      },
      "total_tasks": 19,
      "completed_tasks": 0,
      "metadata": {
        "purpose": "Enable embedding generation for semantic search",
        "risk_level": "medium",
        "estimated_hours": 14
      }
    },
    "phase-3-files": {
      "type": "group",
      "title": "File Modifications",
      "status": "pending",
      "parent": "phase-3",
      "children": [
        "task-3-1",
        "task-3-2",
        "task-3-3"
      ],
      "total_tasks": 15,
      "completed_tasks": 0,
      "metadata": {},
      "dependencies": {
        "blocks": [
          "phase-3-verify"
        ],
        "blocked_by": [],
        "depends": []
      }
    },
    "task-3-1": {
      "type": "task",
      "title": "src/claude_skills/claude_skills/doc_query/embeddings.py",
      "status": "pending",
      "parent": "phase-3-files",
      "children": [
        "task-3-1-1",
        "task-3-1-2",
        "task-3-1-3",
        "task-3-1-4",
        "task-3-1-5",
        "task-3-1-6",
        "task-3-1-7"
      ],
      "dependencies": {
        "blocks": [],
        "blocked_by": [],
        "depends": [
          "task-1-2"
        ]
      },
      "total_tasks": 7,
      "completed_tasks": 0,
      "metadata": {
        "file_path": "src/claude_skills/claude_skills/doc_query/embeddings.py",
        "estimated_hours": 5,
        "changes": "Create embedding generation module in doc_query (NOT code_doc)",
        "reasoning": "Embeddings used by doc_query, not code_doc. Includes all critical fixes from review."
      }
    },
    "task-3-1-1": {
      "type": "subtask",
      "title": "Add imports including 'from datetime import datetime'",
      "status": "pending",
      "parent": "task-3-1",
      "children": [],
      "dependencies": {
        "blocks": [],
        "blocked_by": [],
        "depends": []
      },
      "total_tasks": 1,
      "completed_tasks": 0,
      "metadata": {
        "details": "CRITICAL FIX: Missing import caused failure. Import json, numpy, datetime, pathlib, typing, sentence_transformers, semantic_config"
      }
    },
    "task-3-1-2": {
      "type": "subtask",
      "title": "Create EmbeddingResult dataclass",
      "status": "pending",
      "parent": "task-3-1",
      "children": [],
      "dependencies": {
        "blocks": [],
        "blocked_by": [],
        "depends": []
      },
      "total_tasks": 1,
      "completed_tasks": 0,
      "metadata": {
        "details": "embeddings, metadata, model_name, embedding_dim fields"
      }
    },
    "task-3-1-3": {
      "type": "subtask",
      "title": "Create EmbeddingGenerator class with lazy model loading",
      "status": "pending",
      "parent": "task-3-1",
      "children": [],
      "dependencies": {
        "blocks": [],
        "blocked_by": [],
        "depends": []
      },
      "total_tasks": 1,
      "completed_tasks": 0,
      "metadata": {
        "details": "Lazy @property for model loading. Add try/except with helpful error messages for network issues, corrupted cache, disk space"
      }
    },
    "task-3-1-4": {
      "type": "subtask",
      "title": "Implement generate_for_entities() method",
      "status": "pending",
      "parent": "task-3-1",
      "children": [],
      "dependencies": {
        "blocks": [],
        "blocked_by": [],
        "depends": []
      },
      "total_tasks": 1,
      "completed_tasks": 0,
      "metadata": {
        "details": "Generate embeddings for list of entities with progress bar support (tqdm)"
      }
    },
    "task-3-1-5": {
      "type": "subtask",
      "title": "Implement _create_embedding_text() static method",
      "status": "pending",
      "parent": "task-3-1",
      "children": [],
      "dependencies": {
        "blocks": [],
        "blocked_by": [],
        "depends": []
      },
      "total_tasks": 1,
      "completed_tasks": 0,
      "metadata": {
        "details": "Create searchable text from entity: type, name, docstring, file context, parameters, inheritance"
      }
    },
    "task-3-1-6": {
      "type": "subtask",
      "title": "Implement save_embeddings() method with staleness tracking",
      "status": "pending",
      "parent": "task-3-1",
      "children": [],
      "dependencies": {
        "blocks": [],
        "blocked_by": [],
        "depends": []
      },
      "total_tasks": 1,
      "completed_tasks": 0,
      "metadata": {
        "details": "Save as NPZ (compressed numpy) + metadata JSON. Include model_version, embedding_version, codebase_hash for staleness detection"
      }
    },
    "task-3-1-7": {
      "type": "subtask",
      "title": "Add check_embeddings_available() and compute_codebase_hash() helpers",
      "status": "pending",
      "parent": "task-3-1",
      "children": [],
      "dependencies": {
        "blocks": [],
        "blocked_by": [],
        "depends": []
      },
      "total_tasks": 1,
      "completed_tasks": 0,
      "metadata": {
        "details": "Check if sentence-transformers available. Compute SHA-256 hash of documentation.json for staleness detection"
      }
    },
    "task-3-2": {
      "type": "task",
      "title": "src/claude_skills/claude_skills/code_doc/cli.py",
      "status": "pending",
      "parent": "phase-3-files",
      "children": [
        "task-3-2-1",
        "task-3-2-2",
        "task-3-2-3"
      ],
      "dependencies": {
        "blocks": [],
        "blocked_by": [],
        "depends": [
          "task-3-1"
        ]
      },
      "total_tasks": 3,
      "completed_tasks": 0,
      "metadata": {
        "file_path": "src/claude_skills/claude_skills/code_doc/cli.py",
        "estimated_hours": 3,
        "changes": "Add embedding generation to doc generation workflow",
        "reasoning": "Allow users to generate embeddings during initial doc generation"
      }
    },
    "task-3-2-1": {
      "type": "subtask",
      "title": "Add --generate-embeddings flag to generate command",
      "status": "pending",
      "parent": "task-3-2",
      "children": [],
      "dependencies": {
        "blocks": [],
        "blocked_by": [],
        "depends": []
      },
      "total_tasks": 1,
      "completed_tasks": 0,
      "metadata": {
        "details": "Boolean flag to enable embedding generation during doc generation"
      }
    },
    "task-3-2-2": {
      "type": "subtask",
      "title": "Update cmd_generate() to call EmbeddingGenerator",
      "status": "pending",
      "parent": "task-3-2",
      "children": [],
      "dependencies": {
        "blocks": [],
        "blocked_by": [],
        "depends": []
      },
      "total_tasks": 1,
      "completed_tasks": 0,
      "metadata": {
        "details": "After doc generation, generate embeddings for classes, functions, modules if flag set. Show progress bars. Handle ImportError gracefully."
      }
    },
    "task-3-2-3": {
      "type": "subtask",
      "title": "Update documentation.json metadata with embeddings info",
      "status": "pending",
      "parent": "task-3-2",
      "children": [],
      "dependencies": {
        "blocks": [],
        "blocked_by": [],
        "depends": []
      },
      "total_tasks": 1,
      "completed_tasks": 0,
      "metadata": {
        "details": "Add metadata.embeddings = {available: true, model: ..., path: 'embeddings.npz', dimension: 384}"
      }
    },
    "task-3-3": {
      "type": "task",
      "title": "src/claude_skills/claude_skills/code_doc/cli.py (generate-embeddings command)",
      "status": "pending",
      "parent": "phase-3-files",
      "children": [
        "task-3-3-1",
        "task-3-3-2",
        "task-3-3-3",
        "task-3-3-4",
        "task-3-3-5"
      ],
      "dependencies": {
        "blocks": [],
        "blocked_by": [],
        "depends": [
          "task-3-1"
        ]
      },
      "total_tasks": 5,
      "completed_tasks": 0,
      "metadata": {
        "file_path": "src/claude_skills/claude_skills/code_doc/cli.py",
        "estimated_hours": 2,
        "changes": "Add new generate-embeddings subcommand",
        "reasoning": "Allow users to generate embeddings for existing documentation"
      }
    },
    "task-3-3-1": {
      "type": "subtask",
      "title": "Create generate-embeddings subparser",
      "status": "pending",
      "parent": "task-3-3",
      "children": [],
      "dependencies": {
        "blocks": [],
        "blocked_by": [],
        "depends": []
      },
      "total_tasks": 1,
      "completed_tasks": 0,
      "metadata": {
        "details": "Add parser with docs_path (optional), --model (default: all-MiniLM-L6-v2), --force flags"
      }
    },
    "task-3-3-2": {
      "type": "subtask",
      "title": "Implement cmd_generate_embeddings() function",
      "status": "pending",
      "parent": "task-3-3",
      "children": [],
      "dependencies": {
        "blocks": [],
        "blocked_by": [],
        "depends": []
      },
      "total_tasks": 1,
      "completed_tasks": 0,
      "metadata": {
        "details": "Load existing documentation.json, create EmbeddingGenerator, generate embeddings"
      }
    },
    "task-3-3-3": {
      "type": "subtask",
      "title": "Add staleness check",
      "status": "pending",
      "parent": "task-3-3",
      "children": [],
      "dependencies": {
        "blocks": [],
        "blocked_by": [],
        "depends": []
      },
      "total_tasks": 1,
      "completed_tasks": 0,
      "metadata": {
        "details": "Check if embeddings exist and are up-to-date using codebase_hash. Skip if current unless --force"
      }
    },
    "task-3-3-4": {
      "type": "subtask",
      "title": "Show progress bars during generation",
      "status": "pending",
      "parent": "task-3-3",
      "children": [],
      "dependencies": {
        "blocks": [],
        "blocked_by": [],
        "depends": []
      },
      "total_tasks": 1,
      "completed_tasks": 0,
      "metadata": {
        "details": "Use tqdm to show progress for embedding generation (can take 5-10s for 500 entities)"
      }
    },
    "task-3-3-5": {
      "type": "subtask",
      "title": "Handle errors gracefully",
      "status": "pending",
      "parent": "task-3-3",
      "children": [],
      "dependencies": {
        "blocks": [],
        "blocked_by": [],
        "depends": []
      },
      "total_tasks": 1,
      "completed_tasks": 0,
      "metadata": {
        "details": "ImportError if sentence-transformers missing, file I/O errors, model loading failures. Show helpful install instructions."
      }
    },
    "phase-3-verify": {
      "type": "group",
      "title": "Verification",
      "status": "pending",
      "parent": "phase-3",
      "children": [
        "verify-3-1",
        "verify-3-2",
        "verify-3-3",
        "verify-3-4"
      ],
      "dependencies": {
        "blocks": [],
        "blocked_by": [
          "phase-3-files"
        ],
        "depends": []
      },
      "total_tasks": 4,
      "completed_tasks": 0,
      "metadata": {}
    },
    "verify-3-1": {
      "type": "verify",
      "title": "Embeddings generate successfully",
      "status": "pending",
      "parent": "phase-3-verify",
      "children": [],
      "dependencies": {
        "blocks": [],
        "blocked_by": [],
        "depends": []
      },
      "total_tasks": 1,
      "completed_tasks": 0,
      "metadata": {
        "verification_type": "auto",
        "command": "python -m pytest tests/test_embeddings.py::test_embedding_generation",
        "expected": "Embeddings array shape (N, 384) for all-MiniLM-L6-v2 model"
      }
    },
    "verify-3-2": {
      "type": "verify",
      "title": "Embedding files saved correctly",
      "status": "pending",
      "parent": "phase-3-verify",
      "children": [],
      "dependencies": {
        "blocks": [],
        "blocked_by": [],
        "depends": []
      },
      "total_tasks": 1,
      "completed_tasks": 0,
      "metadata": {
        "verification_type": "manual",
        "expected": "embeddings.npz and embeddings_meta.json exist, metadata includes model, dimension, codebase_hash, entity counts",
        "command": ""
      }
    },
    "verify-3-3": {
      "type": "verify",
      "title": "Staleness detection works",
      "status": "pending",
      "parent": "phase-3-verify",
      "children": [],
      "dependencies": {
        "blocks": [],
        "blocked_by": [],
        "depends": []
      },
      "total_tasks": 1,
      "completed_tasks": 0,
      "metadata": {
        "verification_type": "manual",
        "expected": "Modify documentation.json, check that codebase_hash changes and embeddings marked stale",
        "command": ""
      }
    },
    "verify-3-4": {
      "type": "verify",
      "title": "Error handling works for model loading",
      "status": "pending",
      "parent": "phase-3-verify",
      "children": [],
      "dependencies": {
        "blocks": [],
        "blocked_by": [],
        "depends": []
      },
      "total_tasks": 1,
      "completed_tasks": 0,
      "metadata": {
        "verification_type": "manual",
        "expected": "Simulate network failure, verify helpful error message about connectivity, corrupted cache, disk space",
        "command": ""
      }
    },
    "phase-4": {
      "type": "phase",
      "title": "Hybrid Search Orchestration",
      "status": "pending",
      "parent": "spec-root",
      "children": [
        "phase-4-files",
        "phase-4-verify"
      ],
      "dependencies": {
        "blocks": [
          "phase-5"
        ],
        "blocked_by": [
          "phase-2",
          "phase-3"
        ],
        "depends": []
      },
      "total_tasks": 18,
      "completed_tasks": 0,
      "metadata": {
        "purpose": "Combine BM25 and semantic search for optimal results",
        "risk_level": "medium",
        "estimated_hours": 12
      }
    },
    "phase-4-files": {
      "type": "group",
      "title": "File Modifications",
      "status": "pending",
      "parent": "phase-4",
      "children": [
        "task-4-1",
        "task-4-2",
        "task-4-3",
        "task-4-4"
      ],
      "total_tasks": 14,
      "completed_tasks": 0,
      "metadata": {},
      "dependencies": {
        "blocks": [
          "phase-4-verify"
        ],
        "blocked_by": [],
        "depends": []
      }
    },
    "task-4-1": {
      "type": "task",
      "title": "src/claude_skills/claude_skills/doc_query/semantic_search.py",
      "status": "pending",
      "parent": "phase-4-files",
      "children": [
        "task-4-1-1",
        "task-4-1-2",
        "task-4-1-3",
        "task-4-1-4"
      ],
      "dependencies": {
        "blocks": [],
        "blocked_by": [],
        "depends": [
          "task-3-1"
        ]
      },
      "total_tasks": 4,
      "completed_tasks": 0,
      "metadata": {
        "file_path": "src/claude_skills/claude_skills/doc_query/semantic_search.py",
        "estimated_hours": 3,
        "changes": "Create semantic search module using embeddings",
        "reasoning": "Enable pure semantic search based on cosine similarity"
      }
    },
    "task-4-1-1": {
      "type": "subtask",
      "title": "Create SemanticResult dataclass",
      "status": "pending",
      "parent": "task-4-1",
      "children": [],
      "dependencies": {
        "blocks": [],
        "blocked_by": [],
        "depends": []
      },
      "total_tasks": 1,
      "completed_tasks": 0,
      "metadata": {
        "details": "entity_id, entity_type, score, entity_data fields"
      }
    },
    "task-4-1-2": {
      "type": "subtask",
      "title": "Create SemanticIndex class with load() method",
      "status": "pending",
      "parent": "task-4-1",
      "children": [],
      "dependencies": {
        "blocks": [],
        "blocked_by": [],
        "depends": []
      },
      "total_tasks": 1,
      "completed_tasks": 0,
      "metadata": {
        "details": "Load embeddings.npz and metadata, load SentenceTransformer model"
      }
    },
    "task-4-1-3": {
      "type": "subtask",
      "title": "Implement SemanticIndex.search() method",
      "status": "pending",
      "parent": "task-4-1",
      "children": [],
      "dependencies": {
        "blocks": [],
        "blocked_by": [],
        "depends": []
      },
      "total_tasks": 1,
      "completed_tasks": 0,
      "metadata": {
        "details": "Generate query embedding, compute cosine similarity, filter by threshold, return top-k"
      }
    },
    "task-4-1-4": {
      "type": "subtask",
      "title": "Add _cosine_similarity() static method",
      "status": "pending",
      "parent": "task-4-1",
      "children": [],
      "dependencies": {
        "blocks": [],
        "blocked_by": [],
        "depends": []
      },
      "total_tasks": 1,
      "completed_tasks": 0,
      "metadata": {
        "details": "Efficient numpy-based cosine similarity computation"
      }
    },
    "task-4-2": {
      "type": "task",
      "title": "src/claude_skills/claude_skills/doc_query/hybrid_search.py",
      "status": "pending",
      "parent": "phase-4-files",
      "children": [
        "task-4-2-1",
        "task-4-2-2",
        "task-4-2-3",
        "task-4-2-4",
        "task-4-2-5"
      ],
      "dependencies": {
        "blocks": [],
        "blocked_by": [],
        "depends": [
          "task-2-1",
          "task-4-1"
        ]
      },
      "total_tasks": 5,
      "completed_tasks": 0,
      "metadata": {
        "file_path": "src/claude_skills/claude_skills/doc_query/hybrid_search.py",
        "estimated_hours": 4,
        "changes": "Create hybrid search orchestrator combining BM25 + semantic",
        "reasoning": "Provides best search quality by combining fast BM25 filtering with accurate semantic ranking"
      }
    },
    "task-4-2-1": {
      "type": "subtask",
      "title": "Create SearchStrategy enum",
      "status": "pending",
      "parent": "task-4-2",
      "children": [],
      "dependencies": {
        "blocks": [],
        "blocked_by": [],
        "depends": []
      },
      "total_tasks": 1,
      "completed_tasks": 0,
      "metadata": {
        "details": "KEYWORD, BM25, SEMANTIC, HYBRID, AUTO values"
      }
    },
    "task-4-2-2": {
      "type": "subtask",
      "title": "Create HybridSearchEngine class with capability detection",
      "status": "pending",
      "parent": "task-4-2",
      "children": [],
      "dependencies": {
        "blocks": [],
        "blocked_by": [],
        "depends": []
      },
      "total_tasks": 1,
      "completed_tasks": 0,
      "metadata": {
        "details": "_detect_capabilities() returns {keyword, bm25, semantic} availability"
      }
    },
    "task-4-2-3": {
      "type": "subtask",
      "title": "Implement strategy selection and search routing",
      "status": "pending",
      "parent": "task-4-2",
      "children": [],
      "dependencies": {
        "blocks": [],
        "blocked_by": [],
        "depends": []
      },
      "total_tasks": 1,
      "completed_tasks": 0,
      "metadata": {
        "details": "search() method routes to _keyword_search(), _bm25_search(), _semantic_search(), or _hybrid_search() based on strategy"
      }
    },
    "task-4-2-4": {
      "type": "subtask",
      "title": "Implement _hybrid_search() with min-max normalization",
      "status": "pending",
      "parent": "task-4-2",
      "children": [],
      "dependencies": {
        "blocks": [],
        "blocked_by": [],
        "depends": []
      },
      "total_tasks": 1,
      "completed_tasks": 0,
      "metadata": {
        "details": "CRITICAL FIX: BM25 filter (top 50) \u2192 semantic re-rank. Use min-max normalization for BM25 scores, not division by 10. Combine: 0.4*bm25_norm + 0.6*semantic"
      }
    },
    "task-4-2-5": {
      "type": "subtask",
      "title": "Add get_status() method for capability reporting",
      "status": "pending",
      "parent": "task-4-2",
      "children": [],
      "dependencies": {
        "blocks": [],
        "blocked_by": [],
        "depends": []
      },
      "total_tasks": 1,
      "completed_tasks": 0,
      "metadata": {
        "details": "Return capabilities, recommended_strategy, available_strategies for CLI display"
      }
    },
    "task-4-3": {
      "type": "task",
      "title": "src/claude_skills/claude_skills/doc_query/doc_query_lib.py (semantic integration)",
      "status": "pending",
      "parent": "phase-4-files",
      "children": [
        "task-4-3-1",
        "task-4-3-2"
      ],
      "dependencies": {
        "blocks": [],
        "blocked_by": [],
        "depends": [
          "task-4-1"
        ]
      },
      "total_tasks": 2,
      "completed_tasks": 0,
      "metadata": {
        "file_path": "src/claude_skills/claude_skills/doc_query/doc_query_lib.py",
        "estimated_hours": 2,
        "changes": "Integrate semantic search into DocumentationQuery",
        "reasoning": "Enable semantic search alongside BM25"
      }
    },
    "task-4-3-1": {
      "type": "subtask",
      "title": "Add semantic index loading to __init__()",
      "status": "pending",
      "parent": "task-4-3",
      "children": [],
      "dependencies": {
        "blocks": [],
        "blocked_by": [],
        "depends": []
      },
      "total_tasks": 1,
      "completed_tasks": 0,
      "metadata": {
        "details": "Check for embeddings, create SemanticIndex, call load(). Set self._semantic_index"
      }
    },
    "task-4-3-2": {
      "type": "subtask",
      "title": "Update search_entities() to use HybridSearchEngine",
      "status": "pending",
      "parent": "task-4-3",
      "children": [],
      "dependencies": {
        "blocks": [],
        "blocked_by": [],
        "depends": []
      },
      "total_tasks": 1,
      "completed_tasks": 0,
      "metadata": {
        "details": "Add strategy parameter (default 'auto'), create HybridSearchEngine, delegate to engine.search()"
      }
    },
    "task-4-4": {
      "type": "task",
      "title": "src/claude_skills/claude_skills/doc_query/cli.py",
      "status": "pending",
      "parent": "phase-4-files",
      "children": [
        "task-4-4-1",
        "task-4-4-2",
        "task-4-4-3"
      ],
      "dependencies": {
        "blocks": [],
        "blocked_by": [],
        "depends": [
          "task-4-2"
        ]
      },
      "total_tasks": 3,
      "completed_tasks": 0,
      "metadata": {
        "file_path": "src/claude_skills/claude_skills/doc_query/cli.py",
        "estimated_hours": 2,
        "changes": "Add --strategy argument to search commands",
        "reasoning": "Allow users to select search strategy explicitly"
      }
    },
    "task-4-4-1": {
      "type": "subtask",
      "title": "Add --strategy argument to parser",
      "status": "pending",
      "parent": "task-4-4",
      "children": [],
      "dependencies": {
        "blocks": [],
        "blocked_by": [],
        "depends": []
      },
      "total_tasks": 1,
      "completed_tasks": 0,
      "metadata": {
        "details": "choices=['keyword', 'bm25', 'semantic', 'hybrid', 'auto'], default='auto'"
      }
    },
    "task-4-4-2": {
      "type": "subtask",
      "title": "Update cmd_search() to pass strategy",
      "status": "pending",
      "parent": "task-4-4",
      "children": [],
      "dependencies": {
        "blocks": [],
        "blocked_by": [],
        "depends": []
      },
      "total_tasks": 1,
      "completed_tasks": 0,
      "metadata": {
        "details": "Call query.search_entities(args.query, strategy=args.strategy). Show which strategy was used."
      }
    },
    "task-4-4-3": {
      "type": "subtask",
      "title": "Update cmd_stats() to show search capabilities",
      "status": "pending",
      "parent": "task-4-4",
      "children": [],
      "dependencies": {
        "blocks": [],
        "blocked_by": [],
        "depends": []
      },
      "total_tasks": 1,
      "completed_tasks": 0,
      "metadata": {
        "details": "Use HybridSearchEngine.get_status() to show available strategies, recommended strategy, installation instructions"
      }
    },
    "phase-4-verify": {
      "type": "group",
      "title": "Verification",
      "status": "pending",
      "parent": "phase-4",
      "children": [
        "verify-4-1",
        "verify-4-2",
        "verify-4-3",
        "verify-4-4"
      ],
      "dependencies": {
        "blocks": [],
        "blocked_by": [
          "phase-4-files"
        ],
        "depends": []
      },
      "total_tasks": 4,
      "completed_tasks": 0,
      "metadata": {}
    },
    "verify-4-1": {
      "type": "verify",
      "title": "Semantic search finds conceptually similar results",
      "status": "pending",
      "parent": "phase-4-verify",
      "children": [],
      "dependencies": {
        "blocks": [],
        "blocked_by": [],
        "depends": []
      },
      "total_tasks": 1,
      "completed_tasks": 0,
      "metadata": {
        "verification_type": "auto",
        "command": "python -m pytest tests/test_semantic_search.py::test_semantic_similarity",
        "expected": "Query 'user authentication logic' finds authenticate_user(), LoginHandler even without exact text match"
      }
    },
    "verify-4-2": {
      "type": "verify",
      "title": "Hybrid search combines BM25 and semantic correctly",
      "status": "pending",
      "parent": "phase-4-verify",
      "children": [],
      "dependencies": {
        "blocks": [],
        "blocked_by": [],
        "depends": []
      },
      "total_tasks": 1,
      "completed_tasks": 0,
      "metadata": {
        "verification_type": "auto",
        "command": "python -m pytest tests/test_hybrid_search.py::test_hybrid_reranking",
        "expected": "Hybrid achieves better ranking than BM25 or semantic alone. Min-max normalization works correctly."
      }
    },
    "verify-4-3": {
      "type": "verify",
      "title": "Strategy auto-selection works",
      "status": "pending",
      "parent": "phase-4-verify",
      "children": [],
      "dependencies": {
        "blocks": [],
        "blocked_by": [],
        "depends": []
      },
      "total_tasks": 1,
      "completed_tasks": 0,
      "metadata": {
        "verification_type": "auto",
        "command": "python -m pytest tests/test_hybrid_search.py::test_strategy_selection",
        "expected": "AUTO selects HYBRID when semantic available, BM25 when only BM25 available, KEYWORD as fallback"
      }
    },
    "verify-4-4": {
      "type": "verify",
      "title": "Graceful degradation works",
      "status": "pending",
      "parent": "phase-4-verify",
      "children": [],
      "dependencies": {
        "blocks": [],
        "blocked_by": [],
        "depends": []
      },
      "total_tasks": 1,
      "completed_tasks": 0,
      "metadata": {
        "verification_type": "manual",
        "expected": "Request semantic search without embeddings \u2192 falls back to BM25 with warning. Request BM25 without rank-bm25 \u2192 falls back to keyword with warning.",
        "command": ""
      }
    },
    "phase-5": {
      "type": "phase",
      "title": "Testing, Documentation & Polish",
      "status": "pending",
      "parent": "spec-root",
      "children": [
        "phase-5-files",
        "phase-5-verify"
      ],
      "dependencies": {
        "blocks": [],
        "blocked_by": [
          "phase-1",
          "phase-2",
          "phase-3",
          "phase-4"
        ],
        "depends": []
      },
      "total_tasks": 6,
      "completed_tasks": 0,
      "metadata": {
        "purpose": "Comprehensive testing, UX improvements, and documentation",
        "risk_level": "low",
        "estimated_hours": 16
      }
    },
    "phase-5-files": {
      "type": "group",
      "title": "File Modifications",
      "status": "pending",
      "parent": "phase-5",
      "children": [
        "task-5-1",
        "task-5-2",
        "task-5-3"
      ],
      "total_tasks": 3,
      "completed_tasks": 0,
      "metadata": {},
      "dependencies": {
        "blocks": [
          "phase-5-verify"
        ],
        "blocked_by": [],
        "depends": []
      }
    },
    "task-5-1": {
      "type": "task",
      "title": "src/claude_skills/tests/test_*.py (comprehensive test suite)",
      "status": "pending",
      "parent": "phase-5-files",
      "children": [],
      "dependencies": {
        "blocks": [],
        "blocked_by": [],
        "depends": []
      },
      "total_tasks": 1,
      "completed_tasks": 0,
      "metadata": {
        "file_path": "src/claude_skills/tests/",
        "estimated_hours": 8,
        "changes": "Create comprehensive test suite for all new modules",
        "reasoning": "Ensure code quality, prevent regressions, validate performance targets",
        "details": "test_semantic_config.py (tokenization), test_bm25_search.py (BM25 + performance), test_embeddings.py (generation + staleness), test_semantic_search.py (similarity), test_hybrid_search.py (orchestration + strategy), test_integration.py (end-to-end workflow). Target >80% coverage."
      }
    },
    "task-5-2": {
      "type": "task",
      "title": "src/claude_skills/claude_skills/doc_query/SKILL.md",
      "status": "pending",
      "parent": "phase-5-files",
      "children": [],
      "dependencies": {
        "blocks": [],
        "blocked_by": [],
        "depends": []
      },
      "total_tasks": 1,
      "completed_tasks": 0,
      "metadata": {
        "file_path": "src/claude_skills/claude_skills/doc_query/SKILL.md",
        "estimated_hours": 3,
        "changes": "Update doc-query skill documentation with semantic search info",
        "reasoning": "Users need to understand new capabilities and how to use them",
        "details": "Add sections: Search Strategies, Installation, Generating Embeddings, Usage Examples, When to Use Each Strategy, Performance Characteristics"
      }
    },
    "task-5-3": {
      "type": "task",
      "title": "docs/SEMANTIC_SEARCH_MIGRATION.md",
      "status": "pending",
      "parent": "phase-5-files",
      "children": [],
      "dependencies": {
        "blocks": [],
        "blocked_by": [],
        "depends": []
      },
      "total_tasks": 1,
      "completed_tasks": 0,
      "metadata": {
        "file_path": "docs/SEMANTIC_SEARCH_MIGRATION.md",
        "estimated_hours": 2,
        "changes": "Create migration guide for existing users",
        "reasoning": "Help users adopt semantic search with minimal friction",
        "details": "No breaking changes section, how to enable semantic search, performance expectations, troubleshooting guide"
      }
    },
    "phase-5-verify": {
      "type": "group",
      "title": "Verification",
      "status": "pending",
      "parent": "phase-5",
      "children": [
        "verify-5-1",
        "verify-5-2",
        "verify-5-3"
      ],
      "dependencies": {
        "blocks": [],
        "blocked_by": [
          "phase-5-files"
        ],
        "depends": []
      },
      "total_tasks": 3,
      "completed_tasks": 0,
      "metadata": {}
    },
    "verify-5-1": {
      "type": "verify",
      "title": "All tests pass with >80% coverage",
      "status": "pending",
      "parent": "phase-5-verify",
      "children": [],
      "dependencies": {
        "blocks": [],
        "blocked_by": [],
        "depends": []
      },
      "total_tasks": 1,
      "completed_tasks": 0,
      "metadata": {
        "verification_type": "auto",
        "command": "python -m pytest tests/ --cov=claude_skills.doc_query --cov-report=term-missing",
        "expected": "All tests pass, coverage >80% for semantic_config, bm25_search, embeddings, semantic_search, hybrid_search"
      }
    },
    "verify-5-2": {
      "type": "verify",
      "title": "Performance targets met",
      "status": "pending",
      "parent": "phase-5-verify",
      "children": [],
      "dependencies": {
        "blocks": [],
        "blocked_by": [],
        "depends": []
      },
      "total_tasks": 1,
      "completed_tasks": 0,
      "metadata": {
        "verification_type": "auto",
        "command": "python -m pytest tests/test_performance.py",
        "expected": "BM25 <50ms, Semantic <500ms (after first load), Hybrid <300ms for 1000 entities"
      }
    },
    "verify-5-3": {
      "type": "verify",
      "title": "No breaking changes for existing users",
      "status": "pending",
      "parent": "phase-5-verify",
      "children": [],
      "dependencies": {
        "blocks": [],
        "blocked_by": [],
        "depends": []
      },
      "total_tasks": 1,
      "completed_tasks": 0,
      "metadata": {
        "verification_type": "auto",
        "command": "python -m pytest tests/test_backward_compatibility.py",
        "expected": "All existing sdd doc commands work without installing new dependencies. Default behavior unchanged."
      }
    }
  }
}