{
  "metadata": {
    "project_name": "claude-sdd-toolkit",
    "version": "1.0.0",
    "generated_at": "2025-10-24T10:59:57.334910",
    "languages": [
      "python"
    ]
  },
  "statistics": {
    "total_files": 85,
    "total_lines": 25187,
    "total_classes": 38,
    "total_functions": 422,
    "avg_complexity": 6.87,
    "max_complexity": 40,
    "high_complexity_functions": [
      "generate_report (40)",
      "format_execution_plan (39)",
      "execute_verify_task (38)",
      "update_task_status (37)",
      "print_discovery_report (35)"
    ],
    "by_language": {
      "python": {
        "files": 85,
        "lines": 25187,
        "classes": 38,
        "functions": 422,
        "avg_complexity": 6.87
      }
    }
  },
  "modules": [
    {
      "name": "extract_sdd_commands",
      "file": "scripts/extract_sdd_commands.py",
      "language": "python",
      "docstring": "Extract sdd commands from SKILL.md files for manual review.\n\nThis script extracts all sdd command invocations from SKILL.md files\nand displays them in an organized format for manual review.",
      "classes": [
        "Command"
      ],
      "functions": [
        "extract_commands_from_file",
        "extract_all_commands",
        "get_unique_commands",
        "print_by_file",
        "print_unique",
        "print_grouped",
        "print_json_output",
        "main"
      ],
      "imports": [
        "argparse",
        "json",
        "re",
        "collections.defaultdict",
        "dataclasses.dataclass",
        "pathlib.Path",
        "typing.Dict",
        "typing.List"
      ],
      "exports": [],
      "lines": 253
    },
    {
      "name": "validate_sdd_commands",
      "file": "scripts/validate_sdd_commands.py",
      "language": "python",
      "docstring": "Validate sdd commands in SKILL.md files.\n\nThis script extracts all sdd command invocations from SKILL.md files\nand validates them against the actual CLI structure.",
      "classes": [
        "Command",
        "ValidationResult",
        "CommandRegistry",
        "CommandExtractor"
      ],
      "functions": [
        "build_registry",
        "validate_commands",
        "print_report",
        "main"
      ],
      "imports": [
        "argparse",
        "json",
        "re",
        "subprocess",
        "sys",
        "collections.defaultdict",
        "dataclasses.dataclass",
        "pathlib.Path",
        "typing.Dict",
        "typing.List",
        "typing.Set",
        "typing.Tuple",
        "typing.Optional"
      ],
      "exports": [],
      "lines": 494
    },
    {
      "name": "__init__",
      "file": "src/claude_skills/claude_skills/__init__.py",
      "language": "python",
      "docstring": "Claude Code Skills - Spec-Driven Development Implementation\n\nA professional Python package for SDD workflows.",
      "classes": [],
      "functions": [],
      "imports": [
        "claude_skills.common.find_specs_directory",
        "claude_skills.common.load_json_spec",
        "claude_skills.common.PrettyPrinter"
      ],
      "exports": [],
      "lines": 21
    },
    {
      "name": "__init__",
      "file": "src/claude_skills/claude_skills/cli/__init__.py",
      "language": "python",
      "docstring": "Unified CLI entry points for claude_skills.",
      "classes": [],
      "functions": [],
      "imports": [],
      "exports": [],
      "lines": 1
    },
    {
      "name": "__init__",
      "file": "src/claude_skills/claude_skills/cli/sdd/__init__.py",
      "language": "python",
      "docstring": "Unified SDD CLI - Single entry point for all SDD commands.",
      "classes": [],
      "functions": [
        "main"
      ],
      "imports": [
        "sys",
        "argparse",
        "pathlib.Path",
        "claude_skills.common.PrettyPrinter",
        "claude_skills.common.metrics.track_metrics",
        "claude_skills.cli.sdd.options.add_global_options",
        "claude_skills.cli.sdd.options.create_global_parent_parser",
        "claude_skills.cli.sdd.registry.register_all_subcommands"
      ],
      "exports": [],
      "lines": 64
    },
    {
      "name": "options",
      "file": "src/claude_skills/claude_skills/cli/sdd/options.py",
      "language": "python",
      "docstring": "Shared argument groups for unified CLI.",
      "classes": [],
      "functions": [
        "create_global_parent_parser",
        "add_global_options",
        "add_spec_options",
        "add_task_options"
      ],
      "imports": [
        "argparse"
      ],
      "exports": [],
      "lines": 78
    },
    {
      "name": "registry",
      "file": "src/claude_skills/claude_skills/cli/sdd/registry.py",
      "language": "python",
      "docstring": "Plugin registration system for subcommands.",
      "classes": [],
      "functions": [
        "register_all_subcommands",
        "_register_doc_cli",
        "_register_test_cli",
        "_register_skills_dev_cli"
      ],
      "imports": [
        "logging"
      ],
      "exports": [],
      "lines": 105
    },
    {
      "name": "registry",
      "file": "src/claude_skills/claude_skills/cli/skills_dev/registry.py",
      "language": "python",
      "docstring": "Plugin registration for skills development utilities.",
      "classes": [
        "LegacyCommand"
      ],
      "functions": [
        "_run_legacy_main",
        "_configure_passthrough",
        "_make_wrapper",
        "register_all_subcommands",
        "_show_migration_info"
      ],
      "imports": [
        "__future__.annotations",
        "argparse",
        "contextlib",
        "importlib",
        "io",
        "runpy",
        "sys",
        "dataclasses.dataclass",
        "typing.Any",
        "typing.Iterable",
        "typing.Sequence",
        "claude_skills.common.PrettyPrinter"
      ],
      "exports": [],
      "lines": 135
    },
    {
      "name": "__init__",
      "file": "src/claude_skills/claude_skills/code_doc/__init__.py",
      "language": "python",
      "docstring": "Codebase Documentation Generator\nModular documentation generation package.",
      "classes": [],
      "functions": [],
      "imports": [
        "parser.CodebaseAnalyzer",
        "calculator.calculate_complexity",
        "calculator.calculate_statistics",
        "formatter.MarkdownGenerator",
        "formatter.JSONGenerator",
        "generator.DocumentationGenerator"
      ],
      "exports": [],
      "lines": 18
    },
    {
      "name": "ai_consultation",
      "file": "src/claude_skills/claude_skills/code_doc/ai_consultation.py",
      "language": "python",
      "docstring": "AI Consultation for Documentation Generation\n\nShells out to external AI CLI tools (gemini, codex, cursor-agent) to generate\ncontextual documentation (ARCHITECTURE.md, AI_CONTEXT.md) based on structural analysis.\n\nBased on run-tests/consultation.py pattern.",
      "classes": [],
      "functions": [
        "get_available_tools",
        "get_best_tool",
        "format_architecture_research_prompt",
        "format_ai_context_research_prompt",
        "compose_architecture_doc",
        "compose_ai_context_doc",
        "run_consultation",
        "consult_multi_agent",
        "_run_tool_capture",
        "generate_architecture_docs",
        "generate_ai_context_docs"
      ],
      "imports": [
        "subprocess",
        "sys",
        "pathlib.Path",
        "typing.Dict",
        "typing.List",
        "typing.Optional",
        "typing.Tuple",
        "concurrent.futures.ThreadPoolExecutor",
        "concurrent.futures.as_completed",
        "time"
      ],
      "exports": [],
      "lines": 698
    },
    {
      "name": "calculator",
      "file": "src/claude_skills/claude_skills/code_doc/calculator.py",
      "language": "python",
      "docstring": "Metrics and complexity calculation module.\nHandles code quality metrics, complexity analysis, and statistics.\nSupports multi-language analysis.",
      "classes": [],
      "functions": [
        "calculate_complexity",
        "calculate_statistics",
        "calculate_language_statistics",
        "analyze_code_quality"
      ],
      "imports": [
        "ast",
        "typing.Dict",
        "typing.List",
        "typing.Any",
        "collections.defaultdict"
      ],
      "exports": [],
      "lines": 143
    },
    {
      "name": "cli",
      "file": "src/claude_skills/claude_skills/code_doc/cli.py",
      "language": "python",
      "docstring": "Codebase Documentation Generator CLI\nMain command-line interface for generating comprehensive codebase documentation.\n\nUsage:\n    sdd doc generate <project_directory> [options]\n    sdd doc validate <json_file>\n    sdd doc analyze <project_directory> [options]\n\nSubcommands:\n    generate    Generate documentation (Markdown/JSON)\n    validate    Validate generated JSON against schema\n    analyze     Analyze codebase and print statistics only\n\nOptions for generate:\n    --output-dir DIR     Output directory for documentation (default: ./docs)\n    --format FORMAT      Output format: markdown, json, or both (default: both)\n    --name NAME          Project name (default: directory name)\n    --version VERSION    Project version (default: 1.0.0)\n    --language LANG      Filter by language (python, javascript, go, etc.)\n    --exclude PATTERN    Exclude files matching pattern\n    --verbose, -v        Verbose output\n\nExamples:\n    sdd doc generate ./src\n    sdd doc generate ./src --name MyProject --version 2.0.0\n    sdd doc generate ./src --format json --output-dir ./docs\n    sdd doc analyze ./src --verbose\n    sdd doc validate ./docs/documentation.json",
      "classes": [],
      "functions": [
        "_dump_json",
        "_print_if_json",
        "_exclude_patterns",
        "_handle_error",
        "cmd_generate",
        "cmd_validate",
        "cmd_analyze",
        "cmd_analyze_with_ai",
        "register_code_doc"
      ],
      "imports": [
        "__future__.annotations",
        "argparse",
        "json",
        "sys",
        "traceback",
        "pathlib.Path",
        "typing.Iterable",
        "typing.Optional",
        "claude_skills.common.PrettyPrinter",
        "claude_skills.common.metrics.track_metrics",
        "claude_skills.code_doc.generator.DocumentationGenerator",
        "claude_skills.code_doc.parsers.Language",
        "claude_skills.code_doc.parsers.create_parser_factory",
        "claude_skills.code_doc.calculator.calculate_statistics",
        "claude_skills.code_doc.detectors.detect_framework",
        "claude_skills.code_doc.detectors.identify_key_files",
        "claude_skills.code_doc.detectors.detect_layers",
        "claude_skills.code_doc.detectors.suggest_reading_order",
        "claude_skills.code_doc.detectors.extract_readme",
        "claude_skills.code_doc.detectors.create_context_summary",
        "claude_skills.code_doc.ai_consultation.get_available_tools",
        "claude_skills.code_doc.ai_consultation.generate_architecture_docs",
        "claude_skills.code_doc.ai_consultation.generate_ai_context_docs",
        "claude_skills.code_doc.ai_consultation.compose_architecture_doc",
        "claude_skills.code_doc.ai_consultation.compose_ai_context_doc"
      ],
      "exports": [],
      "lines": 492
    },
    {
      "name": "detectors",
      "file": "src/claude_skills/claude_skills/code_doc/detectors.py",
      "language": "python",
      "docstring": "Framework and codebase pattern detection.\n\nSimple programmatic detection of frameworks, key files, and architectural layers.\nSupports multi-language projects.",
      "classes": [],
      "functions": [
        "_should_exclude_path",
        "detect_languages",
        "get_language_for_extension",
        "detect_framework",
        "identify_key_files",
        "detect_layers",
        "suggest_reading_order",
        "extract_readme",
        "create_context_summary"
      ],
      "imports": [
        "typing.Dict",
        "typing.List",
        "typing.Any",
        "typing.Optional",
        "typing.Set",
        "pathlib.Path",
        "collections.defaultdict",
        "fnmatch"
      ],
      "exports": [],
      "lines": 455
    },
    {
      "name": "formatter",
      "file": "src/claude_skills/claude_skills/code_doc/formatter.py",
      "language": "python",
      "docstring": "Output formatting module.\nGenerates Markdown and JSON documentation from analyzed codebase data.\nSupports multi-language projects.",
      "classes": [
        "MarkdownGenerator",
        "JSONGenerator"
      ],
      "functions": [],
      "imports": [
        "datetime.datetime",
        "typing.Dict",
        "typing.List",
        "typing.Any",
        "collections.defaultdict"
      ],
      "exports": [],
      "lines": 223
    },
    {
      "name": "generator",
      "file": "src/claude_skills/claude_skills/code_doc/generator.py",
      "language": "python",
      "docstring": "Documentation generation orchestration module.\nCoordinates parsing, analysis, and formatting to generate documentation.",
      "classes": [
        "DocumentationGenerator"
      ],
      "functions": [],
      "imports": [
        "json",
        "pathlib.Path",
        "typing.Dict",
        "typing.Any",
        "typing.Optional",
        "typing.List"
      ],
      "exports": [],
      "lines": 192
    },
    {
      "name": "parser",
      "file": "src/claude_skills/claude_skills/code_doc/parser.py",
      "language": "python",
      "docstring": "AST parsing and codebase analysis module.\nHandles Python file discovery, parsing, and structure extraction.",
      "classes": [
        "CodebaseAnalyzer"
      ],
      "functions": [],
      "imports": [
        "ast",
        "pathlib.Path",
        "typing.Dict",
        "typing.List",
        "typing.Any",
        "collections.defaultdict"
      ],
      "exports": [],
      "lines": 187
    },
    {
      "name": "__init__",
      "file": "src/claude_skills/claude_skills/code_doc/parsers/__init__.py",
      "language": "python",
      "docstring": "Multi-language parsers for codebase documentation generation.\n\nThis package provides abstract base classes and language-specific parsers\nfor analyzing codebases in multiple programming languages.",
      "classes": [],
      "functions": [],
      "imports": [
        "base.BaseParser",
        "base.Language",
        "base.ParsedParameter",
        "base.ParsedFunction",
        "base.ParsedClass",
        "base.ParsedModule",
        "base.ParseResult",
        "factory.ParserFactory",
        "factory.create_parser_factory",
        "python.PythonParser"
      ],
      "exports": [],
      "lines": 58
    },
    {
      "name": "base",
      "file": "src/claude_skills/claude_skills/code_doc/parsers/base.py",
      "language": "python",
      "docstring": "Abstract base parser interface for multi-language codebase documentation.\n\nThis module defines the common interface and data structures that all\nlanguage-specific parsers must implement.",
      "classes": [
        "Language",
        "ParsedParameter",
        "ParsedFunction",
        "ParsedClass",
        "ParsedModule",
        "ParseResult",
        "BaseParser"
      ],
      "functions": [],
      "imports": [
        "abc.ABC",
        "abc.abstractmethod",
        "dataclasses.dataclass",
        "dataclasses.field",
        "typing.List",
        "typing.Dict",
        "typing.Any",
        "typing.Optional",
        "pathlib.Path",
        "enum.Enum"
      ],
      "exports": [],
      "lines": 340
    },
    {
      "name": "css",
      "file": "src/claude_skills/claude_skills/code_doc/parsers/css.py",
      "language": "python",
      "docstring": "CSS language parser using tree-sitter.\n\nThis module provides a parser for CSS files that extracts selectors,\nrules, variables, and @-rules.",
      "classes": [
        "CSSParser"
      ],
      "functions": [],
      "imports": [
        "pathlib.Path",
        "typing.List",
        "typing.Dict",
        "typing.Optional",
        "sys",
        "base.BaseParser",
        "base.Language",
        "base.ParseResult",
        "base.ParsedModule",
        "base.ParsedFunction"
      ],
      "exports": [],
      "lines": 205
    },
    {
      "name": "factory",
      "file": "src/claude_skills/claude_skills/code_doc/parsers/factory.py",
      "language": "python",
      "docstring": "Parser factory for multi-language codebase analysis.\n\nThis module provides a factory that automatically detects languages\nand routes files to appropriate parsers.",
      "classes": [
        "ParserFactory"
      ],
      "functions": [
        "_auto_register_parsers",
        "create_parser_factory"
      ],
      "imports": [
        "pathlib.Path",
        "typing.Dict",
        "typing.List",
        "typing.Optional",
        "typing.Set",
        "typing.Type",
        "collections.defaultdict",
        "base.BaseParser",
        "base.Language",
        "base.ParseResult"
      ],
      "exports": [],
      "lines": 306
    },
    {
      "name": "go",
      "file": "src/claude_skills/claude_skills/code_doc/parsers/go.py",
      "language": "python",
      "docstring": "Go language parser using tree-sitter.\n\nThis module provides a parser for Go files that extracts packages,\nfunctions, structs, interfaces, and methods.",
      "classes": [
        "GoParser"
      ],
      "functions": [],
      "imports": [
        "pathlib.Path",
        "typing.List",
        "typing.Optional",
        "sys",
        "base.BaseParser",
        "base.Language",
        "base.ParseResult",
        "base.ParsedModule",
        "base.ParsedClass",
        "base.ParsedFunction",
        "base.ParsedParameter"
      ],
      "exports": [],
      "lines": 340
    },
    {
      "name": "html",
      "file": "src/claude_skills/claude_skills/code_doc/parsers/html.py",
      "language": "python",
      "docstring": "HTML language parser using tree-sitter.\n\nThis module provides a parser for HTML files that extracts elements,\ncustom components, HTMX attributes, and data attributes.",
      "classes": [
        "HTMLParser"
      ],
      "functions": [],
      "imports": [
        "pathlib.Path",
        "typing.List",
        "typing.Dict",
        "typing.Optional",
        "sys",
        "base.BaseParser",
        "base.Language",
        "base.ParseResult",
        "base.ParsedModule",
        "base.ParsedFunction"
      ],
      "exports": [],
      "lines": 195
    },
    {
      "name": "javascript",
      "file": "src/claude_skills/claude_skills/code_doc/parsers/javascript.py",
      "language": "python",
      "docstring": "JavaScript and TypeScript language parser using tree-sitter.\n\nThis module provides a parser for JavaScript/TypeScript files that extracts\nclasses, functions, imports, and exports.",
      "classes": [
        "JavaScriptParser"
      ],
      "functions": [],
      "imports": [
        "pathlib.Path",
        "typing.List",
        "typing.Optional",
        "sys",
        "base.BaseParser",
        "base.Language",
        "base.ParseResult",
        "base.ParsedModule",
        "base.ParsedClass",
        "base.ParsedFunction",
        "base.ParsedParameter"
      ],
      "exports": [],
      "lines": 335
    },
    {
      "name": "python",
      "file": "src/claude_skills/claude_skills/code_doc/parsers/python.py",
      "language": "python",
      "docstring": "Python language parser using AST analysis.\n\nThis module provides a parser for Python files that extracts classes,\nfunctions, imports, and complexity metrics.",
      "classes": [
        "PythonParser"
      ],
      "functions": [],
      "imports": [
        "ast",
        "sys",
        "pathlib.Path",
        "typing.List",
        "collections.defaultdict",
        "base.BaseParser",
        "base.Language",
        "base.ParseResult",
        "base.ParsedModule",
        "base.ParsedClass",
        "base.ParsedFunction",
        "base.ParsedParameter"
      ],
      "exports": [],
      "lines": 202
    },
    {
      "name": "__init__",
      "file": "src/claude_skills/claude_skills/common/__init__.py",
      "language": "python",
      "docstring": "Spec-Driven Development Common Utilities\n\nShared functionality for all SDD skills (sdd-plan, sdd-next, sdd-update).\nProvides JSON spec file operations, spec parsing, progress calculation, and path discovery.",
      "classes": [],
      "functions": [],
      "imports": [
        "spec.load_json_spec",
        "spec.save_json_spec",
        "spec.backup_json_spec",
        "spec.get_node",
        "spec.update_node",
        "spec.extract_frontmatter",
        "progress.recalculate_progress",
        "progress.update_parent_status",
        "progress.get_progress_summary",
        "progress.list_phases",
        "paths.find_specs_directory",
        "paths.validate_path",
        "paths.validate_and_normalize_paths",
        "paths.normalize_path",
        "paths.batch_check_paths_exist",
        "paths.find_files_by_pattern",
        "paths.ensure_directory",
        "printer.PrettyPrinter",
        "validation.EnhancedError",
        "validation.SpecValidationResult",
        "validation.JsonSpecValidationResult",
        "validation.validate_status",
        "validation.validate_node_type",
        "validation.validate_spec_id_format",
        "validation.validate_iso8601_date",
        "validation.normalize_message_text",
        "hierarchy_validation.validate_spec_hierarchy",
        "hierarchy_validation.validate_structure",
        "hierarchy_validation.validate_hierarchy",
        "hierarchy_validation.validate_nodes",
        "hierarchy_validation.validate_task_counts",
        "hierarchy_validation.validate_dependencies",
        "hierarchy_validation.validate_metadata",
        "reporting.generate_spec_report",
        "reporting.generate_json_spec_report",
        "reporting.generate_combined_report",
        "dependency_analysis.analyze_dependencies",
        "dependency_analysis.DEFAULT_BOTTLENECK_THRESHOLD",
        "dependency_analysis.has_dependency_cycle",
        "dependency_analysis.validate_dependency_graph",
        "dependency_analysis.get_dependency_chain",
        "dependency_analysis.find_blocking_tasks",
        "dependency_analysis.find_circular_dependencies",
        "query_operations.query_tasks",
        "query_operations.get_task",
        "query_operations.list_phases",
        "query_operations.check_complete",
        "query_operations.list_blockers",
        "metrics.track_metrics",
        "metrics.capture_metrics",
        "metrics.record_metric",
        "metrics.get_metrics_file_path",
        "metrics.is_metrics_enabled",
        "doc_helper.check_doc_query_available",
        "doc_helper.check_sdd_integration_available",
        "doc_helper.get_task_context_from_docs",
        "doc_helper.should_generate_docs",
        "doc_helper.ensure_documentation_exists",
        "integrations.validate_spec_before_proceed",
        "integrations.execute_verify_task",
        "integrations.get_session_state"
      ],
      "exports": [],
      "lines": 187
    },
    {
      "name": "dependency_analysis",
      "file": "src/claude_skills/claude_skills/common/dependency_analysis.py",
      "language": "python",
      "docstring": "Dependency analysis and validation for SDD JSON specs.",
      "classes": [
        "DependencyAnalysis"
      ],
      "functions": [
        "analyze_dependencies",
        "find_circular_dependencies",
        "find_circular_dependencies",
        "has_dependency_cycle",
        "validate_dependency_graph",
        "get_dependency_chain",
        "find_blocking_tasks"
      ],
      "imports": [
        "dataclasses.dataclass",
        "typing.Dict",
        "typing.Iterable",
        "typing.List",
        "typing.Optional",
        "typing.Set",
        "typing.Tuple"
      ],
      "exports": [],
      "lines": 375
    },
    {
      "name": "doc_helper",
      "file": "src/claude_skills/claude_skills/common/doc_helper.py",
      "language": "python",
      "docstring": "Documentation Helper Functions\n\nProvides integration between SDD skills and the code-doc/doc-query system.\nThese functions enable proactive documentation generation and context gathering.",
      "classes": [],
      "functions": [
        "check_doc_query_available",
        "check_sdd_integration_available",
        "get_task_context_from_docs",
        "should_generate_docs",
        "ensure_documentation_exists"
      ],
      "imports": [
        "json",
        "subprocess",
        "shutil",
        "typing.Optional",
        "pathlib.Path"
      ],
      "exports": [],
      "lines": 293
    },
    {
      "name": "hierarchy_validation",
      "file": "src/claude_skills/claude_skills/common/hierarchy_validation.py",
      "language": "python",
      "docstring": "Hierarchy validation operations for sdd-plan.\nValidates the hierarchy structure within JSON spec files for compliance with sdd-plan requirements.",
      "classes": [],
      "functions": [
        "_extract_location",
        "_determine_severity",
        "_is_auto_fixable",
        "_suggest_fix",
        "_build_enhanced_errors",
        "validate_structure",
        "validate_hierarchy",
        "validate_nodes",
        "validate_task_counts",
        "validate_dependencies",
        "validate_metadata",
        "validate_spec_hierarchy"
      ],
      "imports": [
        "re",
        "pathlib.Path",
        "typing.Dict",
        "typing.Iterable",
        "typing.List",
        "typing.Tuple",
        "typing.Optional",
        "typing.Set",
        "claude_skills.common.EnhancedError",
        "claude_skills.common.JsonSpecValidationResult",
        "claude_skills.common.validate_status",
        "claude_skills.common.validate_node_type",
        "claude_skills.common.validate_spec_id_format",
        "claude_skills.common.validate_iso8601_date",
        "claude_skills.common.normalize_message_text"
      ],
      "exports": [],
      "lines": 681
    },
    {
      "name": "integrations",
      "file": "src/claude_skills/claude_skills/common/integrations.py",
      "language": "python",
      "docstring": "Cross-Skill Integration Utilities\n\nProvides integration functions for SDD skills to work together seamlessly.\nIncludes spec validation, verification task execution, and session state management.",
      "classes": [],
      "functions": [
        "validate_spec_before_proceed",
        "execute_verify_task",
        "get_session_state"
      ],
      "imports": [
        "json",
        "subprocess",
        "time",
        "typing.Optional",
        "pathlib.Path",
        "datetime.datetime",
        "hierarchy_validation.validate_spec_hierarchy"
      ],
      "exports": [],
      "lines": 506
    },
    {
      "name": "metrics",
      "file": "src/claude_skills/claude_skills/common/metrics.py",
      "language": "python",
      "docstring": "Metrics collection system for Claude Skills.\n\nTracks skill and command usage, execution duration, and success/failure rates.\nAutomatically excludes metrics when running in test environments.",
      "classes": [],
      "functions": [
        "_is_test_environment",
        "_ensure_metrics_dir",
        "_rotate_metrics_file_if_needed",
        "record_metric",
        "capture_metrics",
        "track_metrics",
        "get_metrics_file_path",
        "is_metrics_enabled"
      ],
      "imports": [
        "os",
        "sys",
        "json",
        "time",
        "functools",
        "pathlib.Path",
        "datetime.datetime",
        "typing.Optional",
        "typing.Dict",
        "typing.Any",
        "contextlib.contextmanager"
      ],
      "exports": [],
      "lines": 221
    },
    {
      "name": "paths",
      "file": "src/claude_skills/claude_skills/common/paths.py",
      "language": "python",
      "docstring": "Path discovery and validation utilities for SDD workflows.",
      "classes": [],
      "functions": [
        "find_specs_directory",
        "find_spec_file",
        "validate_path",
        "ensure_directory",
        "validate_and_normalize_paths",
        "normalize_path",
        "batch_check_paths_exist",
        "find_files_by_pattern"
      ],
      "imports": [
        "sys",
        "pathlib.Path",
        "typing.Optional",
        "typing.List",
        "typing.Dict"
      ],
      "exports": [],
      "lines": 303
    },
    {
      "name": "printer",
      "file": "src/claude_skills/claude_skills/common/printer.py",
      "language": "python",
      "docstring": "Pretty printer utility for consistent console output across SDD tools.",
      "classes": [
        "PrettyPrinter"
      ],
      "functions": [],
      "imports": [
        "sys"
      ],
      "exports": [],
      "lines": 84
    },
    {
      "name": "progress",
      "file": "src/claude_skills/claude_skills/common/progress.py",
      "language": "python",
      "docstring": "Progress calculation utilities for SDD JSON specs.\nProvides hierarchical progress recalculation and status updates.",
      "classes": [],
      "functions": [
        "recalculate_progress",
        "update_node_status",
        "update_parent_status",
        "get_progress_summary",
        "list_phases",
        "get_task_counts_by_status"
      ],
      "imports": [
        "typing.Dict",
        "typing.List"
      ],
      "exports": [],
      "lines": 280
    },
    {
      "name": "query_operations",
      "file": "src/claude_skills/claude_skills/common/query_operations.py",
      "language": "python",
      "docstring": "Query operations for SDD JSON specs.\nProvides filtering, searching, and retrieval of tasks and nodes.\nThese are pure read operations that don't modify state.",
      "classes": [],
      "functions": [
        "query_tasks",
        "get_task",
        "list_phases",
        "check_complete",
        "list_blockers"
      ],
      "imports": [
        "pathlib.Path",
        "typing.Optional",
        "typing.Dict",
        "typing.List",
        "spec.load_json_spec",
        "spec.get_node",
        "progress.list_phases",
        "printer.PrettyPrinter"
      ],
      "exports": [],
      "lines": 370
    },
    {
      "name": "reporting",
      "file": "src/claude_skills/claude_skills/common/reporting.py",
      "language": "python",
      "docstring": "Reporting operations for sdd-plan.\nGenerates comprehensive validation reports for spec and JSON specs.",
      "classes": [],
      "functions": [
        "generate_spec_report",
        "generate_json_spec_report",
        "generate_combined_report"
      ],
      "imports": [
        "pathlib.Path",
        "datetime.datetime",
        "typing.List",
        "claude_skills.common.SpecValidationResult",
        "claude_skills.common.JsonSpecValidationResult"
      ],
      "exports": [],
      "lines": 190
    },
    {
      "name": "spec",
      "file": "src/claude_skills/claude_skills/common/spec.py",
      "language": "python",
      "docstring": "JSON spec file operations for SDD workflows.\nProvides loading, saving, and backup with atomic writes.",
      "classes": [],
      "functions": [
        "extract_frontmatter",
        "_extract_json_frontmatter",
        "_extract_markdown_frontmatter",
        "_coerce_scalar",
        "load_json_spec",
        "save_json_spec",
        "backup_json_spec",
        "_validate_spec_structure",
        "get_node",
        "update_node"
      ],
      "imports": [
        "sys",
        "json",
        "shutil",
        "datetime.datetime",
        "datetime.timezone",
        "pathlib.Path",
        "typing.Optional",
        "typing.Dict",
        "typing.Any",
        "typing.Union",
        "paths.find_spec_file"
      ],
      "exports": [],
      "lines": 352
    },
    {
      "name": "spec_analysis",
      "file": "src/claude_skills/claude_skills/common/spec_analysis.py",
      "language": "python",
      "docstring": "Spec file analysis and statistics.\n\nProvides functions for analyzing spec documents, counting elements,\nand extracting metadata.\n\nMigrated from sdd-next/scripts/validation.py to eliminate duplication.",
      "classes": [],
      "functions": [
        "get_spec_statistics",
        "count_spec_elements",
        "get_json_spec_metadata",
        "analyze_spec_complexity",
        "compare_spec_files"
      ],
      "imports": [
        "json",
        "re",
        "pathlib.Path",
        "typing.Dict",
        "typing.Optional",
        "spec.extract_frontmatter"
      ],
      "exports": [],
      "lines": 336
    },
    {
      "name": "validation",
      "file": "src/claude_skills/claude_skills/common/validation.py",
      "language": "python",
      "docstring": "Validation utilities and result classes for SDD workflows.\nProvides common validation result structures used across all SDD skills.",
      "classes": [
        "EnhancedError",
        "SpecValidationResult",
        "JsonSpecValidationResult"
      ],
      "functions": [
        "validate_status",
        "validate_node_type",
        "validate_spec_id_format",
        "validate_iso8601_date",
        "normalize_message_text"
      ],
      "imports": [
        "re",
        "dataclasses.dataclass",
        "dataclasses.field",
        "typing.Any",
        "typing.Dict",
        "typing.List",
        "typing.Optional",
        "typing.Tuple"
      ],
      "exports": [],
      "lines": 249
    },
    {
      "name": "__init__",
      "file": "src/claude_skills/claude_skills/dev_tools/__init__.py",
      "language": "python",
      "docstring": "Development tools for claude_skills package.",
      "classes": [],
      "functions": [],
      "imports": [],
      "exports": [],
      "lines": 3
    },
    {
      "name": "generate_docs",
      "file": "src/claude_skills/claude_skills/dev_tools/generate_docs.py",
      "language": "python",
      "docstring": "Generate SKILL.md documentation from CLI argparse definitions.\n\nThis script dynamically introspects any claude_skills CLI module and generates\nmarkdown documentation for commands, arguments, and options.\n\nUsage:\n    claude-skills-gendocs sdd-validate\n    claude-skills-gendocs sdd-next --output-file /path/to/output.md\n    claude-skills-gendocs doc-query --section commands",
      "classes": [],
      "functions": [
        "get_parser_from_module",
        "format_argument",
        "generate_global_options",
        "extract_subparsers",
        "generate_command_reference",
        "generate_simple_usage",
        "generate_documentation",
        "main"
      ],
      "imports": [
        "argparse",
        "importlib",
        "sys",
        "pathlib.Path",
        "typing.Dict",
        "typing.List",
        "typing.Tuple",
        "typing.Optional",
        "io",
        "contextlib.redirect_stdout",
        "contextlib.redirect_stderr"
      ],
      "exports": [],
      "lines": 365
    },
    {
      "name": "sdd_start_helper",
      "file": "src/claude_skills/claude_skills/dev_tools/sdd_start_helper.py",
      "language": "python",
      "docstring": "SDD Start Helper Script\n\nProvides commands for /sdd-start slash command and session management:\n- check-permissions: Check if SDD permissions are configured\n- format-output: Human-readable formatted text for active specs with last-accessed task\n- find-active-work: JSON with all resumable specs\n- get-session-info: Session state with last-accessed task (JSON)",
      "classes": [],
      "functions": [
        "check_permissions",
        "find_active_work",
        "format_output",
        "get_session_info",
        "main"
      ],
      "imports": [
        "argparse",
        "json",
        "os",
        "sys",
        "pathlib.Path",
        "datetime.datetime",
        "common.integrations.get_session_state"
      ],
      "exports": [],
      "lines": 295
    },
    {
      "name": "setup_project_permissions",
      "file": "src/claude_skills/claude_skills/dev_tools/setup_project_permissions.py",
      "language": "python",
      "docstring": "Setup Project Permissions Script\n\nConfigures .claude/settings.json with required SDD tool permissions.\nUsed by /sdd-start command and sdd-plan skill to ensure proper permissions.",
      "classes": [],
      "functions": [
        "update_permissions",
        "check_permissions",
        "main"
      ],
      "imports": [
        "argparse",
        "json",
        "sys",
        "pathlib.Path"
      ],
      "exports": [],
      "lines": 185
    },
    {
      "name": "__init__",
      "file": "src/claude_skills/claude_skills/doc_query/__init__.py",
      "language": "python",
      "docstring": "Documentation Query Module\n\nTools for querying generated codebase documentation.",
      "classes": [],
      "functions": [],
      "imports": [],
      "exports": [],
      "lines": 4
    },
    {
      "name": "cli",
      "file": "src/claude_skills/claude_skills/doc_query/cli.py",
      "language": "python",
      "docstring": "Documentation query CLI with unified CLI integration.",
      "classes": [],
      "functions": [
        "_dump_json",
        "_maybe_json",
        "_ensure_query",
        "_results_to_json",
        "_context_to_json",
        "_print_results",
        "format_result",
        "print_context",
        "print_module_summary",
        "cmd_find_class",
        "cmd_find_function",
        "cmd_find_module",
        "cmd_complexity",
        "cmd_dependencies",
        "cmd_search",
        "cmd_context",
        "cmd_describe_module",
        "cmd_stats",
        "cmd_list_classes",
        "cmd_list_functions",
        "cmd_list_modules",
        "register_doc_query"
      ],
      "imports": [
        "__future__.annotations",
        "argparse",
        "json",
        "sys",
        "typing.Any",
        "typing.Dict",
        "typing.List",
        "typing.Optional",
        "claude_skills.common.PrettyPrinter",
        "claude_skills.common.metrics.track_metrics",
        "claude_skills.doc_query.doc_query_lib.DocumentationQuery",
        "claude_skills.doc_query.doc_query_lib.QueryResult",
        "claude_skills.doc_query.doc_query_lib.check_docs_exist"
      ],
      "exports": [],
      "lines": 500
    },
    {
      "name": "doc_query_lib",
      "file": "src/claude_skills/claude_skills/doc_query/doc_query_lib.py",
      "language": "python",
      "docstring": "Core library for querying machine-readable codebase documentation.\n\nThis library provides functions to load and query documentation.json files\ngenerated by the code-doc skill.",
      "classes": [
        "QueryResult",
        "DocumentationQuery"
      ],
      "functions": [
        "check_docs_exist",
        "load_documentation"
      ],
      "imports": [
        "json",
        "re",
        "textwrap",
        "pathlib.Path",
        "typing.Dict",
        "typing.List",
        "typing.Optional",
        "typing.Union",
        "typing.Any",
        "typing.Iterable",
        "dataclasses.dataclass"
      ],
      "exports": [],
      "lines": 1036
    },
    {
      "name": "sdd_integration",
      "file": "src/claude_skills/claude_skills/doc_query/sdd_integration.py",
      "language": "python",
      "docstring": "SDD (Spec-Driven Development) integration helpers for doc-query.\n\nThis module provides functions that SDD tools (sdd-plan, sdd-next, sdd-update)\ncan use to gather relevant context from codebase documentation.",
      "classes": [
        "SDDContextGatherer"
      ],
      "functions": [
        "get_task_context",
        "suggest_files_for_task",
        "find_similar_implementations",
        "get_test_context",
        "get_impact_analysis",
        "main"
      ],
      "imports": [
        "re",
        "pathlib.Path",
        "typing.Dict",
        "typing.List",
        "typing.Optional",
        "typing.Set",
        "doc_query_lib.DocumentationQuery",
        "doc_query_lib.QueryResult"
      ],
      "exports": [],
      "lines": 452
    },
    {
      "name": "__init__",
      "file": "src/claude_skills/claude_skills/run_tests/__init__.py",
      "language": "python",
      "docstring": "Run-Tests Helper Scripts Package\n\nA modular testing and debugging framework for pytest.\nProvides operations for tool checking, external consultation, test discovery, and pytest execution.",
      "classes": [],
      "functions": [],
      "imports": [],
      "exports": [],
      "lines": 14
    },
    {
      "name": "cli",
      "file": "src/claude_skills/claude_skills/run_tests/cli.py",
      "language": "python",
      "docstring": "Testing tools CLI with unified CLI integration.",
      "classes": [],
      "functions": [
        "_dump_json",
        "_maybe_json",
        "cmd_check_tools",
        "cmd_consult",
        "cmd_discover",
        "cmd_run",
        "register_run_tests"
      ],
      "imports": [
        "__future__.annotations",
        "argparse",
        "json",
        "sys",
        "typing.Any",
        "typing.Dict",
        "typing.List",
        "typing.Optional",
        "claude_skills.common.PrettyPrinter",
        "claude_skills.common.metrics.track_metrics",
        "claude_skills.run_tests.tool_checking.print_tool_status",
        "claude_skills.run_tests.tool_checking.get_tool_status_dict",
        "claude_skills.run_tests.tool_checking.FAILURE_TYPES",
        "claude_skills.run_tests.consultation.consult_with_auto_routing",
        "claude_skills.run_tests.consultation.consult_multi_agent",
        "claude_skills.run_tests.consultation.run_consultation",
        "claude_skills.run_tests.consultation.print_routing_matrix",
        "claude_skills.run_tests.consultation.should_auto_trigger_consensus",
        "claude_skills.run_tests.consultation.get_consensus_pair_for_failure",
        "claude_skills.run_tests.consultation.FAILURE_TYPES",
        "claude_skills.run_tests.consultation.MULTI_AGENT_PAIRS",
        "claude_skills.run_tests.consultation.get_available_tools",
        "claude_skills.run_tests.test_discovery.print_discovery_report",
        "claude_skills.run_tests.pytest_runner.run_pytest",
        "claude_skills.run_tests.pytest_runner.list_presets",
        "claude_skills.run_tests.pytest_runner.get_presets",
        "claude_skills.run_tests.pytest_runner.validate_preset"
      ],
      "exports": [],
      "lines": 250
    },
    {
      "name": "consultation",
      "file": "src/claude_skills/claude_skills/run_tests/consultation.py",
      "language": "python",
      "docstring": "External Tool Consultation Operations\n\nHandles consultation with external CLI tools (Gemini, Codex, Cursor) for test\ndebugging. Provides auto-routing based on failure type and prompt formatting.",
      "classes": [
        "ConsultationResponse"
      ],
      "functions": [
        "load_model_config",
        "get_model_for_tool",
        "get_flags_for_tool",
        "load_consensus_config",
        "should_auto_trigger_consensus",
        "get_consensus_pair_for_failure",
        "get_consensus_pairs",
        "get_consultation_timeout",
        "_build_tool_commands",
        "get_best_tool",
        "format_prompt",
        "read_code_file",
        "run_consultation",
        "print_routing_matrix",
        "consult_with_auto_routing",
        "run_tool_parallel",
        "analyze_response_similarity",
        "synthesize_responses",
        "format_synthesis_output",
        "consult_multi_agent"
      ],
      "imports": [
        "subprocess",
        "pathlib.Path",
        "typing.Dict",
        "typing.List",
        "typing.Optional",
        "typing.Tuple",
        "typing.NamedTuple",
        "concurrent.futures.ThreadPoolExecutor",
        "concurrent.futures.as_completed",
        "time",
        "claude_skills.common.PrettyPrinter",
        "claude_skills.run_tests.tool_checking.check_tool_availability",
        "claude_skills.run_tests.tool_checking.get_available_tools",
        "claude_skills.run_tests.tool_checking.get_config_path"
      ],
      "exports": [],
      "lines": 1118
    },
    {
      "name": "pytest_runner",
      "file": "src/claude_skills/claude_skills/run_tests/pytest_runner.py",
      "language": "python",
      "docstring": "Pytest Runner Operations\n\nSmart pytest runner with presets for common testing scenarios.\nSimplifies running pytest with appropriate flags for different debugging and testing needs.",
      "classes": [],
      "functions": [
        "_detect_source_directory",
        "_get_presets",
        "build_pytest_command",
        "run_pytest",
        "get_presets",
        "list_presets",
        "validate_preset",
        "get_preset_description",
        "get_preset_flags"
      ],
      "imports": [
        "subprocess",
        "pathlib.Path",
        "typing.Dict",
        "typing.List",
        "typing.Optional",
        "claude_skills.common.PrettyPrinter"
      ],
      "exports": [],
      "lines": 293
    },
    {
      "name": "test_discovery",
      "file": "src/claude_skills/claude_skills/run_tests/test_discovery.py",
      "language": "python",
      "docstring": "Test Discovery Operations\n\nDiscovers and analyzes test structure in a project, including test files,\nfixtures, markers, configuration, and organization.",
      "classes": [],
      "functions": [
        "find_test_files",
        "find_conftest_files",
        "analyze_test_file",
        "analyze_conftest",
        "get_directory_structure",
        "print_tree_structure",
        "get_summary_stats",
        "collect_all_fixtures",
        "collect_all_markers",
        "print_discovery_report"
      ],
      "imports": [
        "re",
        "collections.defaultdict",
        "pathlib.Path",
        "typing.Dict",
        "typing.List",
        "typing.Optional",
        "typing.Set",
        "typing.Tuple",
        "claude_skills.common.PrettyPrinter"
      ],
      "exports": [],
      "lines": 455
    },
    {
      "name": "tool_checking",
      "file": "src/claude_skills/claude_skills/run_tests/tool_checking.py",
      "language": "python",
      "docstring": "Tool Checking Operations\n\nChecks availability of external CLI tools (Gemini, Codex, Cursor) and provides\nrouting suggestions for test debugging workflows.",
      "classes": [],
      "functions": [
        "get_config_path",
        "load_tool_config",
        "get_enabled_tools",
        "check_tool_availability",
        "get_available_tools",
        "get_missing_tools",
        "get_routing_suggestions",
        "get_quick_routing",
        "print_tool_status",
        "get_tool_status_dict",
        "load_consensus_config",
        "get_auto_trigger_failures",
        "get_consensus_info"
      ],
      "imports": [
        "shutil",
        "yaml",
        "pathlib.Path",
        "typing.Dict",
        "typing.List",
        "typing.Optional",
        "claude_skills.common.PrettyPrinter"
      ],
      "exports": [],
      "lines": 396
    },
    {
      "name": "__init__",
      "file": "src/claude_skills/claude_skills/sdd_next/__init__.py",
      "language": "python",
      "docstring": "SDD Next Operations\n\nModular operations for spec-driven development task discovery and execution planning.",
      "classes": [],
      "functions": [],
      "imports": [
        "discovery.get_next_task",
        "discovery.get_task_info",
        "discovery.check_dependencies",
        "discovery.prepare_task",
        "project.detect_project",
        "project.find_tests",
        "project.check_environment",
        "project.find_related_files",
        "validation.validate_spec",
        "validation.find_circular_deps",
        "validation.validate_paths",
        "validation.spec_stats",
        "workflow.init_environment",
        "workflow.find_pattern"
      ],
      "exports": [],
      "lines": 34
    },
    {
      "name": "cli",
      "file": "src/claude_skills/claude_skills/sdd_next/cli.py",
      "language": "python",
      "docstring": "Spec-Driven Development Tools - Next Task Discovery\nA modular CLI utility for working with spec-driven development workflows.\n\nRefactored to use sdd-common utilities and modular operations.",
      "classes": [],
      "functions": [
        "format_execution_plan",
        "cmd_verify_tools",
        "cmd_find_specs",
        "cmd_next_task",
        "cmd_task_info",
        "cmd_check_deps",
        "cmd_progress",
        "cmd_init_env",
        "cmd_prepare_task",
        "cmd_format_plan",
        "cmd_validate_spec",
        "cmd_find_pattern",
        "cmd_detect_project",
        "cmd_find_tests",
        "cmd_check_environment",
        "cmd_find_circular_deps",
        "cmd_find_related_files",
        "cmd_validate_paths",
        "cmd_spec_stats",
        "register_next"
      ],
      "imports": [
        "json",
        "sys",
        "argparse",
        "pathlib.Path",
        "typing.List",
        "os",
        "claude_skills.common.find_specs_directory",
        "claude_skills.common.load_json_spec",
        "claude_skills.common.get_progress_summary",
        "claude_skills.common.list_phases",
        "claude_skills.common.PrettyPrinter",
        "claude_skills.common.query_tasks",
        "claude_skills.common.check_complete",
        "claude_skills.common.list_blockers",
        "claude_skills.sdd_next.discovery.get_next_task",
        "claude_skills.sdd_next.discovery.get_task_info",
        "claude_skills.sdd_next.discovery.check_dependencies",
        "claude_skills.sdd_next.discovery.prepare_task",
        "claude_skills.sdd_next.project.detect_project",
        "claude_skills.sdd_next.project.find_tests",
        "claude_skills.sdd_next.project.check_environment",
        "claude_skills.sdd_next.project.find_related_files",
        "claude_skills.sdd_next.validation.validate_spec",
        "claude_skills.sdd_next.validation.find_circular_deps",
        "claude_skills.sdd_next.validation.validate_paths",
        "claude_skills.sdd_next.validation.spec_stats",
        "claude_skills.sdd_next.workflow.init_environment",
        "claude_skills.sdd_next.workflow.find_pattern"
      ],
      "exports": [],
      "lines": 974
    },
    {
      "name": "discovery",
      "file": "src/claude_skills/claude_skills/sdd_next/discovery.py",
      "language": "python",
      "docstring": "Task discovery and analysis operations for SDD workflows.",
      "classes": [],
      "functions": [
        "get_next_task",
        "get_task_info",
        "check_dependencies",
        "prepare_task"
      ],
      "imports": [
        "pathlib.Path",
        "typing.Optional",
        "typing.Dict",
        "typing.Tuple",
        "claude_skills.common.load_json_spec",
        "claude_skills.common.get_node",
        "claude_skills.common.validate_spec_before_proceed",
        "claude_skills.common.get_task_context_from_docs",
        "claude_skills.common.check_doc_query_available"
      ],
      "exports": [],
      "lines": 235
    },
    {
      "name": "project",
      "file": "src/claude_skills/claude_skills/sdd_next/project.py",
      "language": "python",
      "docstring": "Project detection and analysis operations for sdd-next.\n\nThis module provides functions for detecting project types, finding tests,\nchecking environment requirements, and discovering related files.",
      "classes": [],
      "functions": [
        "detect_project",
        "find_tests",
        "check_environment",
        "find_related_files"
      ],
      "imports": [
        "json",
        "pathlib.Path",
        "typing.Dict",
        "typing.List",
        "typing.Optional"
      ],
      "exports": [],
      "lines": 375
    },
    {
      "name": "validation",
      "file": "src/claude_skills/claude_skills/sdd_next/validation.py",
      "language": "python",
      "docstring": "JSON-aware validation helpers for sdd-next.",
      "classes": [],
      "functions": [
        "validate_spec",
        "find_circular_deps",
        "validate_paths",
        "spec_stats"
      ],
      "imports": [
        "json",
        "pathlib.Path",
        "typing.Dict",
        "typing.Optional",
        "claude_skills.common.load_json_spec",
        "claude_skills.common.find_circular_dependencies",
        "claude_skills.common.validate_and_normalize_paths",
        "claude_skills.common.validate_spec_hierarchy",
        "claude_skills.common.spec_analysis.get_json_spec_metadata"
      ],
      "exports": [],
      "lines": 157
    },
    {
      "name": "workflow",
      "file": "src/claude_skills/claude_skills/sdd_next/workflow.py",
      "language": "python",
      "docstring": "Workflow operations for sdd-next.\n\nThis module provides functions for initializing the development environment\nand performing file pattern searches.",
      "classes": [],
      "functions": [
        "init_environment",
        "find_pattern"
      ],
      "imports": [
        "pathlib.Path",
        "typing.Dict",
        "typing.List",
        "typing.Optional",
        "claude_skills.common.find_specs_directory",
        "claude_skills.common.ensure_directory"
      ],
      "exports": [],
      "lines": 85
    },
    {
      "name": "__init__",
      "file": "src/claude_skills/claude_skills/sdd_plan/__init__.py",
      "language": "python",
      "docstring": "SDD Plan - Specification creation and planning tools.",
      "classes": [],
      "functions": [],
      "imports": [
        "claude_skills.sdd_plan.templates.list_templates",
        "claude_skills.sdd_plan.templates.get_template",
        "claude_skills.sdd_plan.templates.generate_spec_from_template",
        "claude_skills.sdd_plan.templates.get_template_description",
        "claude_skills.sdd_plan.planner.analyze_codebase",
        "claude_skills.sdd_plan.planner.create_spec_interactive",
        "claude_skills.sdd_plan.planner.find_specs_directory",
        "claude_skills.sdd_plan.planner.get_project_context"
      ],
      "exports": [],
      "lines": 27
    },
    {
      "name": "cli",
      "file": "src/claude_skills/claude_skills/sdd_plan/cli.py",
      "language": "python",
      "docstring": "SDD Plan CLI - Specification creation and planning commands.",
      "classes": [],
      "functions": [
        "cmd_create",
        "cmd_analyze",
        "cmd_template",
        "register_plan"
      ],
      "imports": [
        "argparse",
        "sys",
        "json",
        "pathlib.Path",
        "claude_skills.common.PrettyPrinter",
        "claude_skills.sdd_plan.list_templates",
        "claude_skills.sdd_plan.get_template_description",
        "claude_skills.sdd_plan.create_spec_interactive",
        "claude_skills.sdd_plan.analyze_codebase",
        "claude_skills.sdd_plan.get_project_context",
        "claude_skills.sdd_plan.find_specs_directory"
      ],
      "exports": [],
      "lines": 202
    },
    {
      "name": "planner",
      "file": "src/claude_skills/claude_skills/sdd_plan/planner.py",
      "language": "python",
      "docstring": "Core planning logic for sdd-plan.\n\nProvides spec creation, codebase analysis, and planning workflows.",
      "classes": [],
      "functions": [
        "analyze_codebase",
        "parse_doc_query_stats",
        "create_spec_interactive",
        "find_specs_directory",
        "suggest_documentation_generation",
        "get_project_context"
      ],
      "imports": [
        "json",
        "subprocess",
        "pathlib.Path",
        "typing.Dict",
        "typing.Any",
        "typing.Optional",
        "typing.Tuple",
        "datetime.datetime"
      ],
      "exports": [],
      "lines": 207
    },
    {
      "name": "templates",
      "file": "src/claude_skills/claude_skills/sdd_plan/templates.py",
      "language": "python",
      "docstring": "Spec template management for sdd-plan.\n\nProvides predefined templates for different types of specifications.",
      "classes": [],
      "functions": [
        "list_templates",
        "get_template",
        "generate_spec_from_template",
        "get_template_description"
      ],
      "imports": [
        "typing.Dict",
        "typing.Any",
        "datetime.datetime"
      ],
      "exports": [],
      "lines": 188
    },
    {
      "name": "__init__",
      "file": "src/claude_skills/claude_skills/sdd_plan_review/__init__.py",
      "language": "python",
      "docstring": "SDD Plan Review - Multi-model specification review tools.",
      "classes": [],
      "functions": [],
      "imports": [
        "claude_skills.sdd_plan_review.reviewer.check_tool_available",
        "claude_skills.sdd_plan_review.reviewer.detect_available_tools",
        "claude_skills.sdd_plan_review.reviewer.review_with_tools",
        "claude_skills.sdd_plan_review.prompts.generate_review_prompt",
        "claude_skills.sdd_plan_review.synthesis.parse_response",
        "claude_skills.sdd_plan_review.synthesis.build_consensus",
        "claude_skills.sdd_plan_review.reporting.generate_markdown_report",
        "claude_skills.sdd_plan_review.reporting.generate_json_report"
      ],
      "exports": [],
      "lines": 31
    },
    {
      "name": "cli",
      "file": "src/claude_skills/claude_skills/sdd_plan_review/cli.py",
      "language": "python",
      "docstring": "SDD Plan Review CLI - Multi-model specification review commands.\n\nUses external AI CLI tools (gemini, codex, cursor-agent) to review specs\nfrom multiple perspectives and provide actionable feedback.",
      "classes": [],
      "functions": [
        "cmd_review",
        "cmd_list_tools",
        "register_plan_review"
      ],
      "imports": [
        "argparse",
        "sys",
        "json",
        "pathlib.Path",
        "claude_skills.common.PrettyPrinter",
        "claude_skills.common.load_json_spec",
        "claude_skills.sdd_plan_review.check_tool_available",
        "claude_skills.sdd_plan_review.detect_available_tools",
        "claude_skills.sdd_plan_review.review_with_tools",
        "claude_skills.sdd_plan_review.reporting.generate_markdown_report",
        "claude_skills.sdd_plan_review.reporting.generate_json_report"
      ],
      "exports": [],
      "lines": 258
    },
    {
      "name": "prompts",
      "file": "src/claude_skills/claude_skills/sdd_plan_review/prompts.py",
      "language": "python",
      "docstring": "Unbiased prompt generation for spec reviews.\n\nGenerates prompts that actively fight LLM sycophancy by assuming problems exist\nand demanding critical analysis.",
      "classes": [],
      "functions": [
        "generate_review_prompt",
        "_generate_full_review_prompt",
        "_generate_quick_review_prompt",
        "_generate_security_review_prompt",
        "_generate_feasibility_review_prompt",
        "get_stance_instruction"
      ],
      "imports": [
        "typing.Dict",
        "typing.Any"
      ],
      "exports": [],
      "lines": 309
    },
    {
      "name": "reporting",
      "file": "src/claude_skills/claude_skills/sdd_plan_review/reporting.py",
      "language": "python",
      "docstring": "Comprehensive report generation for spec reviews.\n\nGenerates markdown and JSON reports from multi-model consensus data.",
      "classes": [],
      "functions": [
        "generate_markdown_report",
        "_get_recommendation_summary",
        "_get_score_assessment",
        "_format_issue",
        "generate_json_report"
      ],
      "imports": [
        "datetime.datetime",
        "typing.Dict",
        "typing.Any",
        "typing.List"
      ],
      "exports": [],
      "lines": 340
    },
    {
      "name": "reviewer",
      "file": "src/claude_skills/claude_skills/sdd_plan_review/reviewer.py",
      "language": "python",
      "docstring": "Multi-model review orchestration for sdd-plan-review.\n\nHandles parallel execution of AI CLI tools and response collection.",
      "classes": [],
      "functions": [
        "check_tool_available",
        "detect_available_tools",
        "call_tool",
        "review_with_tools"
      ],
      "imports": [
        "subprocess",
        "json",
        "time",
        "tempfile",
        "pathlib.Path",
        "typing.Dict",
        "typing.Any",
        "typing.List",
        "typing.Optional",
        "typing.Tuple",
        "concurrent.futures.ThreadPoolExecutor",
        "concurrent.futures.as_completed",
        "concurrent.futures.wait",
        "claude_skills.sdd_plan_review.prompts.generate_review_prompt",
        "claude_skills.sdd_plan_review.synthesis.parse_response",
        "claude_skills.sdd_plan_review.synthesis.build_consensus"
      ],
      "exports": [],
      "lines": 316
    },
    {
      "name": "synthesis",
      "file": "src/claude_skills/claude_skills/sdd_plan_review/synthesis.py",
      "language": "python",
      "docstring": "Multi-model response synthesis for spec reviews.\n\nParses AI tool responses, extracts structured data, builds consensus,\nand generates overall recommendations.",
      "classes": [],
      "functions": [
        "parse_response",
        "extract_with_regex",
        "normalize_response",
        "normalize_severity",
        "build_consensus",
        "aggregate_issues",
        "calculate_consensus_level",
        "identify_agreements"
      ],
      "imports": [
        "json",
        "re",
        "typing.Dict",
        "typing.Any",
        "typing.List",
        "typing.Optional",
        "typing.Tuple",
        "statistics.mean",
        "statistics.median"
      ],
      "exports": [],
      "lines": 418
    },
    {
      "name": "__init__",
      "file": "src/claude_skills/claude_skills/sdd_update/__init__.py",
      "language": "python",
      "docstring": "SDD Update Operations\n\nModular operations for spec-driven development progress tracking.",
      "classes": [],
      "functions": [],
      "imports": [
        "status.update_task_status",
        "status.mark_task_blocked",
        "status.unblock_task",
        "journal.add_journal_entry",
        "journal.update_metadata",
        "verification.add_verification_result",
        "lifecycle.move_spec",
        "lifecycle.complete_spec",
        "time_tracking.track_time",
        "time_tracking.generate_time_report",
        "validation.validate_spec",
        "validation.get_status_report",
        "validation.audit_spec",
        "query.query_tasks",
        "query.get_task",
        "query.list_phases",
        "query.check_complete",
        "query.phase_time",
        "query.list_blockers"
      ],
      "exports": [],
      "lines": 55
    },
    {
      "name": "cli",
      "file": "src/claude_skills/claude_skills/sdd_update/cli.py",
      "language": "python",
      "docstring": "SDD Update Tools - Progress tracking and documentation for spec-driven development.\n\nProvides commands for updating task status, journaling decisions, tracking time,\nand managing spec lifecycle.",
      "classes": [],
      "functions": [
        "cmd_execute_verify",
        "cmd_update_status",
        "cmd_mark_blocked",
        "cmd_unblock_task",
        "cmd_add_journal",
        "cmd_add_revision",
        "cmd_update_frontmatter",
        "cmd_add_verification",
        "cmd_format_verification_summary",
        "cmd_move_spec",
        "cmd_complete_spec",
        "cmd_track_time",
        "cmd_time_report",
        "cmd_status_report",
        "cmd_audit_spec",
        "cmd_query_tasks",
        "cmd_get_task",
        "cmd_list_phases",
        "cmd_check_complete",
        "cmd_phase_time",
        "cmd_list_blockers",
        "cmd_reconcile_state",
        "cmd_check_journaling",
        "cmd_bulk_journal",
        "cmd_complete_task",
        "cmd_sync_metadata",
        "register_update"
      ],
      "imports": [
        "argparse",
        "json",
        "sys",
        "pathlib.Path",
        "claude_skills.common.find_specs_directory",
        "claude_skills.common.PrettyPrinter",
        "claude_skills.common.execute_verify_task",
        "claude_skills.common.load_json_spec",
        "claude_skills.sdd_update.status.update_task_status",
        "claude_skills.sdd_update.status.mark_task_blocked",
        "claude_skills.sdd_update.status.unblock_task",
        "claude_skills.sdd_update.workflow.complete_task_workflow",
        "claude_skills.sdd_update.journal.add_journal_entry",
        "claude_skills.sdd_update.journal.update_metadata",
        "claude_skills.sdd_update.journal.bulk_journal_tasks",
        "claude_skills.sdd_update.journal.sync_metadata_from_state",
        "claude_skills.sdd_update.journal.add_revision_entry",
        "claude_skills.sdd_update.verification.add_verification_result",
        "claude_skills.sdd_update.verification.format_verification_summary",
        "claude_skills.sdd_update.lifecycle.move_spec",
        "claude_skills.sdd_update.lifecycle.complete_spec",
        "claude_skills.sdd_update.time_tracking.track_time",
        "claude_skills.sdd_update.time_tracking.generate_time_report",
        "claude_skills.sdd_update.validation.validate_spec",
        "claude_skills.sdd_update.validation.get_status_report",
        "claude_skills.sdd_update.validation.audit_spec",
        "claude_skills.sdd_update.validation.reconcile_state",
        "claude_skills.sdd_update.validation.detect_unjournaled_tasks",
        "claude_skills.sdd_update.query.query_tasks",
        "claude_skills.sdd_update.query.get_task",
        "claude_skills.sdd_update.query.list_phases",
        "claude_skills.sdd_update.query.check_complete",
        "claude_skills.sdd_update.query.phase_time",
        "claude_skills.sdd_update.query.list_blockers"
      ],
      "exports": [],
      "lines": 981
    },
    {
      "name": "journal",
      "file": "src/claude_skills/claude_skills/sdd_update/journal.py",
      "language": "python",
      "docstring": "Journal and metadata operations for SDD workflows.\n\nAll operations work with JSON spec files only. No markdown files are used.",
      "classes": [],
      "functions": [
        "mark_task_journaled",
        "_build_journal_entry",
        "_ensure_journal_container",
        "add_journal_entry",
        "update_metadata",
        "add_revision_entry",
        "_render_template",
        "bulk_journal_tasks",
        "sync_metadata_from_state"
      ],
      "imports": [
        "pathlib.Path",
        "typing.Optional",
        "typing.List",
        "typing.Dict",
        "typing.Any",
        "typing.Tuple",
        "datetime.datetime",
        "datetime.timezone",
        "string.Template",
        "claude_skills.common.printer.PrettyPrinter",
        "claude_skills.common.spec.load_json_spec",
        "claude_skills.common.spec.save_json_spec",
        "claude_skills.common.spec.update_node",
        "claude_skills.common.paths.find_specs_directory"
      ],
      "exports": [],
      "lines": 643
    },
    {
      "name": "lifecycle",
      "file": "src/claude_skills/claude_skills/sdd_update/lifecycle.py",
      "language": "python",
      "docstring": "Spec lifecycle management operations for SDD workflows.\n\nAll operations work with JSON spec files only. No markdown files are used.",
      "classes": [],
      "functions": [
        "move_spec",
        "complete_spec"
      ],
      "imports": [
        "shutil",
        "pathlib.Path",
        "typing.Optional",
        "datetime.datetime",
        "datetime.timezone",
        "claude_skills.common.spec.load_json_spec",
        "claude_skills.common.spec.save_json_spec",
        "claude_skills.common.paths.ensure_directory",
        "claude_skills.common.printer.PrettyPrinter"
      ],
      "exports": [],
      "lines": 177
    },
    {
      "name": "query",
      "file": "src/claude_skills/claude_skills/sdd_update/query.py",
      "language": "python",
      "docstring": "Query operations for SDD JSON specs.\nProvides filtering, searching, and retrieval of tasks and nodes.\n\nNote: Core query operations have been moved to sdd_common.query_operations.\nThis module now provides time tracking queries and re-exports common operations.",
      "classes": [],
      "functions": [
        "phase_time"
      ],
      "imports": [
        "pathlib.Path",
        "typing.Optional",
        "typing.Dict",
        "typing.List",
        "claude_skills.common.query_operations.query_tasks",
        "claude_skills.common.query_operations.get_task",
        "claude_skills.common.query_operations.list_phases",
        "claude_skills.common.query_operations.check_complete",
        "claude_skills.common.query_operations.list_blockers",
        "claude_skills.common.spec.load_json_spec",
        "claude_skills.common.printer.PrettyPrinter"
      ],
      "exports": [],
      "lines": 139
    },
    {
      "name": "status",
      "file": "src/claude_skills/claude_skills/sdd_update/status.py",
      "language": "python",
      "docstring": "Task status update operations for SDD workflows.",
      "classes": [],
      "functions": [
        "find_verify_tasks_for_task",
        "update_task_status",
        "mark_task_blocked",
        "unblock_task"
      ],
      "imports": [
        "pathlib.Path",
        "typing.Optional",
        "typing.List",
        "datetime.datetime",
        "datetime.timezone",
        "claude_skills.common.spec.load_json_spec",
        "claude_skills.common.spec.save_json_spec",
        "claude_skills.common.spec.update_node",
        "claude_skills.common.progress.recalculate_progress",
        "claude_skills.common.printer.PrettyPrinter",
        "claude_skills.common.execute_verify_task"
      ],
      "exports": [],
      "lines": 449
    },
    {
      "name": "time_tracking",
      "file": "src/claude_skills/claude_skills/sdd_update/time_tracking.py",
      "language": "python",
      "docstring": "Time tracking operations for SDD workflows.\n\nAll operations work with JSON spec files only. No markdown files are used.",
      "classes": [],
      "functions": [
        "track_time",
        "generate_time_report"
      ],
      "imports": [
        "pathlib.Path",
        "typing.Optional",
        "typing.Dict",
        "claude_skills.common.spec.load_json_spec",
        "claude_skills.common.spec.save_json_spec",
        "claude_skills.common.spec.update_node",
        "claude_skills.common.printer.PrettyPrinter"
      ],
      "exports": [],
      "lines": 166
    },
    {
      "name": "validation",
      "file": "src/claude_skills/claude_skills/sdd_update/validation.py",
      "language": "python",
      "docstring": "JSON spec validation and reporting operations for SDD workflows.",
      "classes": [],
      "functions": [
        "validate_spec",
        "get_status_report",
        "audit_spec",
        "reconcile_state",
        "detect_unjournaled_tasks"
      ],
      "imports": [
        "pathlib.Path",
        "typing.Optional",
        "typing.Dict",
        "typing.List",
        "claude_skills.common.spec.load_json_spec",
        "claude_skills.common.progress.get_progress_summary",
        "claude_skills.common.progress.list_phases",
        "claude_skills.common.progress.get_task_counts_by_status",
        "claude_skills.common.printer.PrettyPrinter",
        "claude_skills.common.dependency_analysis.find_circular_dependencies",
        "claude_skills.common.hierarchy_validation.validate_spec_hierarchy"
      ],
      "exports": [],
      "lines": 376
    },
    {
      "name": "verification",
      "file": "src/claude_skills/claude_skills/sdd_update/verification.py",
      "language": "python",
      "docstring": "Verification result documentation for SDD workflows.\n\nAll operations work with JSON spec files only. No markdown files are used.",
      "classes": [],
      "functions": [
        "add_verification_result",
        "format_verification_summary"
      ],
      "imports": [
        "pathlib.Path",
        "typing.Optional",
        "datetime.datetime",
        "datetime.timezone",
        "claude_skills.common.printer.PrettyPrinter",
        "claude_skills.common.spec.load_json_spec",
        "claude_skills.common.spec.save_json_spec",
        "claude_skills.common.spec.update_node",
        "claude_skills.common.paths.find_specs_directory"
      ],
      "exports": [],
      "lines": 221
    },
    {
      "name": "workflow",
      "file": "src/claude_skills/claude_skills/sdd_update/workflow.py",
      "language": "python",
      "docstring": "Workflow utilities for orchestrating compound SDD update operations.",
      "classes": [],
      "functions": [
        "_get_timestamp",
        "_derive_default_journal",
        "_bump_version",
        "_simulate_workflow",
        "_calculate_diff",
        "_print_diff",
        "complete_task_workflow"
      ],
      "imports": [
        "__future__.annotations",
        "copy",
        "json",
        "datetime.datetime",
        "datetime.timezone",
        "pathlib.Path",
        "typing.Any",
        "typing.Dict",
        "typing.Optional",
        "typing.Tuple",
        "claude_skills.common.printer.PrettyPrinter",
        "claude_skills.common.spec.load_json_spec",
        "journal.add_journal_entry",
        "journal.add_revision_entry",
        "journal.mark_task_journaled",
        "journal.sync_metadata_from_state",
        "journal._build_journal_entry",
        "journal._ensure_journal_container",
        "status.update_task_status",
        "time_tracking.track_time"
      ],
      "exports": [],
      "lines": 408
    },
    {
      "name": "__init__",
      "file": "src/claude_skills/claude_skills/sdd_validate/__init__.py",
      "language": "python",
      "docstring": "Spec validation skill package.",
      "classes": [],
      "functions": [],
      "imports": [
        "formatting.NormalizedValidationResult",
        "formatting.format_validation_summary",
        "formatting.normalize_validation_result",
        "fix.FixAction",
        "fix.FixReport",
        "fix.collect_fix_actions",
        "fix.apply_fix_actions",
        "stats.SpecStatistics",
        "stats.calculate_statistics",
        "stats.render_statistics",
        "reporting.generate_report",
        "diff.DiffReport",
        "diff.compute_diff",
        "diff.format_diff_markdown",
        "diff.format_diff_json"
      ],
      "exports": [],
      "lines": 25
    },
    {
      "name": "cli",
      "file": "src/claude_skills/claude_skills/sdd_validate/cli.py",
      "language": "python",
      "docstring": "Standalone Spec Validation CLI\n\nValidates JSON spec files using sdd_common validation modules.\nProvides detailed reports for compliance issues.\n\nPart of the Spec-Driven Development (SDD) workflow.",
      "classes": [],
      "functions": [
        "_stats_to_dict",
        "_dependencies_to_dict",
        "_normalized_to_dict",
        "_serialize_fix_action",
        "_status_to_exit_code",
        "_filter_actions_by_selection",
        "_interactive_select_fixes",
        "cmd_validate",
        "cmd_fix",
        "cmd_report",
        "cmd_stats",
        "cmd_check_deps",
        "register_validate"
      ],
      "imports": [
        "argparse",
        "json",
        "sys",
        "pathlib.Path",
        "dataclasses.asdict",
        "typing.Any",
        "typing.Dict"
      ],
      "exports": [],
      "lines": 573
    },
    {
      "name": "diff",
      "file": "src/claude_skills/claude_skills/sdd_validate/diff.py",
      "language": "python",
      "docstring": "Diff computation and formatting for before/after spec fix comparisons.",
      "classes": [
        "FieldChange",
        "DiffReport"
      ],
      "functions": [
        "compute_diff",
        "_compare_nodes",
        "_compare_dicts",
        "format_diff_markdown",
        "format_diff_json",
        "_format_value"
      ],
      "imports": [
        "__future__.annotations",
        "copy",
        "json",
        "dataclasses.dataclass",
        "dataclasses.field",
        "typing.Any",
        "typing.Dict",
        "typing.List",
        "typing.Optional",
        "typing.Tuple"
      ],
      "exports": [],
      "lines": 264
    },
    {
      "name": "fix",
      "file": "src/claude_skills/claude_skills/sdd_validate/fix.py",
      "language": "python",
      "docstring": "Auto-fix helpers for the `sdd-validate` CLI.\n\nThis module translates validation findings into concrete fix actions that can\nbe previewed or applied directly to SDD spec JSON files.",
      "classes": [
        "FixAction",
        "FixReport"
      ],
      "functions": [
        "collect_fix_actions",
        "apply_fix_actions",
        "_build_counts_action",
        "_build_metadata_action",
        "_build_hierarchy_action",
        "_build_date_action",
        "_build_status_action",
        "_normalize_timestamp",
        "_resolve_node_id",
        "_normalize_status",
        "_build_missing_fields_action",
        "_build_empty_title_action",
        "_build_invalid_type_action",
        "_normalize_node_type",
        "_build_verification_type_action",
        "_build_bidirectional_deps_action",
        "_build_missing_deps_structure_action",
        "_build_leaf_count_action",
        "_build_orphan_action"
      ],
      "imports": [
        "__future__.annotations",
        "re",
        "copy",
        "dataclasses.asdict",
        "dataclasses.dataclass",
        "dataclasses.field",
        "json",
        "datetime.datetime",
        "datetime.timezone",
        "pathlib.Path",
        "typing.Any",
        "typing.Callable",
        "typing.Dict",
        "typing.Iterable",
        "typing.List",
        "typing.Optional",
        "typing.Sequence",
        "typing.Set",
        "claude_skills.common.backup_json_spec",
        "claude_skills.common.recalculate_progress",
        "claude_skills.common.save_json_spec",
        "claude_skills.common.validate_status",
        "claude_skills.common.validate_spec_hierarchy",
        "claude_skills.common.validation.EnhancedError",
        "claude_skills.common.validation.JsonSpecValidationResult",
        "claude_skills.sdd_validate.formatting.normalize_validation_result"
      ],
      "exports": [],
      "lines": 733
    },
    {
      "name": "formatting",
      "file": "src/claude_skills/claude_skills/sdd_validate/formatting.py",
      "language": "python",
      "docstring": "Output formatting utilities for the `sdd-validate` CLI.",
      "classes": [
        "NormalizedValidationResult"
      ],
      "functions": [
        "_category_from_field",
        "_collect_messages",
        "_merge_enhanced_issues",
        "normalize_validation_result",
        "format_validation_summary"
      ],
      "imports": [
        "__future__.annotations",
        "dataclasses.dataclass",
        "dataclasses.field",
        "typing.Any",
        "typing.Dict",
        "typing.Iterable",
        "typing.List",
        "typing.Optional",
        "typing.Sequence",
        "typing.Tuple",
        "claude_skills.common.validation.EnhancedError",
        "claude_skills.common.validation.JsonSpecValidationResult"
      ],
      "exports": [],
      "lines": 199
    },
    {
      "name": "reporting",
      "file": "src/claude_skills/claude_skills/sdd_validate/reporting.py",
      "language": "python",
      "docstring": "Report generation helpers for the `sdd-validate` CLI.",
      "classes": [],
      "functions": [
        "generate_report"
      ],
      "imports": [
        "__future__.annotations",
        "typing.Any",
        "typing.Dict",
        "typing.Optional",
        "claude_skills.common.JsonSpecValidationResult",
        "claude_skills.sdd_validate.formatting.NormalizedValidationResult",
        "claude_skills.sdd_validate.formatting.normalize_validation_result"
      ],
      "exports": [],
      "lines": 133
    },
    {
      "name": "stats",
      "file": "src/claude_skills/claude_skills/sdd_validate/stats.py",
      "language": "python",
      "docstring": "Statistics helpers for the `sdd-validate` CLI.",
      "classes": [
        "SpecStatistics"
      ],
      "functions": [
        "calculate_statistics",
        "render_statistics"
      ],
      "imports": [
        "__future__.annotations",
        "dataclasses.dataclass",
        "pathlib.Path",
        "typing.Any",
        "typing.Dict"
      ],
      "exports": [],
      "lines": 156
    }
  ],
  "classes": [
    {
      "name": "Command",
      "file": "scripts/extract_sdd_commands.py",
      "line": 19,
      "language": "python",
      "docstring": "Represents an extracted sdd command.",
      "bases": [],
      "methods": [],
      "properties": [],
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "Command",
      "file": "scripts/validate_sdd_commands.py",
      "line": 21,
      "language": "python",
      "docstring": "Represents an extracted sdd command.",
      "bases": [],
      "methods": [],
      "properties": [],
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "ValidationResult",
      "file": "scripts/validate_sdd_commands.py",
      "line": 30,
      "language": "python",
      "docstring": "Result of validating a command.",
      "bases": [],
      "methods": [],
      "properties": [],
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "CommandRegistry",
      "file": "scripts/validate_sdd_commands.py",
      "line": 38,
      "language": "python",
      "docstring": "Registry of valid sdd commands.",
      "bases": [],
      "methods": [
        "__init__",
        "add_command",
        "add_alias",
        "is_valid",
        "get_similar_commands"
      ],
      "properties": [],
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "CommandExtractor",
      "file": "scripts/validate_sdd_commands.py",
      "line": 139,
      "language": "python",
      "docstring": "Extract sdd commands from SKILL.md files.",
      "bases": [],
      "methods": [
        "__init__",
        "find_skill_files",
        "extract_from_file",
        "extract_all"
      ],
      "properties": [],
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "LegacyCommand",
      "file": "src/claude_skills/claude_skills/cli/skills_dev/registry.py",
      "line": 18,
      "language": "python",
      "docstring": null,
      "bases": [],
      "methods": [],
      "properties": [],
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "MarkdownGenerator",
      "file": "src/claude_skills/claude_skills/code_doc/formatter.py",
      "line": 12,
      "language": "python",
      "docstring": "Generates Markdown documentation.",
      "bases": [],
      "methods": [
        "__init__",
        "generate",
        "_header",
        "_statistics",
        "_language_breakdown",
        "_classes",
        "_functions",
        "_dependencies"
      ],
      "properties": [],
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "JSONGenerator",
      "file": "src/claude_skills/claude_skills/code_doc/formatter.py",
      "line": 195,
      "language": "python",
      "docstring": "Generates JSON documentation.",
      "bases": [],
      "methods": [
        "__init__",
        "generate"
      ],
      "properties": [],
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "DocumentationGenerator",
      "file": "src/claude_skills/claude_skills/code_doc/generator.py",
      "line": 21,
      "language": "python",
      "docstring": "Main orchestrator for documentation generation.\nCoordinates all stages: parsing, analysis, calculation, and formatting.\nSupports multiple programming languages.",
      "bases": [],
      "methods": [
        "__init__",
        "generate",
        "_convert_parse_result",
        "save_markdown",
        "save_json",
        "generate_all"
      ],
      "properties": [],
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "CodebaseAnalyzer",
      "file": "src/claude_skills/claude_skills/code_doc/parser.py",
      "line": 12,
      "language": "python",
      "docstring": "Analyzes Python codebase and extracts structure.",
      "bases": [],
      "methods": [
        "__init__",
        "analyze",
        "_find_python_files",
        "_analyze_file",
        "_extract_class",
        "_extract_function",
        "_extract_imports",
        "_get_name",
        "_create_result"
      ],
      "properties": [],
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "Language",
      "file": "src/claude_skills/claude_skills/code_doc/parsers/base.py",
      "line": 15,
      "language": "python",
      "docstring": "Supported programming languages.",
      "bases": [
        "Enum"
      ],
      "methods": [
        "from_extension"
      ],
      "properties": [],
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "ParsedParameter",
      "file": "src/claude_skills/claude_skills/code_doc/parsers/base.py",
      "line": 52,
      "language": "python",
      "docstring": "Represents a function/method parameter.",
      "bases": [],
      "methods": [],
      "properties": [],
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "ParsedFunction",
      "file": "src/claude_skills/claude_skills/code_doc/parsers/base.py",
      "line": 60,
      "language": "python",
      "docstring": "Represents a function or method in any language.",
      "bases": [],
      "methods": [
        "to_dict"
      ],
      "properties": [],
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "ParsedClass",
      "file": "src/claude_skills/claude_skills/code_doc/parsers/base.py",
      "line": 102,
      "language": "python",
      "docstring": "Represents a class, struct, or interface in any language.",
      "bases": [],
      "methods": [
        "to_dict"
      ],
      "properties": [],
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "ParsedModule",
      "file": "src/claude_skills/claude_skills/code_doc/parsers/base.py",
      "line": 134,
      "language": "python",
      "docstring": "Represents a module, file, or compilation unit.",
      "bases": [],
      "methods": [
        "to_dict"
      ],
      "properties": [],
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "ParseResult",
      "file": "src/claude_skills/claude_skills/code_doc/parsers/base.py",
      "line": 164,
      "language": "python",
      "docstring": "Result of parsing a file or codebase.",
      "bases": [],
      "methods": [
        "to_dict",
        "merge"
      ],
      "properties": [],
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "BaseParser",
      "file": "src/claude_skills/claude_skills/code_doc/parsers/base.py",
      "line": 196,
      "language": "python",
      "docstring": "Abstract base class for language-specific parsers.\n\nAll language parsers must inherit from this class and implement\nthe required abstract methods.",
      "bases": [
        "ABC"
      ],
      "methods": [
        "__init__",
        "parse_file",
        "find_files",
        "parse_all",
        "_should_exclude",
        "_get_relative_path"
      ],
      "properties": [
        "language",
        "file_extensions"
      ],
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "CSSParser",
      "file": "src/claude_skills/claude_skills/code_doc/parsers/css.py",
      "line": 38,
      "language": "python",
      "docstring": "Parser for CSS files using tree-sitter.",
      "bases": [
        "BaseParser"
      ],
      "methods": [
        "__init__",
        "parse_file",
        "_extract_css_structure",
        "_count_selectors",
        "_extract_at_rule_name",
        "_get_node_text"
      ],
      "properties": [
        "language",
        "file_extensions"
      ],
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "ParserFactory",
      "file": "src/claude_skills/claude_skills/code_doc/parsers/factory.py",
      "line": 15,
      "language": "python",
      "docstring": "Factory for creating and managing language-specific parsers.\n\nAutomatically detects languages in a project and coordinates\nparsing across multiple languages.",
      "bases": [],
      "methods": [
        "__init__",
        "register_parser",
        "detect_languages",
        "get_parser",
        "parse_all",
        "parse_file",
        "get_language_statistics",
        "_should_exclude",
        "_print_summary"
      ],
      "properties": [],
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "GoParser",
      "file": "src/claude_skills/claude_skills/code_doc/parsers/go.py",
      "line": 40,
      "language": "python",
      "docstring": "Parser for Go files using tree-sitter.",
      "bases": [
        "BaseParser"
      ],
      "methods": [
        "__init__",
        "parse_file",
        "_extract_package_name",
        "_extract_type_declaration",
        "_extract_struct",
        "_extract_interface",
        "_extract_function",
        "_extract_method",
        "_extract_imports",
        "_extract_import_path",
        "_estimate_complexity",
        "_get_node_text"
      ],
      "properties": [
        "language",
        "file_extensions"
      ],
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "HTMLParser",
      "file": "src/claude_skills/claude_skills/code_doc/parsers/html.py",
      "line": 38,
      "language": "python",
      "docstring": "Parser for HTML files using tree-sitter.",
      "bases": [
        "BaseParser"
      ],
      "methods": [
        "__init__",
        "parse_file",
        "_extract_html_structure",
        "_extract_attributes",
        "_get_node_text"
      ],
      "properties": [
        "language",
        "file_extensions"
      ],
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "JavaScriptParser",
      "file": "src/claude_skills/claude_skills/code_doc/parsers/javascript.py",
      "line": 41,
      "language": "python",
      "docstring": "Parser for JavaScript and TypeScript files using tree-sitter.",
      "bases": [
        "BaseParser"
      ],
      "methods": [
        "__init__",
        "parse_file",
        "_extract_class",
        "_extract_function",
        "_extract_variable_functions",
        "_extract_imports",
        "_extract_exports",
        "_is_exported",
        "_estimate_complexity",
        "_get_node_text"
      ],
      "properties": [
        "language",
        "file_extensions"
      ],
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "PythonParser",
      "file": "src/claude_skills/claude_skills/code_doc/parsers/python.py",
      "line": 25,
      "language": "python",
      "docstring": "Parser for Python source files using AST analysis.",
      "bases": [
        "BaseParser"
      ],
      "methods": [
        "parse_file",
        "_extract_class",
        "_extract_function",
        "_extract_imports",
        "_get_name"
      ],
      "properties": [
        "language",
        "file_extensions"
      ],
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "DependencyAnalysis",
      "file": "src/claude_skills/claude_skills/common/dependency_analysis.py",
      "line": 8,
      "language": "python",
      "docstring": "Structured dependency diagnostics used by sdd-validate.",
      "bases": [],
      "methods": [],
      "properties": [],
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "PrettyPrinter",
      "file": "src/claude_skills/claude_skills/common/printer.py",
      "line": 8,
      "language": "python",
      "docstring": "Utility for consistent, pretty console output optimized for Claude Code.",
      "bases": [],
      "methods": [
        "__init__",
        "_colorize",
        "action",
        "success",
        "info",
        "warning",
        "error",
        "header",
        "detail",
        "result",
        "blank",
        "item"
      ],
      "properties": [],
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "EnhancedError",
      "file": "src/claude_skills/claude_skills/common/validation.py",
      "line": 12,
      "language": "python",
      "docstring": "Enhanced error message with detailed location and fix information",
      "bases": [],
      "methods": [
        "__str__"
      ],
      "properties": [],
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "SpecValidationResult",
      "file": "src/claude_skills/claude_skills/common/validation.py",
      "line": 56,
      "language": "python",
      "docstring": "Results of spec document validation",
      "bases": [],
      "methods": [
        "count_all_issues",
        "is_valid",
        "calculate_completion"
      ],
      "properties": [],
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "JsonSpecValidationResult",
      "file": "src/claude_skills/claude_skills/common/validation.py",
      "line": 130,
      "language": "python",
      "docstring": "Results of JSON spec file validation",
      "bases": [],
      "methods": [
        "count_all_issues",
        "is_valid"
      ],
      "properties": [],
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "QueryResult",
      "file": "src/claude_skills/claude_skills/doc_query/doc_query_lib.py",
      "line": 18,
      "language": "python",
      "docstring": "Represents a query result with metadata.",
      "bases": [],
      "methods": [],
      "properties": [],
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "DocumentationQuery",
      "file": "src/claude_skills/claude_skills/doc_query/doc_query_lib.py",
      "line": 26,
      "language": "python",
      "docstring": "Main class for querying codebase documentation.",
      "bases": [],
      "methods": [
        "__init__",
        "_resolve_docs_path",
        "_find_documentation_dir",
        "load",
        "_normalize_data",
        "_reindex",
        "_assemble_module_entry",
        "_compute_module_complexity",
        "_get_docstring_excerpt",
        "_resolve_module_key",
        "_copy_module_info",
        "_ensure_loaded",
        "find_class",
        "find_function",
        "find_module",
        "_get_module_info",
        "get_high_complexity",
        "get_dependencies",
        "search_entities",
        "get_context_for_area",
        "describe_module",
        "get_stats",
        "list_classes",
        "list_functions",
        "list_modules"
      ],
      "properties": [],
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "SDDContextGatherer",
      "file": "src/claude_skills/claude_skills/doc_query/sdd_integration.py",
      "line": 16,
      "language": "python",
      "docstring": "Helper class for gathering context for SDD tasks.",
      "bases": [],
      "methods": [
        "__init__",
        "get_task_context",
        "suggest_files_for_task",
        "find_similar_implementations",
        "get_test_context",
        "get_refactoring_candidates",
        "get_impact_analysis",
        "_extract_keywords",
        "_deduplicate_results"
      ],
      "properties": [],
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "ConsultationResponse",
      "file": "src/claude_skills/claude_skills/run_tests/consultation.py",
      "line": 679,
      "language": "python",
      "docstring": "Represents a response from a tool consultation.",
      "bases": [
        "NamedTuple"
      ],
      "methods": [],
      "properties": [],
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "FieldChange",
      "file": "src/claude_skills/claude_skills/sdd_validate/diff.py",
      "line": 12,
      "language": "python",
      "docstring": "Represents a single field change.",
      "bases": [],
      "methods": [],
      "properties": [],
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "DiffReport",
      "file": "src/claude_skills/claude_skills/sdd_validate/diff.py",
      "line": 22,
      "language": "python",
      "docstring": "Complete diff report between before and after states.",
      "bases": [],
      "methods": [],
      "properties": [],
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "FixAction",
      "file": "src/claude_skills/claude_skills/sdd_validate/fix.py",
      "line": 29,
      "language": "python",
      "docstring": "Represents a candidate auto-fix operation.",
      "bases": [],
      "methods": [],
      "properties": [],
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "FixReport",
      "file": "src/claude_skills/claude_skills/sdd_validate/fix.py",
      "line": 42,
      "language": "python",
      "docstring": "Outcome of applying a set of fix actions.",
      "bases": [],
      "methods": [],
      "properties": [],
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "NormalizedValidationResult",
      "file": "src/claude_skills/claude_skills/sdd_validate/formatting.py",
      "line": 12,
      "language": "python",
      "docstring": "Aggregated validation statistics derived from a raw validation result.",
      "bases": [],
      "methods": [],
      "properties": [
        "auto_fixable_total",
        "has_errors",
        "has_warnings"
      ],
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "SpecStatistics",
      "file": "src/claude_skills/claude_skills/sdd_validate/stats.py",
      "line": 13,
      "language": "python",
      "docstring": "Calculated statistics for a spec file.",
      "bases": [],
      "methods": [],
      "properties": [],
      "is_exported": false,
      "is_public": true
    }
  ],
  "functions": [
    {
      "name": "extract_commands_from_file",
      "file": "scripts/extract_sdd_commands.py",
      "line": 27,
      "language": "python",
      "docstring": "Extract all sdd commands from a SKILL.md file.\n\nArgs:\n    file_path: Path to SKILL.md file\n\nReturns:\n    List of extracted commands",
      "parameters": [
        {
          "name": "file_path",
          "type": "Path",
          "default": null
        }
      ],
      "return_type": "List[Command]",
      "complexity": 4,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "extract_all_commands",
      "file": "scripts/extract_sdd_commands.py",
      "line": 67,
      "language": "python",
      "docstring": "Extract commands from all SKILL.md files.\n\nArgs:\n    skills_dir: Path to skills directory\n\nReturns:\n    Dictionary mapping file paths to lists of commands",
      "parameters": [
        {
          "name": "skills_dir",
          "type": "Path",
          "default": null
        }
      ],
      "return_type": "Dict[Path, List[Command]]",
      "complexity": 3,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "get_unique_commands",
      "file": "scripts/extract_sdd_commands.py",
      "line": 87,
      "language": "python",
      "docstring": "Get sorted list of unique command patterns.\n\nArgs:\n    commands_by_file: Commands grouped by file\n\nReturns:\n    Sorted list of unique command strings",
      "parameters": [
        {
          "name": "commands_by_file",
          "type": "Dict[Path, List[Command]]",
          "default": null
        }
      ],
      "return_type": "List[str]",
      "complexity": 3,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "print_by_file",
      "file": "scripts/extract_sdd_commands.py",
      "line": 103,
      "language": "python",
      "docstring": "Print commands grouped by file.\n\nArgs:\n    commands_by_file: Commands grouped by file",
      "parameters": [
        {
          "name": "commands_by_file",
          "type": "Dict[Path, List[Command]]",
          "default": null
        }
      ],
      "return_type": null,
      "complexity": 3,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "print_unique",
      "file": "scripts/extract_sdd_commands.py",
      "line": 124,
      "language": "python",
      "docstring": "Print unique commands.\n\nArgs:\n    commands_by_file: Commands grouped by file",
      "parameters": [
        {
          "name": "commands_by_file",
          "type": "Dict[Path, List[Command]]",
          "default": null
        }
      ],
      "return_type": null,
      "complexity": 2,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "print_grouped",
      "file": "scripts/extract_sdd_commands.py",
      "line": 139,
      "language": "python",
      "docstring": "Print commands grouped by command pattern.\n\nArgs:\n    commands_by_file: Commands grouped by file",
      "parameters": [
        {
          "name": "commands_by_file",
          "type": "Dict[Path, List[Command]]",
          "default": null
        }
      ],
      "return_type": null,
      "complexity": 5,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "print_json_output",
      "file": "scripts/extract_sdd_commands.py",
      "line": 163,
      "language": "python",
      "docstring": "Print commands in JSON format.\n\nArgs:\n    commands_by_file: Commands grouped by file",
      "parameters": [
        {
          "name": "commands_by_file",
          "type": "Dict[Path, List[Command]]",
          "default": null
        }
      ],
      "return_type": null,
      "complexity": 2,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "main",
      "file": "scripts/extract_sdd_commands.py",
      "line": 194,
      "language": "python",
      "docstring": "Main entry point.",
      "parameters": [],
      "return_type": null,
      "complexity": 8,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "build_registry",
      "file": "scripts/validate_sdd_commands.py",
      "line": 238,
      "language": "python",
      "docstring": "Build the command registry from sdd --help output.\n\nReturns:\n    CommandRegistry with all valid commands",
      "parameters": [],
      "return_type": "CommandRegistry",
      "complexity": 14,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "validate_commands",
      "file": "scripts/validate_sdd_commands.py",
      "line": 312,
      "language": "python",
      "docstring": "Validate all commands against the registry.\n\nArgs:\n    commands_by_file: Commands grouped by file\n    registry: Command registry\n\nReturns:\n    Validation results grouped by file",
      "parameters": [
        {
          "name": "commands_by_file",
          "type": "Dict[Path, List[Command]]",
          "default": null
        },
        {
          "name": "registry",
          "type": "CommandRegistry",
          "default": null
        }
      ],
      "return_type": "Dict[Path, List[ValidationResult]]",
      "complexity": 4,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "print_report",
      "file": "scripts/validate_sdd_commands.py",
      "line": 357,
      "language": "python",
      "docstring": "Print validation report.\n\nArgs:\n    results: Validation results grouped by file\n    verbose: Whether to print verbose output\n    json_output: Whether to output JSON",
      "parameters": [
        {
          "name": "results",
          "type": "Dict[Path, List[ValidationResult]]",
          "default": null
        },
        {
          "name": "verbose",
          "type": "bool",
          "default": null
        },
        {
          "name": "json_output",
          "type": "bool",
          "default": null
        }
      ],
      "return_type": null,
      "complexity": 14,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "main",
      "file": "scripts/validate_sdd_commands.py",
      "line": 451,
      "language": "python",
      "docstring": "Main entry point.",
      "parameters": [],
      "return_type": null,
      "complexity": 2,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "main",
      "file": "src/claude_skills/claude_skills/cli/sdd/__init__.py",
      "line": 16,
      "language": "python",
      "docstring": "Main entry point for unified SDD CLI.",
      "parameters": [],
      "return_type": null,
      "complexity": 4,
      "decorators": [
        "track_metrics('sdd')"
      ],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "create_global_parent_parser",
      "file": "src/claude_skills/claude_skills/cli/sdd/options.py",
      "line": 5,
      "language": "python",
      "docstring": "Create a parent parser with global options that can be inherited by subparsers.\n\nThis allows global options like --verbose, --debug, etc. to work universally\nacross all command levels, including nested subcommands.\n\nReturns:\n    ArgumentParser configured with global options and add_help=False",
      "parameters": [],
      "return_type": null,
      "complexity": 1,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "add_global_options",
      "file": "src/claude_skills/claude_skills/cli/sdd/options.py",
      "line": 20,
      "language": "python",
      "docstring": "Add global options available to all commands.",
      "parameters": [
        {
          "name": "parser",
          "type": null,
          "default": null
        }
      ],
      "return_type": null,
      "complexity": 1,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "add_spec_options",
      "file": "src/claude_skills/claude_skills/cli/sdd/options.py",
      "line": 65,
      "language": "python",
      "docstring": "Add common spec-related arguments.",
      "parameters": [
        {
          "name": "parser",
          "type": null,
          "default": null
        }
      ],
      "return_type": null,
      "complexity": 1,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "add_task_options",
      "file": "src/claude_skills/claude_skills/cli/sdd/options.py",
      "line": 73,
      "language": "python",
      "docstring": "Add common task-related arguments.",
      "parameters": [
        {
          "name": "parser",
          "type": null,
          "default": null
        }
      ],
      "return_type": null,
      "complexity": 1,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "register_all_subcommands",
      "file": "src/claude_skills/claude_skills/cli/sdd/registry.py",
      "line": 7,
      "language": "python",
      "docstring": "Register all subcommands from skill modules.\n\nUses lazy imports to avoid loading unnecessary modules and handles\noptional plugins gracefully (e.g., orchestration during Phase 1).\n\nArgs:\n    subparsers: ArgumentParser subparsers object\n    parent_parser: Parent parser with global options to inherit\n\nNote:\n    Handlers will receive printer when invoked, not during registration.\n    This allows printer to be configured after parsing global flags.",
      "parameters": [
        {
          "name": "subparsers",
          "type": null,
          "default": null
        },
        {
          "name": "parent_parser",
          "type": null,
          "default": null
        }
      ],
      "return_type": null,
      "complexity": 2,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "_register_doc_cli",
      "file": "src/claude_skills/claude_skills/cli/sdd/registry.py",
      "line": 52,
      "language": "python",
      "docstring": "Register the doc CLI as an SDD subcommand.",
      "parameters": [
        {
          "name": "subparsers",
          "type": null,
          "default": null
        },
        {
          "name": "parent_parser",
          "type": null,
          "default": null
        }
      ],
      "return_type": null,
      "complexity": 1,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": false
    },
    {
      "name": "_register_test_cli",
      "file": "src/claude_skills/claude_skills/cli/sdd/registry.py",
      "line": 72,
      "language": "python",
      "docstring": "Register the test CLI as an SDD subcommand.",
      "parameters": [
        {
          "name": "subparsers",
          "type": null,
          "default": null
        },
        {
          "name": "parent_parser",
          "type": null,
          "default": null
        }
      ],
      "return_type": null,
      "complexity": 1,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": false
    },
    {
      "name": "_register_skills_dev_cli",
      "file": "src/claude_skills/claude_skills/cli/sdd/registry.py",
      "line": 90,
      "language": "python",
      "docstring": "Register the skills-dev CLI as an SDD subcommand.",
      "parameters": [
        {
          "name": "subparsers",
          "type": null,
          "default": null
        },
        {
          "name": "parent_parser",
          "type": null,
          "default": null
        }
      ],
      "return_type": null,
      "complexity": 1,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": false
    },
    {
      "name": "_run_legacy_main",
      "file": "src/claude_skills/claude_skills/cli/skills_dev/registry.py",
      "line": 45,
      "language": "python",
      "docstring": "Execute a legacy CLI module's main() while preserving sys.argv.",
      "parameters": [
        {
          "name": "module_name",
          "type": "str",
          "default": null
        },
        {
          "name": "argv",
          "type": "Sequence[str]",
          "default": null
        },
        {
          "name": "printer",
          "type": "PrettyPrinter",
          "default": null
        }
      ],
      "return_type": "int",
      "complexity": 6,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": false
    },
    {
      "name": "_configure_passthrough",
      "file": "src/claude_skills/claude_skills/cli/skills_dev/registry.py",
      "line": 73,
      "language": "python",
      "docstring": null,
      "parameters": [
        {
          "name": "parser",
          "type": "argparse.ArgumentParser",
          "default": null
        }
      ],
      "return_type": "None",
      "complexity": 1,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": false
    },
    {
      "name": "_make_wrapper",
      "file": "src/claude_skills/claude_skills/cli/skills_dev/registry.py",
      "line": 81,
      "language": "python",
      "docstring": null,
      "parameters": [
        {
          "name": "cmd",
          "type": "LegacyCommand",
          "default": null
        }
      ],
      "return_type": null,
      "complexity": 4,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": false
    },
    {
      "name": "register_all_subcommands",
      "file": "src/claude_skills/claude_skills/cli/skills_dev/registry.py",
      "line": 101,
      "language": "python",
      "docstring": "Register all skills-dev subcommands.",
      "parameters": [
        {
          "name": "subparsers",
          "type": "Any",
          "default": null
        },
        {
          "name": "parent_parser",
          "type": "argparse.ArgumentParser",
          "default": null
        }
      ],
      "return_type": "None",
      "complexity": 4,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "_show_migration_info",
      "file": "src/claude_skills/claude_skills/cli/skills_dev/registry.py",
      "line": 123,
      "language": "python",
      "docstring": null,
      "parameters": [
        {
          "name": "args",
          "type": "argparse.Namespace",
          "default": null
        },
        {
          "name": "printer",
          "type": "PrettyPrinter",
          "default": null
        }
      ],
      "return_type": "int",
      "complexity": 2,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": false
    },
    {
      "name": "get_available_tools",
      "file": "src/claude_skills/claude_skills/code_doc/ai_consultation.py",
      "line": 49,
      "language": "python",
      "docstring": "Check which AI CLI tools are available.\n\nReturns:\n    List of available tool names",
      "parameters": [],
      "return_type": "List[str]",
      "complexity": 5,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "get_best_tool",
      "file": "src/claude_skills/claude_skills/code_doc/ai_consultation.py",
      "line": 74,
      "language": "python",
      "docstring": "Get the best available tool for a documentation type.\n\nArgs:\n    doc_type: Type of documentation (architecture, ai_context, developer_guide)\n    available_tools: List of available tools (auto-detected if None)\n\nReturns:\n    Tool name or None if no tools available",
      "parameters": [
        {
          "name": "doc_type",
          "type": "str",
          "default": null
        },
        {
          "name": "available_tools",
          "type": "Optional[List[str]]",
          "default": null
        }
      ],
      "return_type": "Optional[str]",
      "complexity": 6,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "format_architecture_research_prompt",
      "file": "src/claude_skills/claude_skills/code_doc/ai_consultation.py",
      "line": 104,
      "language": "python",
      "docstring": "Format prompt for architecture research (read-only analysis).\n\nArgs:\n    context_summary: Structured codebase context summary\n    key_files: List of key file paths to read\n    project_root: Project root directory\n\nReturns:\n    Formatted prompt string asking for research findings only",
      "parameters": [
        {
          "name": "context_summary",
          "type": "str",
          "default": null
        },
        {
          "name": "key_files",
          "type": "List[str]",
          "default": null
        },
        {
          "name": "project_root",
          "type": "Path",
          "default": null
        }
      ],
      "return_type": "str",
      "complexity": 3,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "format_ai_context_research_prompt",
      "file": "src/claude_skills/claude_skills/code_doc/ai_consultation.py",
      "line": 190,
      "language": "python",
      "docstring": "Format prompt for AI context research (read-only analysis).\n\nArgs:\n    context_summary: Structured codebase context summary\n    key_files: List of key file paths\n    project_root: Project root directory\n\nReturns:\n    Formatted prompt string asking for research findings only",
      "parameters": [
        {
          "name": "context_summary",
          "type": "str",
          "default": null
        },
        {
          "name": "key_files",
          "type": "List[str]",
          "default": null
        },
        {
          "name": "project_root",
          "type": "Path",
          "default": null
        }
      ],
      "return_type": "str",
      "complexity": 2,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "compose_architecture_doc",
      "file": "src/claude_skills/claude_skills/code_doc/ai_consultation.py",
      "line": 271,
      "language": "python",
      "docstring": "Compose ARCHITECTURE.md from research findings.\n\nArgs:\n    research_findings: Raw research output from AI consultation\n    project_name: Project name for header\n    version: Project version\n\nReturns:\n    Formatted ARCHITECTURE.md content",
      "parameters": [
        {
          "name": "research_findings",
          "type": "str",
          "default": null
        },
        {
          "name": "project_name",
          "type": "str",
          "default": null
        },
        {
          "name": "version",
          "type": "str",
          "default": null
        }
      ],
      "return_type": "str",
      "complexity": 1,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "compose_ai_context_doc",
      "file": "src/claude_skills/claude_skills/code_doc/ai_consultation.py",
      "line": 323,
      "language": "python",
      "docstring": "Compose AI_CONTEXT.md from research findings.\n\nArgs:\n    research_findings: Raw research output from AI consultation\n    project_name: Project name for header\n    version: Project version\n\nReturns:\n    Formatted AI_CONTEXT.md content",
      "parameters": [
        {
          "name": "research_findings",
          "type": "str",
          "default": null
        },
        {
          "name": "project_name",
          "type": "str",
          "default": null
        },
        {
          "name": "version",
          "type": "str",
          "default": null
        }
      ],
      "return_type": "str",
      "complexity": 1,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "run_consultation",
      "file": "src/claude_skills/claude_skills/code_doc/ai_consultation.py",
      "line": 374,
      "language": "python",
      "docstring": "Run consultation with an AI tool.\n\nArgs:\n    tool: Tool name (cursor-agent, gemini, codex)\n    prompt: Formatted prompt\n    dry_run: If True, show command without running\n    verbose: Enable verbose output\n    printer: Optional PrettyPrinter for consistent output (falls back to print if None)\n\nReturns:\n    Tuple of (success: bool, output: str)",
      "parameters": [
        {
          "name": "tool",
          "type": "str",
          "default": null
        },
        {
          "name": "prompt",
          "type": "str",
          "default": null
        },
        {
          "name": "dry_run",
          "type": "bool",
          "default": null
        },
        {
          "name": "verbose",
          "type": "bool",
          "default": null
        },
        {
          "name": "printer",
          "type": "Optional['PrettyPrinter']",
          "default": null
        }
      ],
      "return_type": "Tuple[bool, str]",
      "complexity": 14,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "consult_multi_agent",
      "file": "src/claude_skills/claude_skills/code_doc/ai_consultation.py",
      "line": 453,
      "language": "python",
      "docstring": "Consult multiple AI tools in parallel and synthesize responses.\n\nArgs:\n    doc_type: Documentation type (architecture, ai_context)\n    prompt: Formatted prompt\n    pair: Which multi-agent pair to use\n    dry_run: If True, show what would run\n    verbose: Enable verbose output\n    printer: Optional PrettyPrinter for consistent output (falls back to print if None)\n\nReturns:\n    Dictionary with synthesis results",
      "parameters": [
        {
          "name": "doc_type",
          "type": "str",
          "default": null
        },
        {
          "name": "prompt",
          "type": "str",
          "default": null
        },
        {
          "name": "pair",
          "type": "str",
          "default": null
        },
        {
          "name": "dry_run",
          "type": "bool",
          "default": null
        },
        {
          "name": "verbose",
          "type": "bool",
          "default": null
        },
        {
          "name": "printer",
          "type": "Optional['PrettyPrinter']",
          "default": null
        }
      ],
      "return_type": "Dict[str, any]",
      "complexity": 18,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "_run_tool_capture",
      "file": "src/claude_skills/claude_skills/code_doc/ai_consultation.py",
      "line": 608,
      "language": "python",
      "docstring": "Run tool and capture output (internal helper for parallel execution).\n\nReturns:\n    Tuple of (success, output, duration)",
      "parameters": [
        {
          "name": "tool",
          "type": "str",
          "default": null
        },
        {
          "name": "prompt",
          "type": "str",
          "default": null
        }
      ],
      "return_type": "Tuple[bool, str, float]",
      "complexity": 1,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": false
    },
    {
      "name": "generate_architecture_docs",
      "file": "src/claude_skills/claude_skills/code_doc/ai_consultation.py",
      "line": 621,
      "language": "python",
      "docstring": "Get architecture research findings from AI consultation.\n\nArgs:\n    context_summary: Codebase context summary\n    key_files: List of key files\n    project_root: Project root directory\n    tool: Specific tool to use (\"auto\" for auto-selection)\n    use_multi_agent: Use multiple agents if available\n    dry_run: Show what would run without running\n    verbose: Enable verbose output\n    printer: Optional PrettyPrinter for consistent output\n\nReturns:\n    Tuple of (success: bool, research_findings: str)",
      "parameters": [
        {
          "name": "context_summary",
          "type": "str",
          "default": null
        },
        {
          "name": "key_files",
          "type": "List[str]",
          "default": null
        },
        {
          "name": "project_root",
          "type": "Path",
          "default": null
        },
        {
          "name": "tool",
          "type": "str",
          "default": null
        },
        {
          "name": "use_multi_agent",
          "type": "bool",
          "default": null
        },
        {
          "name": "dry_run",
          "type": "bool",
          "default": null
        },
        {
          "name": "verbose",
          "type": "bool",
          "default": null
        },
        {
          "name": "printer",
          "type": "Optional['PrettyPrinter']",
          "default": null
        }
      ],
      "return_type": "Tuple[bool, str]",
      "complexity": 4,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "generate_ai_context_docs",
      "file": "src/claude_skills/claude_skills/code_doc/ai_consultation.py",
      "line": 661,
      "language": "python",
      "docstring": "Get AI context research findings from AI consultation.\n\nArgs:\n    context_summary: Codebase context summary\n    key_files: List of key files\n    project_root: Project root directory\n    tool: Specific tool to use (\"auto\" for auto-selection)\n    use_multi_agent: Use multiple agents if available\n    dry_run: Show what would run without running\n    verbose: Enable verbose output\n    printer: Optional PrettyPrinter for consistent output\n\nReturns:\n    Tuple of (success: bool, research_findings: str)",
      "parameters": [
        {
          "name": "context_summary",
          "type": "str",
          "default": null
        },
        {
          "name": "key_files",
          "type": "List[str]",
          "default": null
        },
        {
          "name": "project_root",
          "type": "Path",
          "default": null
        },
        {
          "name": "tool",
          "type": "str",
          "default": null
        },
        {
          "name": "use_multi_agent",
          "type": "bool",
          "default": null
        },
        {
          "name": "dry_run",
          "type": "bool",
          "default": null
        },
        {
          "name": "verbose",
          "type": "bool",
          "default": null
        },
        {
          "name": "printer",
          "type": "Optional['PrettyPrinter']",
          "default": null
        }
      ],
      "return_type": "Tuple[bool, str]",
      "complexity": 4,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "calculate_complexity",
      "file": "src/claude_skills/claude_skills/code_doc/calculator.py",
      "line": 12,
      "language": "python",
      "docstring": "Calculate cyclomatic complexity for a function.\n\nArgs:\n    node: AST node representing a function\n\nReturns:\n    Cyclomatic complexity score",
      "parameters": [
        {
          "name": "node",
          "type": "ast.FunctionDef",
          "default": null
        }
      ],
      "return_type": "int",
      "complexity": 4,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "calculate_statistics",
      "file": "src/claude_skills/claude_skills/code_doc/calculator.py",
      "line": 31,
      "language": "python",
      "docstring": "Calculate project-wide statistics with multi-language support.\n\nArgs:\n    modules: List of module information dictionaries\n    functions: List of function information dictionaries\n\nReturns:\n    Dictionary of calculated statistics including per-language breakdowns",
      "parameters": [
        {
          "name": "modules",
          "type": "List[Dict]",
          "default": null
        },
        {
          "name": "functions",
          "type": "List[Dict]",
          "default": null
        }
      ],
      "return_type": "Dict[str, Any]",
      "complexity": 1,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "calculate_language_statistics",
      "file": "src/claude_skills/claude_skills/code_doc/calculator.py",
      "line": 66,
      "language": "python",
      "docstring": "Calculate statistics broken down by programming language.\n\nArgs:\n    modules: List of module information dictionaries\n    functions: List of function information dictionaries\n\nReturns:\n    Dictionary mapping language to its statistics",
      "parameters": [
        {
          "name": "modules",
          "type": "List[Dict]",
          "default": null
        },
        {
          "name": "functions",
          "type": "List[Dict]",
          "default": null
        }
      ],
      "return_type": "Dict[str, Dict]",
      "complexity": 5,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "analyze_code_quality",
      "file": "src/claude_skills/claude_skills/code_doc/calculator.py",
      "line": 108,
      "language": "python",
      "docstring": "Analyze code quality based on calculated statistics.\n\nArgs:\n    statistics: Dictionary of code statistics\n\nReturns:\n    Dictionary with quality assessment",
      "parameters": [
        {
          "name": "statistics",
          "type": "Dict[str, Any]",
          "default": null
        }
      ],
      "return_type": "Dict[str, str]",
      "complexity": 5,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "_dump_json",
      "file": "src/claude_skills/claude_skills/code_doc/cli.py",
      "line": 82,
      "language": "python",
      "docstring": null,
      "parameters": [
        {
          "name": "payload",
          "type": "object",
          "default": null
        }
      ],
      "return_type": "None",
      "complexity": 1,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": false
    },
    {
      "name": "_print_if_json",
      "file": "src/claude_skills/claude_skills/code_doc/cli.py",
      "line": 87,
      "language": "python",
      "docstring": null,
      "parameters": [
        {
          "name": "args",
          "type": "argparse.Namespace",
          "default": null
        },
        {
          "name": "payload",
          "type": "object",
          "default": null
        },
        {
          "name": "printer",
          "type": "PrettyPrinter",
          "default": null
        }
      ],
      "return_type": "bool",
      "complexity": 2,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": false
    },
    {
      "name": "_exclude_patterns",
      "file": "src/claude_skills/claude_skills/code_doc/cli.py",
      "line": 94,
      "language": "python",
      "docstring": null,
      "parameters": [
        {
          "name": "extra",
          "type": "Optional[Iterable[str]]",
          "default": null
        }
      ],
      "return_type": "list[str]",
      "complexity": 2,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": false
    },
    {
      "name": "_handle_error",
      "file": "src/claude_skills/claude_skills/code_doc/cli.py",
      "line": 98,
      "language": "python",
      "docstring": null,
      "parameters": [
        {
          "name": "args",
          "type": "argparse.Namespace",
          "default": null
        },
        {
          "name": "printer",
          "type": "PrettyPrinter",
          "default": null
        },
        {
          "name": "exc",
          "type": "Exception",
          "default": null
        }
      ],
      "return_type": "int",
      "complexity": 3,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": false
    },
    {
      "name": "cmd_generate",
      "file": "src/claude_skills/claude_skills/code_doc/cli.py",
      "line": 108,
      "language": "python",
      "docstring": null,
      "parameters": [
        {
          "name": "args",
          "type": "argparse.Namespace",
          "default": null
        },
        {
          "name": "printer",
          "type": "PrettyPrinter",
          "default": null
        }
      ],
      "return_type": "int",
      "complexity": 9,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "cmd_validate",
      "file": "src/claude_skills/claude_skills/code_doc/cli.py",
      "line": 163,
      "language": "python",
      "docstring": null,
      "parameters": [
        {
          "name": "args",
          "type": "argparse.Namespace",
          "default": null
        },
        {
          "name": "printer",
          "type": "PrettyPrinter",
          "default": null
        }
      ],
      "return_type": "int",
      "complexity": 12,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "cmd_analyze",
      "file": "src/claude_skills/claude_skills/code_doc/cli.py",
      "line": 215,
      "language": "python",
      "docstring": null,
      "parameters": [
        {
          "name": "args",
          "type": "argparse.Namespace",
          "default": null
        },
        {
          "name": "printer",
          "type": "PrettyPrinter",
          "default": null
        }
      ],
      "return_type": "int",
      "complexity": 10,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "cmd_analyze_with_ai",
      "file": "src/claude_skills/claude_skills/code_doc/cli.py",
      "line": 272,
      "language": "python",
      "docstring": null,
      "parameters": [
        {
          "name": "args",
          "type": "argparse.Namespace",
          "default": null
        },
        {
          "name": "printer",
          "type": "PrettyPrinter",
          "default": null
        }
      ],
      "return_type": "int",
      "complexity": 21,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "register_code_doc",
      "file": "src/claude_skills/claude_skills/code_doc/cli.py",
      "line": 435,
      "language": "python",
      "docstring": "Register documentation commands for the unified CLI.",
      "parameters": [
        {
          "name": "subparsers",
          "type": "argparse._SubParsersAction",
          "default": null
        },
        {
          "name": "parent_parser",
          "type": "argparse.ArgumentParser",
          "default": null
        }
      ],
      "return_type": "None",
      "complexity": 1,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "_should_exclude_path",
      "file": "src/claude_skills/claude_skills/code_doc/detectors.py",
      "line": 14,
      "language": "python",
      "docstring": "Check if a file path should be excluded based on patterns.\n\nUses path component matching to avoid false positives.\nFor example, '.git' will match '.git/' but not '.github/'.\n\nArgs:\n    file_path: Path to check\n    exclude_patterns: List of patterns to exclude\n\nReturns:\n    True if file should be excluded",
      "parameters": [
        {
          "name": "file_path",
          "type": "Path",
          "default": null
        },
        {
          "name": "exclude_patterns",
          "type": "List[str]",
          "default": null
        }
      ],
      "return_type": "bool",
      "complexity": 8,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": false
    },
    {
      "name": "detect_languages",
      "file": "src/claude_skills/claude_skills/code_doc/detectors.py",
      "line": 52,
      "language": "python",
      "docstring": "Detect programming languages present in a project.\n\nArgs:\n    project_root: Root directory of the project\n    exclude_patterns: Optional list of patterns to exclude from scanning\n\nReturns:\n    Set of detected language names",
      "parameters": [
        {
          "name": "project_root",
          "type": "Path",
          "default": null
        },
        {
          "name": "exclude_patterns",
          "type": "Optional[List[str]]",
          "default": null
        }
      ],
      "return_type": "Set[str]",
      "complexity": 7,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "get_language_for_extension",
      "file": "src/claude_skills/claude_skills/code_doc/detectors.py",
      "line": 90,
      "language": "python",
      "docstring": "Get language name for a file extension.\n\nArgs:\n    extension: File extension (with or without dot)\n\nReturns:\n    Language name or 'unknown'",
      "parameters": [
        {
          "name": "extension",
          "type": "str",
          "default": null
        }
      ],
      "return_type": "str",
      "complexity": 1,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "detect_framework",
      "file": "src/claude_skills/claude_skills/code_doc/detectors.py",
      "line": 120,
      "language": "python",
      "docstring": "Detect web framework and other major libraries.\n\nArgs:\n    modules: List of module information from CodebaseAnalyzer\n\nReturns:\n    Dictionary with detected framework info",
      "parameters": [
        {
          "name": "modules",
          "type": "List[Dict[str, Any]]",
          "default": null
        }
      ],
      "return_type": "Dict[str, Any]",
      "complexity": 9,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "identify_key_files",
      "file": "src/claude_skills/claude_skills/code_doc/detectors.py",
      "line": 183,
      "language": "python",
      "docstring": "Identify key files that should be read for understanding the codebase.\n\nArgs:\n    modules: List of module information\n    project_root: Project root directory (optional)\n\nReturns:\n    List of file paths (relative) in suggested reading order",
      "parameters": [
        {
          "name": "modules",
          "type": "List[Dict[str, Any]]",
          "default": null
        },
        {
          "name": "project_root",
          "type": "Path",
          "default": null
        }
      ],
      "return_type": "List[str]",
      "complexity": 15,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "detect_layers",
      "file": "src/claude_skills/claude_skills/code_doc/detectors.py",
      "line": 256,
      "language": "python",
      "docstring": "Detect architectural layers by grouping modules.\n\nArgs:\n    modules: List of module information\n\nReturns:\n    Dictionary mapping layer names to file paths",
      "parameters": [
        {
          "name": "modules",
          "type": "List[Dict[str, Any]]",
          "default": null
        }
      ],
      "return_type": "Dict[str, List[str]]",
      "complexity": 10,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "suggest_reading_order",
      "file": "src/claude_skills/claude_skills/code_doc/detectors.py",
      "line": 310,
      "language": "python",
      "docstring": "Suggest optimal reading order for key files.\n\nArgs:\n    key_files: List of identified key files\n    framework_info: Framework detection result\n\nReturns:\n    Ordered list of files to read",
      "parameters": [
        {
          "name": "key_files",
          "type": "List[str]",
          "default": null
        },
        {
          "name": "framework_info",
          "type": "Dict[str, Any]",
          "default": null
        }
      ],
      "return_type": "List[str]",
      "complexity": 7,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "extract_readme",
      "file": "src/claude_skills/claude_skills/code_doc/detectors.py",
      "line": 359,
      "language": "python",
      "docstring": "Extract README content if it exists.\n\nArgs:\n    project_root: Project root directory\n\nReturns:\n    README content or None",
      "parameters": [
        {
          "name": "project_root",
          "type": "Path",
          "default": null
        }
      ],
      "return_type": "Optional[str]",
      "complexity": 4,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "create_context_summary",
      "file": "src/claude_skills/claude_skills/code_doc/detectors.py",
      "line": 381,
      "language": "python",
      "docstring": "Create a structured summary of codebase context for AI analysis.\n\nArgs:\n    framework_info: Framework detection result\n    key_files: Identified key files\n    layers: Layer grouping\n    statistics: Code statistics\n    readme_content: README content (optional)\n\nReturns:\n    Formatted context summary",
      "parameters": [
        {
          "name": "framework_info",
          "type": "Dict[str, Any]",
          "default": null
        },
        {
          "name": "key_files",
          "type": "List[str]",
          "default": null
        },
        {
          "name": "layers",
          "type": "Dict[str, List[str]]",
          "default": null
        },
        {
          "name": "statistics",
          "type": "Dict[str, Any]",
          "default": null
        },
        {
          "name": "readme_content",
          "type": "Optional[str]",
          "default": null
        }
      ],
      "return_type": "str",
      "complexity": 9,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "_auto_register_parsers",
      "file": "src/claude_skills/claude_skills/code_doc/parsers/factory.py",
      "line": 249,
      "language": "python",
      "docstring": "Auto-register all available parsers.\n\nThis function attempts to import and register all known parsers.\nIf a parser's dependencies aren't available, it's skipped silently.",
      "parameters": [
        {
          "name": "factory",
          "type": "ParserFactory",
          "default": null
        }
      ],
      "return_type": null,
      "complexity": 6,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": false
    },
    {
      "name": "create_parser_factory",
      "file": "src/claude_skills/claude_skills/code_doc/parsers/factory.py",
      "line": 288,
      "language": "python",
      "docstring": "Create a ParserFactory with all available parsers registered.\n\nArgs:\n    project_root: Root directory of project\n    exclude_patterns: Patterns to exclude\n    languages: Specific languages to parse\n\nReturns:\n    Configured ParserFactory instance",
      "parameters": [
        {
          "name": "project_root",
          "type": "Path",
          "default": null
        },
        {
          "name": "exclude_patterns",
          "type": "Optional[List[str]]",
          "default": null
        },
        {
          "name": "languages",
          "type": "Optional[List[Language]]",
          "default": null
        }
      ],
      "return_type": "ParserFactory",
      "complexity": 1,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "analyze_dependencies",
      "file": "src/claude_skills/claude_skills/common/dependency_analysis.py",
      "line": 21,
      "language": "python",
      "docstring": "Detect circular dependencies in JSON spec.\n\nPerforms comprehensive analysis of the dependency graph including:\n- Circular dependency chains\n- Orphaned tasks (references to non-existent dependencies)\n- Impossible chains (mutual blocking scenarios)\n\nArgs:\n    spec_data: JSON spec file data dictionary with 'hierarchy' key\n\nReturns:\n    Dictionary with analysis results:\n    - has_circular: bool - True if any circular dependencies found\n    - circular_chains: list - List of circular dependency chains\n    - orphaned_tasks: list - Tasks with missing dependencies\n    - impossible_chains: list - Tasks in deadlock situations\n\nExample:\n    >>> result = find_circular_dependencies(spec_data)\n    >>> if result['has_circular']:\n    ...     print(f\"Found {len(result['circular_chains'])} circular chains\")",
      "parameters": [
        {
          "name": "spec_data",
          "type": "Dict",
          "default": null
        }
      ],
      "return_type": "DependencyAnalysis",
      "complexity": 32,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "find_circular_dependencies",
      "file": "src/claude_skills/claude_skills/common/dependency_analysis.py",
      "line": 161,
      "language": "python",
      "docstring": "Backward-compatible wrapper returning legacy dependency analysis format.",
      "parameters": [
        {
          "name": "spec_data",
          "type": "Dict",
          "default": null
        }
      ],
      "return_type": "Dict[str, object]",
      "complexity": 1,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "find_circular_dependencies",
      "file": "src/claude_skills/claude_skills/common/dependency_analysis.py",
      "line": 176,
      "language": "python",
      "docstring": "Backward-compatible wrapper returning legacy dependency analysis format.",
      "parameters": [
        {
          "name": "spec_data",
          "type": "Dict",
          "default": null
        }
      ],
      "return_type": "Dict[str, object]",
      "complexity": 1,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "has_dependency_cycle",
      "file": "src/claude_skills/claude_skills/common/dependency_analysis.py",
      "line": 191,
      "language": "python",
      "docstring": "Check if a specific node is part of a circular dependency.\n\nArgs:\n    graph: Dependency graph mapping node IDs to their dependencies\n    node: Node ID to check\n\nReturns:\n    Tuple of (has_cycle: bool, cycle_path: List[str] or None)\n\nExample:\n    >>> graph = {\"task-1\": [\"task-2\"], \"task-2\": [\"task-1\"]}\n    >>> has_cycle, path = has_dependency_cycle(graph, \"task-1\")\n    >>> print(has_cycle)  # True\n    >>> print(path)  # [\"task-1\", \"task-2\", \"task-1\"]",
      "parameters": [
        {
          "name": "graph",
          "type": "Dict[str, List[str]]",
          "default": null
        },
        {
          "name": "node",
          "type": "str",
          "default": null
        }
      ],
      "return_type": "Tuple[bool, Optional[List[str]]]",
      "complexity": 6,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "validate_dependency_graph",
      "file": "src/claude_skills/claude_skills/common/dependency_analysis.py",
      "line": 233,
      "language": "python",
      "docstring": "Quick validation that dependency graph is valid.\n\nChecks for:\n- No circular dependencies\n- No orphaned dependencies\n- Valid dependency references\n\nArgs:\n    spec_data: JSON spec file data dictionary\n\nReturns:\n    Tuple of (is_valid: bool, error_messages: List[str])\n\nExample:\n    >>> valid, errors = validate_dependency_graph(spec_data)\n    >>> if not valid:\n    ...     for error in errors:\n    ...         print(f\"Error: {error}\")",
      "parameters": [
        {
          "name": "spec_data",
          "type": "Dict",
          "default": null
        }
      ],
      "return_type": "Tuple[bool, List[str]]",
      "complexity": 7,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "get_dependency_chain",
      "file": "src/claude_skills/claude_skills/common/dependency_analysis.py",
      "line": 283,
      "language": "python",
      "docstring": "Get the full dependency chain for a task.\n\nReturns list of task IDs that must be completed before the given task,\nin order from immediate dependencies to transitive dependencies.\n\nArgs:\n    spec_data: JSON spec file data dictionary\n    task_id: Task ID to analyze\n\nReturns:\n    List of task IDs in dependency order\n\nExample:\n    >>> chain = get_dependency_chain(spec_data, \"task-3-1\")\n    >>> print(chain)  # [\"task-1-1\", \"task-2-1\", \"task-3-1\"]",
      "parameters": [
        {
          "name": "spec_data",
          "type": "Dict",
          "default": null
        },
        {
          "name": "task_id",
          "type": "str",
          "default": null
        }
      ],
      "return_type": "List[str]",
      "complexity": 7,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "find_blocking_tasks",
      "file": "src/claude_skills/claude_skills/common/dependency_analysis.py",
      "line": 345,
      "language": "python",
      "docstring": "Find all tasks that are blocked by the given task.\n\nArgs:\n    spec_data: JSON spec file data dictionary\n    task_id: Task ID to analyze\n\nReturns:\n    List of task IDs that are blocked by this task\n\nExample:\n    >>> blocked = find_blocking_tasks(spec_data, \"task-1-1\")\n    >>> print(f\"{task_id} blocks {len(blocked)} tasks\")",
      "parameters": [
        {
          "name": "spec_data",
          "type": "Dict",
          "default": null
        },
        {
          "name": "task_id",
          "type": "str",
          "default": null
        }
      ],
      "return_type": "List[str]",
      "complexity": 5,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "check_doc_query_available",
      "file": "src/claude_skills/claude_skills/common/doc_helper.py",
      "line": 15,
      "language": "python",
      "docstring": "Check if doc-query documentation exists and is accessible.\n\nReturns:\n    dict: {\n        \"available\": bool,           # True if doc-query can be used\n        \"message\": str,              # Human-readable status message\n        \"stats\": dict | None,        # Stats from doc-query if available\n        \"location\": str | None       # Path to documentation\n    }\n\nExample:\n    >>> result = check_doc_query_available()\n    >>> if result[\"available\"]:\n    ...     print(f\"Documentation found at {result['location']}\")",
      "parameters": [],
      "return_type": "dict",
      "complexity": 12,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "check_sdd_integration_available",
      "file": "src/claude_skills/claude_skills/common/doc_helper.py",
      "line": 90,
      "language": "python",
      "docstring": "Check if sdd-integration command is available in PATH.\n\nReturns:\n    bool: True if sdd-integration command exists and is executable\n\nExample:\n    >>> if check_sdd_integration_available():\n    ...     context = get_task_context_from_docs(\"implement auth\")",
      "parameters": [],
      "return_type": "bool",
      "complexity": 1,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "get_task_context_from_docs",
      "file": "src/claude_skills/claude_skills/common/doc_helper.py",
      "line": 104,
      "language": "python",
      "docstring": "Get task-relevant context from codebase documentation.\n\nArgs:\n    task_description: Description of the task to find context for\n    project_root: Root directory of the project (default: current dir)\n\nReturns:\n    dict | None: {\n        \"files\": list[str],          # Suggested relevant files\n        \"dependencies\": list[str],   # Related dependencies\n        \"similar\": list[str],        # Similar implementations\n        \"complexity\": dict           # Complexity insights\n    } or None if unavailable\n\nExample:\n    >>> context = get_task_context_from_docs(\"implement JWT auth\")\n    >>> if context:\n    ...     print(f\"Check these files: {context['files']}\")",
      "parameters": [
        {
          "name": "task_description",
          "type": "str",
          "default": null
        },
        {
          "name": "project_root",
          "type": "str",
          "default": null
        }
      ],
      "return_type": "Optional[dict]",
      "complexity": 6,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "should_generate_docs",
      "file": "src/claude_skills/claude_skills/common/doc_helper.py",
      "line": 161,
      "language": "python",
      "docstring": "Check if documentation should be generated.\n\nArgs:\n    project_root: Root directory of the project\n    interactive: If True, may prompt user for decision\n\nReturns:\n    dict: {\n        \"should_generate\": bool,     # Recommendation\n        \"reason\": str,               # Explanation\n        \"available\": bool,           # Current doc availability\n        \"user_confirmed\": bool | None # User response (if interactive)\n    }\n\nExample:\n    >>> result = should_generate_docs()\n    >>> if result[\"should_generate\"] and result[\"user_confirmed\"]:\n    ...     # Run code-doc skill\n    ...     print(\"Generating documentation...\")",
      "parameters": [
        {
          "name": "project_root",
          "type": "str",
          "default": null
        },
        {
          "name": "interactive",
          "type": "bool",
          "default": null
        }
      ],
      "return_type": "dict",
      "complexity": 3,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "ensure_documentation_exists",
      "file": "src/claude_skills/claude_skills/common/doc_helper.py",
      "line": 210,
      "language": "python",
      "docstring": "Ensure codebase documentation exists, optionally generating it.\n\nThis is a high-level convenience function that combines:\n- check_doc_query_available() - Check if docs exist\n- should_generate_docs() - Determine if generation is needed\n- Skill(code-doc) invocation - Actually generate docs\n\nArgs:\n    project_root: Root directory (default: auto-detect)\n    prompt_user: If True, prompt user to generate missing docs\n    auto_generate: If True, auto-generate without prompting\n\nReturns:\n    tuple[bool, str]: (success, message)\n        - success: True if docs are available (existing or newly generated)\n        - message: Path to docs OR error/info message\n\nExample:\n    >>> # In sdd-plan Phase 1.2\n    >>> success, result = ensure_documentation_exists(prompt_user=True)\n    >>> if success:\n    ...     print(f\"Using docs at: {result}\")\n    ...     # Proceed with doc-query analysis\n    ... else:\n    ...     print(f\"No docs: {result}\")\n    ...     # Fall back to manual exploration",
      "parameters": [
        {
          "name": "project_root",
          "type": "Optional[str]",
          "default": null
        },
        {
          "name": "prompt_user",
          "type": "bool",
          "default": null
        },
        {
          "name": "auto_generate",
          "type": "bool",
          "default": null
        }
      ],
      "return_type": "tuple[bool, str]",
      "complexity": 13,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "_extract_location",
      "file": "src/claude_skills/claude_skills/common/hierarchy_validation.py",
      "line": 30,
      "language": "python",
      "docstring": "Attempt to extract a node identifier from a validation message.",
      "parameters": [
        {
          "name": "message",
          "type": "str",
          "default": null
        }
      ],
      "return_type": "Optional[str]",
      "complexity": 4,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": false
    },
    {
      "name": "_determine_severity",
      "file": "src/claude_skills/claude_skills/common/hierarchy_validation.py",
      "line": 40,
      "language": "python",
      "docstring": null,
      "parameters": [
        {
          "name": "message",
          "type": "str",
          "default": null
        },
        {
          "name": "severity_hint",
          "type": "str",
          "default": null
        }
      ],
      "return_type": "str",
      "complexity": 7,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": false
    },
    {
      "name": "_is_auto_fixable",
      "file": "src/claude_skills/claude_skills/common/hierarchy_validation.py",
      "line": 51,
      "language": "python",
      "docstring": null,
      "parameters": [
        {
          "name": "category",
          "type": "str",
          "default": null
        },
        {
          "name": "normalized_message",
          "type": "str",
          "default": null
        }
      ],
      "return_type": "bool",
      "complexity": 20,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": false
    },
    {
      "name": "_suggest_fix",
      "file": "src/claude_skills/claude_skills/common/hierarchy_validation.py",
      "line": 80,
      "language": "python",
      "docstring": null,
      "parameters": [
        {
          "name": "category",
          "type": "str",
          "default": null
        },
        {
          "name": "normalized_message",
          "type": "str",
          "default": null
        }
      ],
      "return_type": "Optional[str]",
      "complexity": 22,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": false
    },
    {
      "name": "_build_enhanced_errors",
      "file": "src/claude_skills/claude_skills/common/hierarchy_validation.py",
      "line": 118,
      "language": "python",
      "docstring": null,
      "parameters": [
        {
          "name": "messages",
          "type": "Iterable[str]",
          "default": null
        }
      ],
      "return_type": "List[EnhancedError]",
      "complexity": 4,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": false
    },
    {
      "name": "validate_structure",
      "file": "src/claude_skills/claude_skills/common/hierarchy_validation.py",
      "line": 148,
      "language": "python",
      "docstring": "Validate top-level JSON structure and required fields.\n\nArgs:\n    spec_data: JSON spec file data dictionary\n\nReturns:\n    Tuple of (is_valid, list_of_errors, list_of_warnings)",
      "parameters": [
        {
          "name": "spec_data",
          "type": "Dict",
          "default": null
        }
      ],
      "return_type": "Tuple[bool, List[str], List[str]]",
      "complexity": 16,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "validate_hierarchy",
      "file": "src/claude_skills/claude_skills/common/hierarchy_validation.py",
      "line": 206,
      "language": "python",
      "docstring": "Validate hierarchy integrity: parent/child references, no orphans, no cycles.\n\nArgs:\n    hierarchy: Hierarchy dictionary from JSON spec file\n\nReturns:\n    Tuple of (is_valid, list_of_errors, list_of_warnings)",
      "parameters": [
        {
          "name": "hierarchy",
          "type": "Dict",
          "default": null
        }
      ],
      "return_type": "Tuple[bool, List[str], List[str]]",
      "complexity": 22,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "validate_nodes",
      "file": "src/claude_skills/claude_skills/common/hierarchy_validation.py",
      "line": 305,
      "language": "python",
      "docstring": "Validate node structure and required fields for each node.\n\nArgs:\n    hierarchy: Hierarchy dictionary from JSON spec file\n\nReturns:\n    Tuple of (is_valid, list_of_errors, list_of_warnings)",
      "parameters": [
        {
          "name": "hierarchy",
          "type": "Dict",
          "default": null
        }
      ],
      "return_type": "Tuple[bool, List[str], List[str]]",
      "complexity": 15,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "validate_task_counts",
      "file": "src/claude_skills/claude_skills/common/hierarchy_validation.py",
      "line": 359,
      "language": "python",
      "docstring": "Validate task count accuracy and propagation up the hierarchy.\n\nArgs:\n    hierarchy: Hierarchy dictionary from JSON spec file\n\nReturns:\n    Tuple of (is_valid, list_of_errors, list_of_warnings)",
      "parameters": [
        {
          "name": "hierarchy",
          "type": "Dict",
          "default": null
        }
      ],
      "return_type": "Tuple[bool, List[str], List[str]]",
      "complexity": 12,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "validate_dependencies",
      "file": "src/claude_skills/claude_skills/common/hierarchy_validation.py",
      "line": 427,
      "language": "python",
      "docstring": "Validate dependency graph: references exist, no circular dependencies.\n\nArgs:\n    hierarchy: Hierarchy dictionary from JSON spec file\n\nReturns:\n    Tuple of (is_valid, list_of_errors, list_of_warnings)",
      "parameters": [
        {
          "name": "hierarchy",
          "type": "Dict",
          "default": null
        }
      ],
      "return_type": "Tuple[bool, List[str], List[str]]",
      "complexity": 29,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "validate_metadata",
      "file": "src/claude_skills/claude_skills/common/hierarchy_validation.py",
      "line": 540,
      "language": "python",
      "docstring": "Validate type-specific metadata requirements.\n\nArgs:\n    hierarchy: Hierarchy dictionary from JSON spec file\n\nReturns:\n    Tuple of (is_valid, list_of_errors, list_of_warnings)",
      "parameters": [
        {
          "name": "hierarchy",
          "type": "Dict",
          "default": null
        }
      ],
      "return_type": "Tuple[bool, List[str], List[str]]",
      "complexity": 10,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "validate_spec_hierarchy",
      "file": "src/claude_skills/claude_skills/common/hierarchy_validation.py",
      "line": 587,
      "language": "python",
      "docstring": "Validate JSON spec file hierarchy with all checks.\n\nArgs:\n    spec_data: JSON spec file data dictionary\n\nReturns:\n    JsonSpecValidationResult with all validation findings",
      "parameters": [
        {
          "name": "spec_data",
          "type": "Dict",
          "default": null
        }
      ],
      "return_type": "JsonSpecValidationResult",
      "complexity": 3,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "validate_spec_before_proceed",
      "file": "src/claude_skills/claude_skills/common/integrations.py",
      "line": 18,
      "language": "python",
      "docstring": "Validate spec file before proceeding with task operations.\n\nArgs:\n    spec_path: Path to spec JSON file\n    quiet: If True, suppress verbose output\n\nReturns:\n    dict: {\n        \"valid\": bool,               # Overall validation result\n        \"errors\": list[dict],        # Critical errors\n        \"warnings\": list[dict],      # Non-critical warnings\n        \"can_autofix\": bool,         # Whether auto-fix is available\n        \"autofix_command\": str       # Command to run for auto-fix\n    }\n\nExample:\n    >>> result = validate_spec_before_proceed(\"specs/auth-001.json\")\n    >>> if not result[\"valid\"]:\n    ...     if result[\"can_autofix\"]:\n    ...         print(f\"Run: {result['autofix_command']}\")\n    ...     else:\n    ...         print(f\"Errors: {result['errors']}\")",
      "parameters": [
        {
          "name": "spec_path",
          "type": "str",
          "default": null
        },
        {
          "name": "quiet",
          "type": "bool",
          "default": null
        }
      ],
      "return_type": "dict",
      "complexity": 11,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "execute_verify_task",
      "file": "src/claude_skills/claude_skills/common/integrations.py",
      "line": 161,
      "language": "python",
      "docstring": "Execute a verification task based on its metadata.\n\nArgs:\n    spec_data: Loaded JSON spec data\n    task_id: Task ID (e.g., \"verify-1-1\")\n    spec_root: Root directory for the spec (default: current dir)\n    retry_count: Current retry attempt number (internal use)\n\nReturns:\n    dict: {\n        \"success\": bool,             # Overall success\n        \"output\": str,               # Execution output\n        \"errors\": list[str],         # Error messages\n        \"skill_used\": str | None,    # Skill invoked (if any)\n        \"duration\": float,           # Execution time in seconds\n        \"on_failure\": dict | None,   # on_failure configuration used\n        \"retry_count\": int,          # Number of retries attempted\n        \"actions_taken\": list[str]   # Actions taken on failure\n    }\n\nExample:\n    >>> spec_data = load_json_spec(\"auth-001\", specs_dir)\n    >>> result = execute_verify_task(spec_data, \"verify-1-1\")\n    >>> if not result[\"success\"]:\n    ...     print(f\"Verification failed: {result['errors']}\")\n    ...     print(f\"Actions taken: {result['actions_taken']}\")",
      "parameters": [
        {
          "name": "spec_data",
          "type": "dict",
          "default": null
        },
        {
          "name": "task_id",
          "type": "str",
          "default": null
        },
        {
          "name": "spec_root",
          "type": "str",
          "default": null
        },
        {
          "name": "retry_count",
          "type": "int",
          "default": null
        }
      ],
      "return_type": "dict",
      "complexity": 38,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "get_session_state",
      "file": "src/claude_skills/claude_skills/common/integrations.py",
      "line": 391,
      "language": "python",
      "docstring": "Get current session state for enhanced resumption.\n\nArgs:\n    specs_dir: Path to specs directory (auto-detected if None)\n\nReturns:\n    dict: {\n        \"active_specs\": list[dict],  # Active spec summaries\n        \"last_task\": dict | None,    # Most recently modified task\n        \"timestamp\": str,            # Last activity timestamp (ISO8601)\n        \"in_progress_count\": int     # Number of in_progress tasks\n    }\n\nExample:\n    >>> state = get_session_state()\n    >>> if state[\"last_task\"]:\n    ...     spec_id = state[\"last_task\"][\"spec_id\"]\n    ...     task_id = state[\"last_task\"][\"task_id\"]\n    ...     print(f\"Resume work on {spec_id}:{task_id}?\")",
      "parameters": [
        {
          "name": "specs_dir",
          "type": "Optional[str]",
          "default": null
        }
      ],
      "return_type": "dict",
      "complexity": 11,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "_is_test_environment",
      "file": "src/claude_skills/claude_skills/common/metrics.py",
      "line": 27,
      "language": "python",
      "docstring": "Detect if we're running in a test environment.\n\nReturns True if any of the following conditions are met:\n1. pytest is loaded in sys.modules\n2. PYTEST_CURRENT_TEST environment variable is set\n3. DISABLE_METRICS environment variable is set",
      "parameters": [],
      "return_type": "bool",
      "complexity": 4,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": false
    },
    {
      "name": "_ensure_metrics_dir",
      "file": "src/claude_skills/claude_skills/common/metrics.py",
      "line": 51,
      "language": "python",
      "docstring": "Ensure metrics directory exists.",
      "parameters": [],
      "return_type": null,
      "complexity": 1,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": false
    },
    {
      "name": "_rotate_metrics_file_if_needed",
      "file": "src/claude_skills/claude_skills/common/metrics.py",
      "line": 56,
      "language": "python",
      "docstring": "Rotate metrics file if it exceeds max size.",
      "parameters": [],
      "return_type": null,
      "complexity": 5,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": false
    },
    {
      "name": "record_metric",
      "file": "src/claude_skills/claude_skills/common/metrics.py",
      "line": 73,
      "language": "python",
      "docstring": "Record a single metric entry to the JSONL file.\n\nArgs:\n    skill: Name of the skill (e.g., 'sdd-next', 'doc-query')\n    command: Command/subcommand executed (e.g., 'discover', 'search')\n    duration_ms: Execution duration in milliseconds\n    status: 'success' or 'failure'\n    exit_code: Command exit code (0 for success, non-zero for failure)\n    error_message: Optional error message if status is 'failure'",
      "parameters": [
        {
          "name": "skill",
          "type": "str",
          "default": null
        },
        {
          "name": "command",
          "type": "str",
          "default": null
        },
        {
          "name": "duration_ms",
          "type": "int",
          "default": null
        },
        {
          "name": "status",
          "type": "str",
          "default": null
        },
        {
          "name": "exit_code",
          "type": "int",
          "default": null
        },
        {
          "name": "error_message",
          "type": "Optional[str]",
          "default": null
        }
      ],
      "return_type": null,
      "complexity": 4,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "capture_metrics",
      "file": "src/claude_skills/claude_skills/common/metrics.py",
      "line": 123,
      "language": "python",
      "docstring": "Context manager for capturing metrics around a block of code.\n\nUsage:\n    with capture_metrics('sdd-next', 'discover'):\n        # do work\n        pass\n\nArgs:\n    skill: Name of the skill\n    command: Command being executed",
      "parameters": [
        {
          "name": "skill",
          "type": "str",
          "default": null
        },
        {
          "name": "command",
          "type": "str",
          "default": null
        }
      ],
      "return_type": null,
      "complexity": 4,
      "decorators": [
        "contextmanager"
      ],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "track_metrics",
      "file": "src/claude_skills/claude_skills/common/metrics.py",
      "line": 157,
      "language": "python",
      "docstring": "Decorator for tracking metrics on CLI main() functions.\n\nUsage:\n    @track_metrics('sdd-next')\n    def main():\n        # CLI logic\n        return 0  # exit code\n\nArgs:\n    skill_name: Name of the skill (e.g., 'sdd-next', 'doc-query')",
      "parameters": [
        {
          "name": "skill_name",
          "type": "str",
          "default": null
        }
      ],
      "return_type": null,
      "complexity": 9,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "get_metrics_file_path",
      "file": "src/claude_skills/claude_skills/common/metrics.py",
      "line": 214,
      "language": "python",
      "docstring": "Return the path to the metrics JSONL file.",
      "parameters": [],
      "return_type": "Path",
      "complexity": 1,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "is_metrics_enabled",
      "file": "src/claude_skills/claude_skills/common/metrics.py",
      "line": 219,
      "language": "python",
      "docstring": "Check if metrics collection is enabled (not in test environment).",
      "parameters": [],
      "return_type": "bool",
      "complexity": 1,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "find_specs_directory",
      "file": "src/claude_skills/claude_skills/common/paths.py",
      "line": 10,
      "language": "python",
      "docstring": "Discover the specs directory.\n\nArgs:\n    provided_path: Optional explicit path to specs directory or file\n\nReturns:\n    Absolute Path to specs directory (containing active/completed/archived), or None if not found",
      "parameters": [
        {
          "name": "provided_path",
          "type": "Optional[str]",
          "default": null
        }
      ],
      "return_type": "Optional[Path]",
      "complexity": 13,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "find_spec_file",
      "file": "src/claude_skills/claude_skills/common/paths.py",
      "line": 73,
      "language": "python",
      "docstring": "Find the spec file for a given spec ID.\n\nSearches in active/, completed/, and archived/ subdirectories.\n\nArgs:\n    spec_id: Specification ID\n    specs_dir: Path to specs directory (containing active/completed/archived)\n\nReturns:\n    Absolute path to the spec file, or None if not found",
      "parameters": [
        {
          "name": "spec_id",
          "type": "str",
          "default": null
        },
        {
          "name": "specs_dir",
          "type": "Path",
          "default": null
        }
      ],
      "return_type": "Optional[Path]",
      "complexity": 3,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "validate_path",
      "file": "src/claude_skills/claude_skills/common/paths.py",
      "line": 99,
      "language": "python",
      "docstring": "Validate and normalize a file or directory path.\n\nArgs:\n    path: Path string to validate\n\nReturns:\n    Absolute Path object if valid, None otherwise",
      "parameters": [
        {
          "name": "path",
          "type": "str",
          "default": null
        }
      ],
      "return_type": "Optional[Path]",
      "complexity": 3,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "ensure_directory",
      "file": "src/claude_skills/claude_skills/common/paths.py",
      "line": 118,
      "language": "python",
      "docstring": "Ensure a directory exists, creating it if necessary.\n\nArgs:\n    path: Path to directory\n\nReturns:\n    True if directory exists or was created, False on error",
      "parameters": [
        {
          "name": "path",
          "type": "Path",
          "default": null
        }
      ],
      "return_type": "bool",
      "complexity": 2,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "validate_and_normalize_paths",
      "file": "src/claude_skills/claude_skills/common/paths.py",
      "line": 135,
      "language": "python",
      "docstring": "Validate and normalize file paths.\n\nChecks each path for existence, normalizes relative paths, and\ncategorizes them as valid or invalid.\n\nArgs:\n    paths: List of paths to validate (can be relative or absolute)\n    base_directory: Base directory for relative path resolution (defaults to cwd)\n\nReturns:\n    Dictionary with validation results:\n    - valid_paths: list of valid path info dicts\n    - invalid_paths: list of invalid path info dicts\n    - normalized_paths: dict mapping original to normalized paths\n\nExample:\n    >>> result = validate_and_normalize_paths([\"src/main.py\", \"/tmp/test.txt\"])\n    >>> print(f\"Valid: {len(result['valid_paths'])}\")\n    >>> print(result['normalized_paths'])",
      "parameters": [
        {
          "name": "paths",
          "type": "List[str]",
          "default": null
        },
        {
          "name": "base_directory",
          "type": "Optional[Path]",
          "default": null
        }
      ],
      "return_type": "Dict",
      "complexity": 7,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "normalize_path",
      "file": "src/claude_skills/claude_skills/common/paths.py",
      "line": 206,
      "language": "python",
      "docstring": "Normalize a single path (absolute or relative).\n\nArgs:\n    path: Path string to normalize\n    base_directory: Base directory for relative paths (defaults to cwd)\n\nReturns:\n    Normalized absolute Path object\n\nExample:\n    >>> normalized = normalize_path(\"../specs/active/my-spec.md\")\n    >>> print(normalized)  # /Users/user/project/specs/active/my-spec.md",
      "parameters": [
        {
          "name": "path",
          "type": "str",
          "default": null
        },
        {
          "name": "base_directory",
          "type": "Optional[Path]",
          "default": null
        }
      ],
      "return_type": "Path",
      "complexity": 3,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "batch_check_paths_exist",
      "file": "src/claude_skills/claude_skills/common/paths.py",
      "line": 234,
      "language": "python",
      "docstring": "Check multiple paths for existence.\n\nArgs:\n    paths: List of path strings to check\n    base_directory: Base directory for relative paths (defaults to cwd)\n\nReturns:\n    Dictionary mapping each path to its existence status (True/False)\n\nExample:\n    >>> existence = batch_check_paths_exist([\"src/main.py\", \"tests/test.py\"])\n    >>> for path, exists in existence.items():\n    ...     print(f\"{path}: {'exists' if exists else 'missing'}\")",
      "parameters": [
        {
          "name": "paths",
          "type": "List[str]",
          "default": null
        },
        {
          "name": "base_directory",
          "type": "Optional[Path]",
          "default": null
        }
      ],
      "return_type": "Dict[str, bool]",
      "complexity": 3,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "find_files_by_pattern",
      "file": "src/claude_skills/claude_skills/common/paths.py",
      "line": 264,
      "language": "python",
      "docstring": "Find files matching a pattern in a directory.\n\nArgs:\n    directory: Directory to search\n    pattern: Glob pattern (e.g., \"*.py\", \"test_*.py\")\n    recursive: Whether to search recursively\n    max_depth: Maximum depth for recursive search (None = unlimited)\n\nReturns:\n    List of matching file paths\n\nExample:\n    >>> py_files = find_files_by_pattern(Path(\"src\"), \"*.py\")\n    >>> print(f\"Found {len(py_files)} Python files\")",
      "parameters": [
        {
          "name": "directory",
          "type": "Path",
          "default": null
        },
        {
          "name": "pattern",
          "type": "str",
          "default": null
        },
        {
          "name": "recursive",
          "type": "bool",
          "default": null
        },
        {
          "name": "max_depth",
          "type": "Optional[int]",
          "default": null
        }
      ],
      "return_type": "List[Path]",
      "complexity": 5,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "recalculate_progress",
      "file": "src/claude_skills/claude_skills/common/progress.py",
      "line": 9,
      "language": "python",
      "docstring": "Recursively recalculate progress for a node and all its parents.\n\nModifies spec_data in-place by updating completed_tasks, total_tasks,\nand status fields for the node and all ancestors.\n\nArgs:\n    spec_data: JSON spec file data dictionary\n    node_id: Node to start recalculation from (default: spec-root)\n\nReturns:\n    The modified spec_data dictionary (for convenience/chaining)",
      "parameters": [
        {
          "name": "spec_data",
          "type": "Dict",
          "default": null
        },
        {
          "name": "node_id",
          "type": "str",
          "default": null
        }
      ],
      "return_type": "Dict",
      "complexity": 5,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "update_node_status",
      "file": "src/claude_skills/claude_skills/common/progress.py",
      "line": 60,
      "language": "python",
      "docstring": "Update a node's status based on its children's progress.\n\nModifies node in-place. Does not affect manually set statuses\nfor leaf nodes (tasks).\n\nArgs:\n    node: Node dictionary from hierarchy\n    hierarchy: Full hierarchy dictionary (needed to check child statuses)",
      "parameters": [
        {
          "name": "node",
          "type": "Dict",
          "default": null
        },
        {
          "name": "hierarchy",
          "type": "Dict",
          "default": null
        }
      ],
      "return_type": "None",
      "complexity": 14,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "update_parent_status",
      "file": "src/claude_skills/claude_skills/common/progress.py",
      "line": 115,
      "language": "python",
      "docstring": "Update status and progress for a node's parent chain.\n\nUse this after updating a task status to propagate changes up the hierarchy.\n\nArgs:\n    spec_data: JSON spec file data dictionary\n    node_id: Node whose parents should be updated\n\nReturns:\n    The modified spec_data dictionary (for convenience/chaining)",
      "parameters": [
        {
          "name": "spec_data",
          "type": "Dict",
          "default": null
        },
        {
          "name": "node_id",
          "type": "str",
          "default": null
        }
      ],
      "return_type": "Dict",
      "complexity": 5,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "get_progress_summary",
      "file": "src/claude_skills/claude_skills/common/progress.py",
      "line": 151,
      "language": "python",
      "docstring": "Get progress summary for a node.\n\nArgs:\n    spec_data: JSON spec file data\n    node_id: Node to get progress for (default: spec-root)\n\nReturns:\n    Dictionary with progress information",
      "parameters": [
        {
          "name": "spec_data",
          "type": "Dict",
          "default": null
        },
        {
          "name": "node_id",
          "type": "str",
          "default": null
        }
      ],
      "return_type": "Dict",
      "complexity": 8,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "list_phases",
      "file": "src/claude_skills/claude_skills/common/progress.py",
      "line": 215,
      "language": "python",
      "docstring": "List all phases with their status and progress.\n\nArgs:\n    spec_data: JSON spec file data\n\nReturns:\n    List of phase dictionaries",
      "parameters": [
        {
          "name": "spec_data",
          "type": "Dict",
          "default": null
        }
      ],
      "return_type": "List[Dict]",
      "complexity": 4,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "get_task_counts_by_status",
      "file": "src/claude_skills/claude_skills/common/progress.py",
      "line": 252,
      "language": "python",
      "docstring": "Count tasks by their status.\n\nArgs:\n    spec_data: JSON spec file data\n\nReturns:\n    Dictionary mapping status to count",
      "parameters": [
        {
          "name": "spec_data",
          "type": "Dict",
          "default": null
        }
      ],
      "return_type": "Dict[str, int]",
      "complexity": 5,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "query_tasks",
      "file": "src/claude_skills/claude_skills/common/query_operations.py",
      "line": 15,
      "language": "python",
      "docstring": "Query and filter tasks by various criteria.\n\nArgs:\n    spec_id: Specification ID\n    specs_dir: Path to specs directory\n    status: Filter by status (pending/in_progress/completed/blocked)\n    task_type: Filter by type (task/verify/group/phase)\n    parent: Filter by parent node ID\n    format_type: Output format (table/json/simple)\n    printer: Optional printer for output\n\nReturns:\n    List of matching task dictionaries, or None on error",
      "parameters": [
        {
          "name": "spec_id",
          "type": "str",
          "default": null
        },
        {
          "name": "specs_dir",
          "type": "Path",
          "default": null
        },
        {
          "name": "status",
          "type": "Optional[str]",
          "default": null
        },
        {
          "name": "task_type",
          "type": "Optional[str]",
          "default": null
        },
        {
          "name": "parent",
          "type": "Optional[str]",
          "default": null
        },
        {
          "name": "format_type",
          "type": "str",
          "default": null
        },
        {
          "name": "printer",
          "type": "Optional[PrettyPrinter]",
          "default": null
        }
      ],
      "return_type": "Optional[List[Dict]]",
      "complexity": 21,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "get_task",
      "file": "src/claude_skills/claude_skills/common/query_operations.py",
      "line": 103,
      "language": "python",
      "docstring": "Get detailed information about a specific task.\n\nArgs:\n    spec_id: Specification ID\n    task_id: Task ID to retrieve\n    specs_dir: Path to specs directory\n    printer: Optional printer for output\n\nReturns:\n    Task data dictionary, or None if not found",
      "parameters": [
        {
          "name": "spec_id",
          "type": "str",
          "default": null
        },
        {
          "name": "task_id",
          "type": "str",
          "default": null
        },
        {
          "name": "specs_dir",
          "type": "Path",
          "default": null
        },
        {
          "name": "printer",
          "type": "Optional[PrettyPrinter]",
          "default": null
        }
      ],
      "return_type": "Optional[Dict]",
      "complexity": 13,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "list_phases",
      "file": "src/claude_skills/claude_skills/common/query_operations.py",
      "line": 168,
      "language": "python",
      "docstring": "List all phases with their progress.\n\nArgs:\n    spec_id: Specification ID\n    specs_dir: Path to specs directory\n    printer: Optional printer for output\n\nReturns:\n    List of phase dictionaries, or None on error",
      "parameters": [
        {
          "name": "spec_id",
          "type": "str",
          "default": null
        },
        {
          "name": "specs_dir",
          "type": "Path",
          "default": null
        },
        {
          "name": "printer",
          "type": "Optional[PrettyPrinter]",
          "default": null
        }
      ],
      "return_type": "Optional[List[Dict]]",
      "complexity": 6,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "check_complete",
      "file": "src/claude_skills/claude_skills/common/query_operations.py",
      "line": 218,
      "language": "python",
      "docstring": "Check if spec or phase is ready to be marked complete.\n\nArgs:\n    spec_id: Specification ID\n    specs_dir: Path to specs directory\n    phase_id: Optional phase ID to check (if None, checks entire spec)\n    printer: Optional printer for output\n\nReturns:\n    Dictionary with completion status and incomplete tasks",
      "parameters": [
        {
          "name": "spec_id",
          "type": "str",
          "default": null
        },
        {
          "name": "specs_dir",
          "type": "Path",
          "default": null
        },
        {
          "name": "phase_id",
          "type": "Optional[str]",
          "default": null
        },
        {
          "name": "printer",
          "type": "Optional[PrettyPrinter]",
          "default": null
        }
      ],
      "return_type": "Dict",
      "complexity": 13,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "list_blockers",
      "file": "src/claude_skills/claude_skills/common/query_operations.py",
      "line": 310,
      "language": "python",
      "docstring": "List all currently blocked tasks with their blocker details.\n\nArgs:\n    spec_id: Specification ID\n    specs_dir: Path to specs directory\n    printer: Optional printer for output\n\nReturns:\n    List of blocked task dictionaries, or None on error",
      "parameters": [
        {
          "name": "spec_id",
          "type": "str",
          "default": null
        },
        {
          "name": "specs_dir",
          "type": "Path",
          "default": null
        },
        {
          "name": "printer",
          "type": "Optional[PrettyPrinter]",
          "default": null
        }
      ],
      "return_type": "Optional[List[Dict]]",
      "complexity": 11,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "generate_spec_report",
      "file": "src/claude_skills/claude_skills/common/reporting.py",
      "line": 18,
      "language": "python",
      "docstring": "Generate a comprehensive spec validation report.\n\nArgs:\n    result: SpecValidationResult from validation\n\nReturns:\n    Formatted report string",
      "parameters": [
        {
          "name": "result",
          "type": "SpecValidationResult",
          "default": null
        }
      ],
      "return_type": "str",
      "complexity": 22,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "generate_json_spec_report",
      "file": "src/claude_skills/claude_skills/common/reporting.py",
      "line": 94,
      "language": "python",
      "docstring": "Generate a comprehensive JSON spec validation report.\n\nArgs:\n    result: JsonSpecValidationResult from JSON spec validation\n\nReturns:\n    Formatted report string",
      "parameters": [
        {
          "name": "result",
          "type": "JsonSpecValidationResult",
          "default": null
        }
      ],
      "return_type": "str",
      "complexity": 9,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "generate_combined_report",
      "file": "src/claude_skills/claude_skills/common/reporting.py",
      "line": 149,
      "language": "python",
      "docstring": "Generate a combined validation report for markdown spec and JSON spec.\n\nArgs:\n    spec_result: SpecValidationResult from markdown spec validation\n    json_spec_result: JsonSpecValidationResult from JSON spec validation\n\nReturns:\n    Formatted combined report string",
      "parameters": [
        {
          "name": "spec_result",
          "type": "SpecValidationResult",
          "default": null
        },
        {
          "name": "json_spec_result",
          "type": "JsonSpecValidationResult",
          "default": null
        }
      ],
      "return_type": "str",
      "complexity": 4,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "extract_frontmatter",
      "file": "src/claude_skills/claude_skills/common/spec.py",
      "line": 16,
      "language": "python",
      "docstring": "Extract metadata/frontmatter information from a specification file.\n\nSupports both JSON-based specs (current default) and legacy Markdown specs\nthat contain a YAML-style frontmatter block delimited by ``---`` markers.\n\nArgs:\n    spec_file: Path to the specification file.\n\nReturns:\n    Dictionary containing extracted metadata. On failure, returns a\n    dictionary with an ``\"error\"`` key describing the failure.",
      "parameters": [
        {
          "name": "spec_file",
          "type": "Union[str, Path]",
          "default": null
        }
      ],
      "return_type": "Dict[str, Any]",
      "complexity": 5,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "_extract_json_frontmatter",
      "file": "src/claude_skills/claude_skills/common/spec.py",
      "line": 52,
      "language": "python",
      "docstring": null,
      "parameters": [
        {
          "name": "path",
          "type": "Path",
          "default": null
        }
      ],
      "return_type": "Dict[str, Any]",
      "complexity": 10,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": false
    },
    {
      "name": "_extract_markdown_frontmatter",
      "file": "src/claude_skills/claude_skills/common/spec.py",
      "line": 87,
      "language": "python",
      "docstring": null,
      "parameters": [
        {
          "name": "path",
          "type": "Path",
          "default": null
        }
      ],
      "return_type": "Dict[str, Any]",
      "complexity": 14,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": false
    },
    {
      "name": "_coerce_scalar",
      "file": "src/claude_skills/claude_skills/common/spec.py",
      "line": 139,
      "language": "python",
      "docstring": null,
      "parameters": [
        {
          "name": "value",
          "type": "str",
          "default": null
        }
      ],
      "return_type": "Any",
      "complexity": 5,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": false
    },
    {
      "name": "load_json_spec",
      "file": "src/claude_skills/claude_skills/common/spec.py",
      "line": 156,
      "language": "python",
      "docstring": "Load the JSON spec file for a given spec ID.\n\nSearches for the spec file in active/, completed/, and archived/ directories.\n\nArgs:\n    spec_id: Specification ID\n    specs_dir: Path to specs directory\n\nReturns:\n    Spec data dictionary, or None if not found",
      "parameters": [
        {
          "name": "spec_id",
          "type": "str",
          "default": null
        },
        {
          "name": "specs_dir",
          "type": "Path",
          "default": null
        }
      ],
      "return_type": "Optional[Dict]",
      "complexity": 4,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "save_json_spec",
      "file": "src/claude_skills/claude_skills/common/spec.py",
      "line": 187,
      "language": "python",
      "docstring": "Save JSON spec file with atomic write and optional backup.\n\nUpdates the existing spec file in its current location (active/completed/archived).\n\nArgs:\n    spec_id: Specification ID\n    specs_dir: Path to specs directory\n    spec_data: Spec data to write\n    backup: Create backup before writing (default: True)\n    validate: Validate JSON before writing (default: True)\n\nReturns:\n    True if successful, False otherwise",
      "parameters": [
        {
          "name": "spec_id",
          "type": "str",
          "default": null
        },
        {
          "name": "specs_dir",
          "type": "Path",
          "default": null
        },
        {
          "name": "spec_data",
          "type": "Dict",
          "default": null
        },
        {
          "name": "backup",
          "type": "bool",
          "default": null
        },
        {
          "name": "validate",
          "type": "bool",
          "default": null
        }
      ],
      "return_type": "bool",
      "complexity": 8,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "backup_json_spec",
      "file": "src/claude_skills/claude_skills/common/spec.py",
      "line": 247,
      "language": "python",
      "docstring": "Create a backup copy of the JSON spec file.\n\nArgs:\n    spec_id: Specification ID\n    specs_dir: Path to specs directory\n    suffix: Backup file suffix (default: .backup)\n\nReturns:\n    Path to backup file if created, None otherwise",
      "parameters": [
        {
          "name": "spec_id",
          "type": "str",
          "default": null
        },
        {
          "name": "specs_dir",
          "type": "Path",
          "default": null
        },
        {
          "name": "suffix",
          "type": "str",
          "default": null
        }
      ],
      "return_type": "Optional[Path]",
      "complexity": 3,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "_validate_spec_structure",
      "file": "src/claude_skills/claude_skills/common/spec.py",
      "line": 274,
      "language": "python",
      "docstring": "Validate basic JSON spec file structure.\n\nArgs:\n    spec_data: Spec data dictionary\n\nReturns:\n    True if valid, False otherwise",
      "parameters": [
        {
          "name": "spec_data",
          "type": "Dict",
          "default": null
        }
      ],
      "return_type": "bool",
      "complexity": 9,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": false
    },
    {
      "name": "get_node",
      "file": "src/claude_skills/claude_skills/common/spec.py",
      "line": 319,
      "language": "python",
      "docstring": "Get a specific node from the state hierarchy.\n\nArgs:\n    spec_data: JSON spec file data\n    node_id: Node identifier\n\nReturns:\n    Node data dictionary or None if not found",
      "parameters": [
        {
          "name": "spec_data",
          "type": "Dict",
          "default": null
        },
        {
          "name": "node_id",
          "type": "str",
          "default": null
        }
      ],
      "return_type": "Optional[Dict]",
      "complexity": 1,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "update_node",
      "file": "src/claude_skills/claude_skills/common/spec.py",
      "line": 334,
      "language": "python",
      "docstring": "Update a node in the state hierarchy.\n\nArgs:\n    spec_data: JSON spec file data\n    node_id: Node identifier\n    updates: Dictionary of fields to update\n\nReturns:\n    True if node exists and was updated, False otherwise",
      "parameters": [
        {
          "name": "spec_data",
          "type": "Dict",
          "default": null
        },
        {
          "name": "node_id",
          "type": "str",
          "default": null
        },
        {
          "name": "updates",
          "type": "Dict",
          "default": null
        }
      ],
      "return_type": "bool",
      "complexity": 2,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "get_spec_statistics",
      "file": "src/claude_skills/claude_skills/common/spec_analysis.py",
      "line": 19,
      "language": "python",
      "docstring": "Get comprehensive statistics about a spec file.\n\nAnalyzes the spec document and extracts:\n- File size and line count\n- Task/phase/verification counts\n- Frontmatter metadata\n- JSON spec file info (if available)\n\nArgs:\n    spec_file: Path to spec markdown file\n    json_spec_file: Optional path to JSON spec (auto-detected if not provided)\n\nReturns:\n    Dictionary with spec statistics and metrics\n\nExample:\n    >>> stats = get_spec_statistics(Path(\"specs/active/my-spec.md\"))\n    >>> print(f\"Tasks: {stats['task_count']}, Phases: {stats['phase_count']}\")",
      "parameters": [
        {
          "name": "spec_file",
          "type": "Path",
          "default": null
        },
        {
          "name": "json_spec_file",
          "type": "Optional[Path]",
          "default": null
        }
      ],
      "return_type": "Dict",
      "complexity": 9,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "count_spec_elements",
      "file": "src/claude_skills/claude_skills/common/spec_analysis.py",
      "line": 100,
      "language": "python",
      "docstring": "Count tasks, phases, verifications, and subtasks in spec content.\n\nArgs:\n    spec_content: Full spec markdown content as string\n\nReturns:\n    Dictionary with counts for each element type\n\nExample:\n    >>> with open(\"spec.md\") as f:\n    ...     content = f.read()\n    >>> counts = count_spec_elements(content)\n    >>> print(counts)\n    {'task_count': 15, 'subtask_count': 42, 'phase_count': 3, 'verify_count': 8}",
      "parameters": [
        {
          "name": "spec_content",
          "type": "str",
          "default": null
        }
      ],
      "return_type": "Dict",
      "complexity": 1,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "get_json_spec_metadata",
      "file": "src/claude_skills/claude_skills/common/spec_analysis.py",
      "line": 143,
      "language": "python",
      "docstring": "Extract metadata from JSON spec.\n\nArgs:\n    spec_data: JSON spec file data dictionary\n\nReturns:\n    Dictionary with JSON spec metadata\n\nExample:\n    >>> with open(\"specs/active/my-spec.json\") as f:\n    ...     spec_data = json.load(f)\n    >>> metadata = get_json_spec_metadata(spec_data)\n    >>> print(f\"Last updated: {metadata['last_updated']}\")",
      "parameters": [
        {
          "name": "spec_data",
          "type": "Dict",
          "default": null
        }
      ],
      "return_type": "Dict",
      "complexity": 3,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "analyze_spec_complexity",
      "file": "src/claude_skills/claude_skills/common/spec_analysis.py",
      "line": 188,
      "language": "python",
      "docstring": "Analyze spec complexity metrics.\n\nProvides insights into spec complexity including:\n- Average tasks per phase\n- Average subtasks per task\n- Depth of task hierarchy\n- Verification coverage ratio\n\nArgs:\n    spec_file: Path to spec markdown file\n\nReturns:\n    Dictionary with complexity metrics\n\nExample:\n    >>> complexity = analyze_spec_complexity(Path(\"specs/active/my-spec.md\"))\n    >>> print(f\"Average tasks per phase: {complexity['avg_tasks_per_phase']}\")",
      "parameters": [
        {
          "name": "spec_file",
          "type": "Path",
          "default": null
        }
      ],
      "return_type": "Dict",
      "complexity": 4,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "compare_spec_files",
      "file": "src/claude_skills/claude_skills/common/spec_analysis.py",
      "line": 246,
      "language": "python",
      "docstring": "Compare markdown spec counts to JSON spec counts.\n\nIdentifies mismatches between the markdown spec document and JSON spec,\nwhich may indicate synchronization issues.\n\nArgs:\n    md_spec_file: Path to spec markdown file\n    json_spec_file: Path to JSON spec file\n\nReturns:\n    Dictionary with comparison results and any discrepancies\n\nExample:\n    >>> comparison = compare_spec_files(md_path, json_path)\n    >>> if comparison['has_mismatches']:\n    ...     print(\"Warning: Markdown and JSON specs are out of sync\")",
      "parameters": [
        {
          "name": "md_spec_file",
          "type": "Path",
          "default": null
        },
        {
          "name": "json_spec_file",
          "type": "Path",
          "default": null
        }
      ],
      "return_type": "Dict",
      "complexity": 6,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "validate_status",
      "file": "src/claude_skills/claude_skills/common/validation.py",
      "line": 198,
      "language": "python",
      "docstring": "Validate status field value",
      "parameters": [
        {
          "name": "status",
          "type": "str",
          "default": null
        }
      ],
      "return_type": "bool",
      "complexity": 1,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "validate_node_type",
      "file": "src/claude_skills/claude_skills/common/validation.py",
      "line": 204,
      "language": "python",
      "docstring": "Validate node type field value",
      "parameters": [
        {
          "name": "node_type",
          "type": "str",
          "default": null
        }
      ],
      "return_type": "bool",
      "complexity": 1,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "validate_spec_id_format",
      "file": "src/claude_skills/claude_skills/common/validation.py",
      "line": 210,
      "language": "python",
      "docstring": "Validate spec_id follows recommended format: {feature}-{YYYY-MM-DD}-{nnn}",
      "parameters": [
        {
          "name": "spec_id",
          "type": "str",
          "default": null
        }
      ],
      "return_type": "bool",
      "complexity": 1,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "validate_iso8601_date",
      "file": "src/claude_skills/claude_skills/common/validation.py",
      "line": 216,
      "language": "python",
      "docstring": "Validate ISO 8601 date format",
      "parameters": [
        {
          "name": "date_str",
          "type": "str",
          "default": null
        }
      ],
      "return_type": "bool",
      "complexity": 1,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "normalize_message_text",
      "file": "src/claude_skills/claude_skills/common/validation.py",
      "line": 226,
      "language": "python",
      "docstring": "Strip glyphs/severity prefixes from validation messages for consistent comparison.",
      "parameters": [
        {
          "name": "raw",
          "type": "str",
          "default": null
        }
      ],
      "return_type": "str",
      "complexity": 9,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "get_parser_from_module",
      "file": "src/claude_skills/claude_skills/dev_tools/generate_docs.py",
      "line": 35,
      "language": "python",
      "docstring": "Import a CLI module and extract its ArgumentParser.\n\nThis function attempts to get the parser by:\n1. Looking for a get_parser() function\n2. Calling main() with --help and capturing the parser\n3. Looking for a global 'parser' variable",
      "parameters": [
        {
          "name": "module_name",
          "type": "str",
          "default": null
        }
      ],
      "return_type": "argparse.ArgumentParser",
      "complexity": 10,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "format_argument",
      "file": "src/claude_skills/claude_skills/dev_tools/generate_docs.py",
      "line": 105,
      "language": "python",
      "docstring": "Format a single argument for documentation.",
      "parameters": [
        {
          "name": "action",
          "type": "argparse.Action",
          "default": null
        }
      ],
      "return_type": "Tuple[str, str]",
      "complexity": 8,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "generate_global_options",
      "file": "src/claude_skills/claude_skills/dev_tools/generate_docs.py",
      "line": 128,
      "language": "python",
      "docstring": "Generate markdown for global options section.",
      "parameters": [
        {
          "name": "parser",
          "type": "argparse.ArgumentParser",
          "default": null
        },
        {
          "name": "skill_name",
          "type": "str",
          "default": null
        }
      ],
      "return_type": "str",
      "complexity": 5,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "extract_subparsers",
      "file": "src/claude_skills/claude_skills/dev_tools/generate_docs.py",
      "line": 148,
      "language": "python",
      "docstring": "Extract subparsers from an ArgumentParser.",
      "parameters": [
        {
          "name": "parser",
          "type": "argparse.ArgumentParser",
          "default": null
        }
      ],
      "return_type": "Optional[Dict[str, argparse.ArgumentParser]]",
      "complexity": 4,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "generate_command_reference",
      "file": "src/claude_skills/claude_skills/dev_tools/generate_docs.py",
      "line": 160,
      "language": "python",
      "docstring": "Generate markdown for the Command Reference section.",
      "parameters": [
        {
          "name": "subparsers",
          "type": "Dict[str, argparse.ArgumentParser]",
          "default": null
        },
        {
          "name": "skill_name",
          "type": "str",
          "default": null
        }
      ],
      "return_type": "str",
      "complexity": 17,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "generate_simple_usage",
      "file": "src/claude_skills/claude_skills/dev_tools/generate_docs.py",
      "line": 220,
      "language": "python",
      "docstring": "Generate usage section for CLIs without subcommands.",
      "parameters": [
        {
          "name": "parser",
          "type": "argparse.ArgumentParser",
          "default": null
        },
        {
          "name": "skill_name",
          "type": "str",
          "default": null
        }
      ],
      "return_type": "str",
      "complexity": 14,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "generate_documentation",
      "file": "src/claude_skills/claude_skills/dev_tools/generate_docs.py",
      "line": 267,
      "language": "python",
      "docstring": "Generate complete documentation for a skill.\n\nArgs:\n    skill_name: Name of the skill (e.g., 'sdd-validate')\n    sections: List of sections to include. Options: 'global', 'commands', 'usage'\n             If None, includes all applicable sections.\n\nReturns:\n    Generated markdown documentation",
      "parameters": [
        {
          "name": "skill_name",
          "type": "str",
          "default": null
        },
        {
          "name": "sections",
          "type": "Optional[List[str]]",
          "default": null
        }
      ],
      "return_type": "str",
      "complexity": 9,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "main",
      "file": "src/claude_skills/claude_skills/dev_tools/generate_docs.py",
      "line": 316,
      "language": "python",
      "docstring": "Main entry point for the documentation generator.",
      "parameters": [],
      "return_type": null,
      "complexity": 3,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "check_permissions",
      "file": "src/claude_skills/claude_skills/dev_tools/sdd_start_helper.py",
      "line": 28,
      "language": "python",
      "docstring": "Check if SDD permissions are configured for the project.",
      "parameters": [
        {
          "name": "project_root",
          "type": null,
          "default": null
        }
      ],
      "return_type": null,
      "complexity": 6,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "find_active_work",
      "file": "src/claude_skills/claude_skills/dev_tools/sdd_start_helper.py",
      "line": 70,
      "language": "python",
      "docstring": "Find all active SDD specifications with resumable work.",
      "parameters": [
        {
          "name": "project_root",
          "type": null,
          "default": null
        }
      ],
      "return_type": null,
      "complexity": 5,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "format_output",
      "file": "src/claude_skills/claude_skills/dev_tools/sdd_start_helper.py",
      "line": 126,
      "language": "python",
      "docstring": "Format active work as human-readable text with last-accessed task info.",
      "parameters": [
        {
          "name": "project_root",
          "type": null,
          "default": null
        }
      ],
      "return_type": null,
      "complexity": 13,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "get_session_info",
      "file": "src/claude_skills/claude_skills/dev_tools/sdd_start_helper.py",
      "line": 224,
      "language": "python",
      "docstring": "Get session state information as JSON.",
      "parameters": [
        {
          "name": "project_root",
          "type": null,
          "default": null
        }
      ],
      "return_type": null,
      "complexity": 3,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "main",
      "file": "src/claude_skills/claude_skills/dev_tools/sdd_start_helper.py",
      "line": 259,
      "language": "python",
      "docstring": null,
      "parameters": [],
      "return_type": null,
      "complexity": 5,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "update_permissions",
      "file": "src/claude_skills/claude_skills/dev_tools/setup_project_permissions.py",
      "line": 59,
      "language": "python",
      "docstring": "Update .claude/settings.json with SDD permissions.",
      "parameters": [
        {
          "name": "project_root",
          "type": null,
          "default": null
        }
      ],
      "return_type": null,
      "complexity": 7,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "check_permissions",
      "file": "src/claude_skills/claude_skills/dev_tools/setup_project_permissions.py",
      "line": 120,
      "language": "python",
      "docstring": "Check if SDD permissions are configured.",
      "parameters": [
        {
          "name": "project_root",
          "type": null,
          "default": null
        }
      ],
      "return_type": null,
      "complexity": 2,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "main",
      "file": "src/claude_skills/claude_skills/dev_tools/setup_project_permissions.py",
      "line": 161,
      "language": "python",
      "docstring": null,
      "parameters": [],
      "return_type": null,
      "complexity": 3,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "_dump_json",
      "file": "src/claude_skills/claude_skills/doc_query/cli.py",
      "line": 25,
      "language": "python",
      "docstring": null,
      "parameters": [
        {
          "name": "payload",
          "type": "Any",
          "default": null
        }
      ],
      "return_type": "None",
      "complexity": 1,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": false
    },
    {
      "name": "_maybe_json",
      "file": "src/claude_skills/claude_skills/doc_query/cli.py",
      "line": 30,
      "language": "python",
      "docstring": null,
      "parameters": [
        {
          "name": "args",
          "type": "argparse.Namespace",
          "default": null
        },
        {
          "name": "payload",
          "type": "Any",
          "default": null
        }
      ],
      "return_type": "bool",
      "complexity": 2,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": false
    },
    {
      "name": "_ensure_query",
      "file": "src/claude_skills/claude_skills/doc_query/cli.py",
      "line": 37,
      "language": "python",
      "docstring": null,
      "parameters": [
        {
          "name": "args",
          "type": "argparse.Namespace",
          "default": null
        },
        {
          "name": "printer",
          "type": "PrettyPrinter",
          "default": null
        }
      ],
      "return_type": "Optional[DocumentationQuery]",
      "complexity": 6,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": false
    },
    {
      "name": "_results_to_json",
      "file": "src/claude_skills/claude_skills/doc_query/cli.py",
      "line": 56,
      "language": "python",
      "docstring": null,
      "parameters": [
        {
          "name": "results",
          "type": "List[QueryResult]",
          "default": null
        },
        {
          "name": "include_meta",
          "type": "bool",
          "default": null
        }
      ],
      "return_type": "List[Dict[str, Any]]",
      "complexity": 3,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": false
    },
    {
      "name": "_context_to_json",
      "file": "src/claude_skills/claude_skills/doc_query/cli.py",
      "line": 70,
      "language": "python",
      "docstring": null,
      "parameters": [
        {
          "name": "context",
          "type": "Dict[str, List[QueryResult]]",
          "default": null
        }
      ],
      "return_type": "Dict[str, List[Dict[str, Any]]]",
      "complexity": 1,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": false
    },
    {
      "name": "_print_results",
      "file": "src/claude_skills/claude_skills/doc_query/cli.py",
      "line": 77,
      "language": "python",
      "docstring": null,
      "parameters": [
        {
          "name": "args",
          "type": "argparse.Namespace",
          "default": null
        },
        {
          "name": "results",
          "type": "List[QueryResult]",
          "default": null
        }
      ],
      "return_type": "None",
      "complexity": 3,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": false
    },
    {
      "name": "format_result",
      "file": "src/claude_skills/claude_skills/doc_query/cli.py",
      "line": 88,
      "language": "python",
      "docstring": null,
      "parameters": [
        {
          "name": "result",
          "type": "QueryResult",
          "default": null
        },
        {
          "name": "verbose",
          "type": "bool",
          "default": null
        }
      ],
      "return_type": "str",
      "complexity": 29,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "print_context",
      "file": "src/claude_skills/claude_skills/doc_query/cli.py",
      "line": 159,
      "language": "python",
      "docstring": null,
      "parameters": [
        {
          "name": "context",
          "type": "Dict[str, List[QueryResult]]",
          "default": null
        },
        {
          "name": "verbose",
          "type": "bool",
          "default": null
        }
      ],
      "return_type": "None",
      "complexity": 17,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "print_module_summary",
      "file": "src/claude_skills/claude_skills/doc_query/cli.py",
      "line": 220,
      "language": "python",
      "docstring": null,
      "parameters": [
        {
          "name": "summary",
          "type": "Dict[str, Any]",
          "default": null
        },
        {
          "name": "verbose",
          "type": "bool",
          "default": null
        }
      ],
      "return_type": "None",
      "complexity": 18,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "cmd_find_class",
      "file": "src/claude_skills/claude_skills/doc_query/cli.py",
      "line": 280,
      "language": "python",
      "docstring": null,
      "parameters": [
        {
          "name": "args",
          "type": "argparse.Namespace",
          "default": null
        },
        {
          "name": "printer",
          "type": "PrettyPrinter",
          "default": null
        }
      ],
      "return_type": "int",
      "complexity": 3,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "cmd_find_function",
      "file": "src/claude_skills/claude_skills/doc_query/cli.py",
      "line": 291,
      "language": "python",
      "docstring": null,
      "parameters": [
        {
          "name": "args",
          "type": "argparse.Namespace",
          "default": null
        },
        {
          "name": "printer",
          "type": "PrettyPrinter",
          "default": null
        }
      ],
      "return_type": "int",
      "complexity": 3,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "cmd_find_module",
      "file": "src/claude_skills/claude_skills/doc_query/cli.py",
      "line": 302,
      "language": "python",
      "docstring": null,
      "parameters": [
        {
          "name": "args",
          "type": "argparse.Namespace",
          "default": null
        },
        {
          "name": "printer",
          "type": "PrettyPrinter",
          "default": null
        }
      ],
      "return_type": "int",
      "complexity": 3,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "cmd_complexity",
      "file": "src/claude_skills/claude_skills/doc_query/cli.py",
      "line": 313,
      "language": "python",
      "docstring": null,
      "parameters": [
        {
          "name": "args",
          "type": "argparse.Namespace",
          "default": null
        },
        {
          "name": "printer",
          "type": "PrettyPrinter",
          "default": null
        }
      ],
      "return_type": "int",
      "complexity": 3,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "cmd_dependencies",
      "file": "src/claude_skills/claude_skills/doc_query/cli.py",
      "line": 324,
      "language": "python",
      "docstring": null,
      "parameters": [
        {
          "name": "args",
          "type": "argparse.Namespace",
          "default": null
        },
        {
          "name": "printer",
          "type": "PrettyPrinter",
          "default": null
        }
      ],
      "return_type": "int",
      "complexity": 3,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "cmd_search",
      "file": "src/claude_skills/claude_skills/doc_query/cli.py",
      "line": 335,
      "language": "python",
      "docstring": null,
      "parameters": [
        {
          "name": "args",
          "type": "argparse.Namespace",
          "default": null
        },
        {
          "name": "printer",
          "type": "PrettyPrinter",
          "default": null
        }
      ],
      "return_type": "int",
      "complexity": 3,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "cmd_context",
      "file": "src/claude_skills/claude_skills/doc_query/cli.py",
      "line": 346,
      "language": "python",
      "docstring": null,
      "parameters": [
        {
          "name": "args",
          "type": "argparse.Namespace",
          "default": null
        },
        {
          "name": "printer",
          "type": "PrettyPrinter",
          "default": null
        }
      ],
      "return_type": "int",
      "complexity": 3,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "cmd_describe_module",
      "file": "src/claude_skills/claude_skills/doc_query/cli.py",
      "line": 362,
      "language": "python",
      "docstring": null,
      "parameters": [
        {
          "name": "args",
          "type": "argparse.Namespace",
          "default": null
        },
        {
          "name": "printer",
          "type": "PrettyPrinter",
          "default": null
        }
      ],
      "return_type": "int",
      "complexity": 3,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "cmd_stats",
      "file": "src/claude_skills/claude_skills/doc_query/cli.py",
      "line": 378,
      "language": "python",
      "docstring": null,
      "parameters": [
        {
          "name": "args",
          "type": "argparse.Namespace",
          "default": null
        },
        {
          "name": "printer",
          "type": "PrettyPrinter",
          "default": null
        }
      ],
      "return_type": "int",
      "complexity": 4,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "cmd_list_classes",
      "file": "src/claude_skills/claude_skills/doc_query/cli.py",
      "line": 405,
      "language": "python",
      "docstring": null,
      "parameters": [
        {
          "name": "args",
          "type": "argparse.Namespace",
          "default": null
        },
        {
          "name": "printer",
          "type": "PrettyPrinter",
          "default": null
        }
      ],
      "return_type": "int",
      "complexity": 3,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "cmd_list_functions",
      "file": "src/claude_skills/claude_skills/doc_query/cli.py",
      "line": 416,
      "language": "python",
      "docstring": null,
      "parameters": [
        {
          "name": "args",
          "type": "argparse.Namespace",
          "default": null
        },
        {
          "name": "printer",
          "type": "PrettyPrinter",
          "default": null
        }
      ],
      "return_type": "int",
      "complexity": 3,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "cmd_list_modules",
      "file": "src/claude_skills/claude_skills/doc_query/cli.py",
      "line": 427,
      "language": "python",
      "docstring": null,
      "parameters": [
        {
          "name": "args",
          "type": "argparse.Namespace",
          "default": null
        },
        {
          "name": "printer",
          "type": "PrettyPrinter",
          "default": null
        }
      ],
      "return_type": "int",
      "complexity": 3,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "register_doc_query",
      "file": "src/claude_skills/claude_skills/doc_query/cli.py",
      "line": 443,
      "language": "python",
      "docstring": "Register documentation query commands for the unified doc CLI.",
      "parameters": [
        {
          "name": "subparsers",
          "type": "argparse._SubParsersAction",
          "default": null
        },
        {
          "name": "parent_parser",
          "type": "argparse.ArgumentParser",
          "default": null
        }
      ],
      "return_type": "None",
      "complexity": 1,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "check_docs_exist",
      "file": "src/claude_skills/claude_skills/doc_query/doc_query_lib.py",
      "line": 1003,
      "language": "python",
      "docstring": "Check if documentation files exist.\n\nArgs:\n    docs_path: Path to docs directory or documentation.json\n\nReturns:\n    True if documentation exists",
      "parameters": [
        {
          "name": "docs_path",
          "type": "Optional[str]",
          "default": null
        }
      ],
      "return_type": "bool",
      "complexity": 3,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "load_documentation",
      "file": "src/claude_skills/claude_skills/doc_query/doc_query_lib.py",
      "line": 1024,
      "language": "python",
      "docstring": "Convenience function to load documentation.\n\nArgs:\n    docs_path: Path to docs directory or documentation.json\n\nReturns:\n    Loaded DocumentationQuery object",
      "parameters": [
        {
          "name": "docs_path",
          "type": "Optional[str]",
          "default": null
        }
      ],
      "return_type": "DocumentationQuery",
      "complexity": 1,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "get_task_context",
      "file": "src/claude_skills/claude_skills/doc_query/sdd_integration.py",
      "line": 314,
      "language": "python",
      "docstring": "Get context for a task (convenience function).\n\nArgs:\n    task_description: Description of the task\n    docs_path: Optional path to documentation\n\nReturns:\n    Dict with task context",
      "parameters": [
        {
          "name": "task_description",
          "type": "str",
          "default": null
        },
        {
          "name": "docs_path",
          "type": "Optional[str]",
          "default": null
        }
      ],
      "return_type": "Dict[str, any]",
      "complexity": 1,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "suggest_files_for_task",
      "file": "src/claude_skills/claude_skills/doc_query/sdd_integration.py",
      "line": 329,
      "language": "python",
      "docstring": "Suggest files for a task (convenience function).\n\nArgs:\n    task_description: Description of the task\n    docs_path: Optional path to documentation\n\nReturns:\n    List of suggested file paths",
      "parameters": [
        {
          "name": "task_description",
          "type": "str",
          "default": null
        },
        {
          "name": "docs_path",
          "type": "Optional[str]",
          "default": null
        }
      ],
      "return_type": "List[str]",
      "complexity": 1,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "find_similar_implementations",
      "file": "src/claude_skills/claude_skills/doc_query/sdd_integration.py",
      "line": 344,
      "language": "python",
      "docstring": "Find similar implementations (convenience function).\n\nArgs:\n    feature_name: Feature name or pattern\n    docs_path: Optional path to documentation\n\nReturns:\n    List of similar entities",
      "parameters": [
        {
          "name": "feature_name",
          "type": "str",
          "default": null
        },
        {
          "name": "docs_path",
          "type": "Optional[str]",
          "default": null
        }
      ],
      "return_type": "List[QueryResult]",
      "complexity": 1,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "get_test_context",
      "file": "src/claude_skills/claude_skills/doc_query/sdd_integration.py",
      "line": 359,
      "language": "python",
      "docstring": "Get test context for a module (convenience function).\n\nArgs:\n    module_path: Path to the module\n    docs_path: Optional path to documentation\n\nReturns:\n    Dict with test context",
      "parameters": [
        {
          "name": "module_path",
          "type": "str",
          "default": null
        },
        {
          "name": "docs_path",
          "type": "Optional[str]",
          "default": null
        }
      ],
      "return_type": "Dict[str, any]",
      "complexity": 1,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "get_impact_analysis",
      "file": "src/claude_skills/claude_skills/doc_query/sdd_integration.py",
      "line": 374,
      "language": "python",
      "docstring": "Get impact analysis for a module (convenience function).\n\nArgs:\n    module_path: Path to the module\n    docs_path: Optional path to documentation\n\nReturns:\n    Dict with impact analysis",
      "parameters": [
        {
          "name": "module_path",
          "type": "str",
          "default": null
        },
        {
          "name": "docs_path",
          "type": "Optional[str]",
          "default": null
        }
      ],
      "return_type": "Dict[str, any]",
      "complexity": 1,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "main",
      "file": "src/claude_skills/claude_skills/doc_query/sdd_integration.py",
      "line": 389,
      "language": "python",
      "docstring": "Main CLI entry point for sdd-integration commands.",
      "parameters": [],
      "return_type": null,
      "complexity": 17,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "_dump_json",
      "file": "src/claude_skills/claude_skills/run_tests/cli.py",
      "line": 38,
      "language": "python",
      "docstring": null,
      "parameters": [
        {
          "name": "payload",
          "type": "Any",
          "default": null
        }
      ],
      "return_type": "None",
      "complexity": 1,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": false
    },
    {
      "name": "_maybe_json",
      "file": "src/claude_skills/claude_skills/run_tests/cli.py",
      "line": 43,
      "language": "python",
      "docstring": null,
      "parameters": [
        {
          "name": "args",
          "type": "argparse.Namespace",
          "default": null
        },
        {
          "name": "payload",
          "type": "Any",
          "default": null
        }
      ],
      "return_type": "bool",
      "complexity": 2,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": false
    },
    {
      "name": "cmd_check_tools",
      "file": "src/claude_skills/claude_skills/run_tests/cli.py",
      "line": 55,
      "language": "python",
      "docstring": null,
      "parameters": [
        {
          "name": "args",
          "type": "argparse.Namespace",
          "default": null
        },
        {
          "name": "printer",
          "type": "PrettyPrinter",
          "default": null
        }
      ],
      "return_type": "int",
      "complexity": 3,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "cmd_consult",
      "file": "src/claude_skills/claude_skills/run_tests/cli.py",
      "line": 67,
      "language": "python",
      "docstring": null,
      "parameters": [
        {
          "name": "args",
          "type": "argparse.Namespace",
          "default": null
        },
        {
          "name": "printer",
          "type": "PrettyPrinter",
          "default": null
        }
      ],
      "return_type": "int",
      "complexity": 15,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "cmd_discover",
      "file": "src/claude_skills/claude_skills/run_tests/cli.py",
      "line": 134,
      "language": "python",
      "docstring": null,
      "parameters": [
        {
          "name": "args",
          "type": "argparse.Namespace",
          "default": null
        },
        {
          "name": "printer",
          "type": "PrettyPrinter",
          "default": null
        }
      ],
      "return_type": "int",
      "complexity": 1,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "cmd_run",
      "file": "src/claude_skills/claude_skills/run_tests/cli.py",
      "line": 146,
      "language": "python",
      "docstring": null,
      "parameters": [
        {
          "name": "args",
          "type": "argparse.Namespace",
          "default": null
        },
        {
          "name": "printer",
          "type": "PrettyPrinter",
          "default": null
        }
      ],
      "return_type": "int",
      "complexity": 5,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "register_run_tests",
      "file": "src/claude_skills/claude_skills/run_tests/cli.py",
      "line": 172,
      "language": "python",
      "docstring": null,
      "parameters": [
        {
          "name": "subparsers",
          "type": "argparse._SubParsersAction",
          "default": null
        },
        {
          "name": "parent_parser",
          "type": "argparse.ArgumentParser",
          "default": null
        }
      ],
      "return_type": "None",
      "complexity": 2,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "load_model_config",
      "file": "src/claude_skills/claude_skills/run_tests/consultation.py",
      "line": 24,
      "language": "python",
      "docstring": "Load model configuration from config.yaml.\n\nReturns fallback to DEFAULT_MODELS if config not found or invalid.\n\nReturns:\n    Dict with model configuration including priorities and overrides",
      "parameters": [],
      "return_type": "Dict",
      "complexity": 5,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "get_model_for_tool",
      "file": "src/claude_skills/claude_skills/run_tests/consultation.py",
      "line": 53,
      "language": "python",
      "docstring": "Get the best model for a tool, considering priority and failure-type overrides.\n\nFalls back to hardcoded defaults if configuration not available.\n\nArgs:\n    tool: Tool name (gemini, codex, cursor-agent)\n    failure_type: Optional failure type for override lookup\n\nReturns:\n    Model name to use",
      "parameters": [
        {
          "name": "tool",
          "type": "str",
          "default": null
        },
        {
          "name": "failure_type",
          "type": "Optional[str]",
          "default": null
        }
      ],
      "return_type": "str",
      "complexity": 11,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "get_flags_for_tool",
      "file": "src/claude_skills/claude_skills/run_tests/consultation.py",
      "line": 91,
      "language": "python",
      "docstring": "Get additional CLI flags for a tool from configuration.\n\nArgs:\n    tool: Tool name\n\nReturns:\n    List of additional flags",
      "parameters": [
        {
          "name": "tool",
          "type": "str",
          "default": null
        }
      ],
      "return_type": "List[str]",
      "complexity": 3,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "load_consensus_config",
      "file": "src/claude_skills/claude_skills/run_tests/consultation.py",
      "line": 116,
      "language": "python",
      "docstring": "Load consensus configuration from config.yaml.\n\nReturns:\n    Dict with consensus configuration (pairs and auto_trigger)",
      "parameters": [],
      "return_type": "Dict",
      "complexity": 5,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "should_auto_trigger_consensus",
      "file": "src/claude_skills/claude_skills/run_tests/consultation.py",
      "line": 143,
      "language": "python",
      "docstring": "Check if a failure type should automatically trigger multi-agent consensus.\n\nChecks in order:\n1. Explicit entry for failure_type\n2. Default setting for undefined types\n3. Fallback to False (single-agent)\n\nArgs:\n    failure_type: Type of test failure\n\nReturns:\n    True if consensus should be auto-triggered, False otherwise",
      "parameters": [
        {
          "name": "failure_type",
          "type": "str",
          "default": null
        }
      ],
      "return_type": "bool",
      "complexity": 5,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "get_consensus_pair_for_failure",
      "file": "src/claude_skills/claude_skills/run_tests/consultation.py",
      "line": 177,
      "language": "python",
      "docstring": "Get the consensus pair to use for a specific failure type.\n\nChecks in order:\n1. Explicit entry for failure_type\n2. Default setting for undefined types\n3. Fallback to \"default\" pair\n\nArgs:\n    failure_type: Type of test failure\n\nReturns:\n    Pair name (e.g., 'default', 'code-focus', 'discovery-focus')\n    Returns 'default' if not configured",
      "parameters": [
        {
          "name": "failure_type",
          "type": "str",
          "default": null
        }
      ],
      "return_type": "str",
      "complexity": 5,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "get_consensus_pairs",
      "file": "src/claude_skills/claude_skills/run_tests/consultation.py",
      "line": 214,
      "language": "python",
      "docstring": "Get defined consensus pairs from configuration.\n\nFalls back to hardcoded MULTI_AGENT_PAIRS if not configured.\n\nReturns:\n    Dict mapping pair names to lists of tools",
      "parameters": [],
      "return_type": "Dict[str, List[str]]",
      "complexity": 3,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "get_consultation_timeout",
      "file": "src/claude_skills/claude_skills/run_tests/consultation.py",
      "line": 232,
      "language": "python",
      "docstring": "Get consultation timeout from config (default: 90 seconds).\n\nReturns:\n    Timeout in seconds",
      "parameters": [],
      "return_type": "int",
      "complexity": 5,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "_build_tool_commands",
      "file": "src/claude_skills/claude_skills/run_tests/consultation.py",
      "line": 299,
      "language": "python",
      "docstring": "Build tool command templates from configuration.\n\nArgs:\n    failure_type: Optional failure type for model override selection\n\nReturns:\n    Dict mapping tool names to command templates",
      "parameters": [
        {
          "name": "failure_type",
          "type": "Optional[str]",
          "default": null
        }
      ],
      "return_type": "Dict[str, List[str]]",
      "complexity": 1,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": false
    },
    {
      "name": "get_best_tool",
      "file": "src/claude_skills/claude_skills/run_tests/consultation.py",
      "line": 330,
      "language": "python",
      "docstring": "Get the best available tool for a given failure type.\n\nArgs:\n    failure_type: Type of test failure\n    available_tools: List of available tool names (auto-detected if None)\n\nReturns:\n    Tool name to use, or None if no tools available",
      "parameters": [
        {
          "name": "failure_type",
          "type": "str",
          "default": null
        },
        {
          "name": "available_tools",
          "type": "Optional[List[str]]",
          "default": null
        }
      ],
      "return_type": "Optional[str]",
      "complexity": 8,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "format_prompt",
      "file": "src/claude_skills/claude_skills/run_tests/consultation.py",
      "line": 363,
      "language": "python",
      "docstring": "Format a prompt for external tool consultation.\n\nArgs:\n    failure_type: Type of test failure\n    error_message: The full error message from pytest\n    hypothesis: Your hypothesis about the root cause\n    test_code: Test code snippet (optional)\n    impl_code: Implementation code snippet (optional)\n    context: Additional context (optional)\n    question: Specific question to ask (optional)\n\nReturns:\n    Formatted prompt string",
      "parameters": [
        {
          "name": "failure_type",
          "type": "str",
          "default": null
        },
        {
          "name": "error_message",
          "type": "str",
          "default": null
        },
        {
          "name": "hypothesis",
          "type": "str",
          "default": null
        },
        {
          "name": "test_code",
          "type": "Optional[str]",
          "default": null
        },
        {
          "name": "impl_code",
          "type": "Optional[str]",
          "default": null
        },
        {
          "name": "context",
          "type": "Optional[str]",
          "default": null
        },
        {
          "name": "question",
          "type": "Optional[str]",
          "default": null
        }
      ],
      "return_type": "str",
      "complexity": 6,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "read_code_file",
      "file": "src/claude_skills/claude_skills/run_tests/consultation.py",
      "line": 451,
      "language": "python",
      "docstring": "Read code from a file path.\n\nArgs:\n    file_path: Path to the file\n\nReturns:\n    File contents, or None if file doesn't exist or can't be read",
      "parameters": [
        {
          "name": "file_path",
          "type": "str",
          "default": null
        }
      ],
      "return_type": "Optional[str]",
      "complexity": 7,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "run_consultation",
      "file": "src/claude_skills/claude_skills/run_tests/consultation.py",
      "line": 489,
      "language": "python",
      "docstring": "Run the external tool consultation.\n\nArgs:\n    tool: Tool name (gemini, codex, cursor-agent)\n    prompt: Formatted prompt\n    dry_run: If True, just print the command without running\n    printer: PrettyPrinter instance (creates default if None)\n    failure_type: Optional failure type for model selection\n\nReturns:\n    Exit code from the tool",
      "parameters": [
        {
          "name": "tool",
          "type": "str",
          "default": null
        },
        {
          "name": "prompt",
          "type": "str",
          "default": null
        },
        {
          "name": "dry_run",
          "type": "bool",
          "default": null
        },
        {
          "name": "printer",
          "type": "Optional[PrettyPrinter]",
          "default": null
        },
        {
          "name": "failure_type",
          "type": "Optional[str]",
          "default": null
        }
      ],
      "return_type": "int",
      "complexity": 14,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "print_routing_matrix",
      "file": "src/claude_skills/claude_skills/run_tests/consultation.py",
      "line": 568,
      "language": "python",
      "docstring": "Print the routing matrix showing which tools to use for each failure type.\n\nArgs:\n    printer: PrettyPrinter instance (creates default if None)",
      "parameters": [
        {
          "name": "printer",
          "type": "Optional[PrettyPrinter]",
          "default": null
        }
      ],
      "return_type": "None",
      "complexity": 3,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "consult_with_auto_routing",
      "file": "src/claude_skills/claude_skills/run_tests/consultation.py",
      "line": 585,
      "language": "python",
      "docstring": "High-level consultation function with auto-routing.\n\nArgs:\n    failure_type: Type of test failure\n    error_message: Error message from pytest\n    hypothesis: Your hypothesis about the root cause\n    test_code_path: Path to test code file (optional)\n    impl_code_path: Path to implementation code file (optional)\n    context: Additional context (optional)\n    question: Specific question (optional)\n    tool: Tool to use (\"auto\" for auto-selection)\n    dry_run: If True, show command without running\n    printer: PrettyPrinter instance (creates default if None)\n\nReturns:\n    Exit code from consultation",
      "parameters": [
        {
          "name": "failure_type",
          "type": "str",
          "default": null
        },
        {
          "name": "error_message",
          "type": "str",
          "default": null
        },
        {
          "name": "hypothesis",
          "type": "str",
          "default": null
        },
        {
          "name": "test_code_path",
          "type": "Optional[str]",
          "default": null
        },
        {
          "name": "impl_code_path",
          "type": "Optional[str]",
          "default": null
        },
        {
          "name": "context",
          "type": "Optional[str]",
          "default": null
        },
        {
          "name": "question",
          "type": "Optional[str]",
          "default": null
        },
        {
          "name": "tool",
          "type": "str",
          "default": null
        },
        {
          "name": "dry_run",
          "type": "bool",
          "default": null
        },
        {
          "name": "printer",
          "type": "Optional[PrettyPrinter]",
          "default": null
        }
      ],
      "return_type": "int",
      "complexity": 10,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "run_tool_parallel",
      "file": "src/claude_skills/claude_skills/run_tests/consultation.py",
      "line": 688,
      "language": "python",
      "docstring": "Run a single tool consultation and capture output.\n\nArgs:\n    tool: Tool name (gemini, codex, cursor-agent)\n    prompt: Formatted prompt\n    failure_type: Optional failure type for model selection\n\nReturns:\n    ConsultationResponse with results",
      "parameters": [
        {
          "name": "tool",
          "type": "str",
          "default": null
        },
        {
          "name": "prompt",
          "type": "str",
          "default": null
        },
        {
          "name": "failure_type",
          "type": "Optional[str]",
          "default": null
        }
      ],
      "return_type": "ConsultationResponse",
      "complexity": 5,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "analyze_response_similarity",
      "file": "src/claude_skills/claude_skills/run_tests/consultation.py",
      "line": 759,
      "language": "python",
      "docstring": "Simple heuristic to find consensus points between two responses.\n\nArgs:\n    response1: First response text\n    response2: Second response text\n\nReturns:\n    List of consensus points (simplified)",
      "parameters": [
        {
          "name": "response1",
          "type": "str",
          "default": null
        },
        {
          "name": "response2",
          "type": "str",
          "default": null
        }
      ],
      "return_type": "List[str]",
      "complexity": 5,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "synthesize_responses",
      "file": "src/claude_skills/claude_skills/run_tests/consultation.py",
      "line": 811,
      "language": "python",
      "docstring": "Synthesize multiple consultation responses into unified insights.\n\nArgs:\n    responses: List of ConsultationResponse objects\n\nReturns:\n    Dictionary with synthesis including consensus, unique insights, etc.",
      "parameters": [
        {
          "name": "responses",
          "type": "List[ConsultationResponse]",
          "default": null
        }
      ],
      "return_type": "Dict[str, any]",
      "complexity": 6,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "format_synthesis_output",
      "file": "src/claude_skills/claude_skills/run_tests/consultation.py",
      "line": 880,
      "language": "python",
      "docstring": "Format and print the synthesis output in a structured way.\n\nArgs:\n    synthesis: Synthesis dictionary from synthesize_responses()\n    responses: List of all ConsultationResponse objects\n    printer: PrettyPrinter instance (creates default if None)",
      "parameters": [
        {
          "name": "synthesis",
          "type": "Dict[str, any]",
          "default": null
        },
        {
          "name": "responses",
          "type": "List[ConsultationResponse]",
          "default": null
        },
        {
          "name": "printer",
          "type": "Optional[PrettyPrinter]",
          "default": null
        }
      ],
      "return_type": "None",
      "complexity": 19,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "consult_multi_agent",
      "file": "src/claude_skills/claude_skills/run_tests/consultation.py",
      "line": 970,
      "language": "python",
      "docstring": "Consult multiple agents in parallel and synthesize their responses.\n\nArgs:\n    failure_type: Type of test failure\n    error_message: Error message from pytest\n    hypothesis: Your hypothesis about the root cause\n    test_code_path: Path to test code file (optional)\n    impl_code_path: Path to implementation code file (optional)\n    context: Additional context (optional)\n    question: Specific question (optional)\n    pair: Which multi-agent pair to use (default, code-focus, discovery-focus)\n    dry_run: If True, show what would be run without running\n    printer: PrettyPrinter instance (creates default if None)\n\nReturns:\n    Exit code (0 if at least one consultation succeeded)",
      "parameters": [
        {
          "name": "failure_type",
          "type": "str",
          "default": null
        },
        {
          "name": "error_message",
          "type": "str",
          "default": null
        },
        {
          "name": "hypothesis",
          "type": "str",
          "default": null
        },
        {
          "name": "test_code_path",
          "type": "Optional[str]",
          "default": null
        },
        {
          "name": "impl_code_path",
          "type": "Optional[str]",
          "default": null
        },
        {
          "name": "context",
          "type": "Optional[str]",
          "default": null
        },
        {
          "name": "question",
          "type": "Optional[str]",
          "default": null
        },
        {
          "name": "pair",
          "type": "str",
          "default": null
        },
        {
          "name": "dry_run",
          "type": "bool",
          "default": null
        },
        {
          "name": "printer",
          "type": "Optional[PrettyPrinter]",
          "default": null
        }
      ],
      "return_type": "int",
      "complexity": 14,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "_detect_source_directory",
      "file": "src/claude_skills/claude_skills/run_tests/pytest_runner.py",
      "line": 17,
      "language": "python",
      "docstring": "Auto-detect the source directory for coverage reporting.\n\nReturns:\n    Source directory path if found, None otherwise",
      "parameters": [],
      "return_type": "Optional[str]",
      "complexity": 7,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": false
    },
    {
      "name": "_get_presets",
      "file": "src/claude_skills/claude_skills/run_tests/pytest_runner.py",
      "line": 48,
      "language": "python",
      "docstring": "Get preset configurations.\n\nThe coverage preset auto-detects the source directory to avoid hard-coding.\n\nReturns:\n    Dictionary of preset configurations",
      "parameters": [],
      "return_type": "Dict[str, Dict]",
      "complexity": 2,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": false
    },
    {
      "name": "build_pytest_command",
      "file": "src/claude_skills/claude_skills/run_tests/pytest_runner.py",
      "line": 129,
      "language": "python",
      "docstring": "Build the pytest command with the specified configuration.\n\nArgs:\n    preset: Name of the preset to use\n    path: Specific test file or directory to run\n    pattern: Pattern to match test names (used with -k)\n    extra_args: Additional arguments to pass to pytest\n\nReturns:\n    List of command arguments",
      "parameters": [
        {
          "name": "preset",
          "type": "Optional[str]",
          "default": null
        },
        {
          "name": "path",
          "type": "Optional[str]",
          "default": null
        },
        {
          "name": "pattern",
          "type": "Optional[str]",
          "default": null
        },
        {
          "name": "extra_args",
          "type": "Optional[List[str]]",
          "default": null
        }
      ],
      "return_type": "List[str]",
      "complexity": 6,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "run_pytest",
      "file": "src/claude_skills/claude_skills/run_tests/pytest_runner.py",
      "line": 168,
      "language": "python",
      "docstring": "Run pytest with the specified configuration.\n\nArgs:\n    preset: Name of the preset to use\n    path: Specific test file or directory to run\n    pattern: Pattern to match test names (used with -k)\n    extra_args: Additional arguments to pass to pytest\n    printer: PrettyPrinter instance (creates default if None)\n\nReturns:\n    Exit code from pytest",
      "parameters": [
        {
          "name": "preset",
          "type": "Optional[str]",
          "default": null
        },
        {
          "name": "path",
          "type": "Optional[str]",
          "default": null
        },
        {
          "name": "pattern",
          "type": "Optional[str]",
          "default": null
        },
        {
          "name": "extra_args",
          "type": "Optional[List[str]]",
          "default": null
        },
        {
          "name": "printer",
          "type": "Optional[PrettyPrinter]",
          "default": null
        }
      ],
      "return_type": "int",
      "complexity": 8,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "get_presets",
      "file": "src/claude_skills/claude_skills/run_tests/pytest_runner.py",
      "line": 221,
      "language": "python",
      "docstring": "Get all available presets.\n\nReturns:\n    Dictionary of preset configurations",
      "parameters": [],
      "return_type": "Dict[str, Dict[str, str]]",
      "complexity": 1,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "list_presets",
      "file": "src/claude_skills/claude_skills/run_tests/pytest_runner.py",
      "line": 231,
      "language": "python",
      "docstring": "Display all available presets.\n\nArgs:\n    printer: PrettyPrinter instance (creates default if None)",
      "parameters": [
        {
          "name": "printer",
          "type": "Optional[PrettyPrinter]",
          "default": null
        }
      ],
      "return_type": "None",
      "complexity": 3,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "validate_preset",
      "file": "src/claude_skills/claude_skills/run_tests/pytest_runner.py",
      "line": 253,
      "language": "python",
      "docstring": "Check if a preset name is valid.\n\nArgs:\n    preset: Preset name to validate\n\nReturns:\n    True if valid, False otherwise",
      "parameters": [
        {
          "name": "preset",
          "type": "str",
          "default": null
        }
      ],
      "return_type": "bool",
      "complexity": 1,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "get_preset_description",
      "file": "src/claude_skills/claude_skills/run_tests/pytest_runner.py",
      "line": 266,
      "language": "python",
      "docstring": "Get description for a preset.\n\nArgs:\n    preset: Preset name\n\nReturns:\n    Description string or None if preset doesn't exist",
      "parameters": [
        {
          "name": "preset",
          "type": "str",
          "default": null
        }
      ],
      "return_type": "Optional[str]",
      "complexity": 2,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "get_preset_flags",
      "file": "src/claude_skills/claude_skills/run_tests/pytest_runner.py",
      "line": 281,
      "language": "python",
      "docstring": "Get flags for a preset.\n\nArgs:\n    preset: Preset name\n\nReturns:\n    List of flag strings or None if preset doesn't exist",
      "parameters": [
        {
          "name": "preset",
          "type": "str",
          "default": null
        }
      ],
      "return_type": "Optional[List[str]]",
      "complexity": 2,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "find_test_files",
      "file": "src/claude_skills/claude_skills/run_tests/test_discovery.py",
      "line": 18,
      "language": "python",
      "docstring": "Find all test files in the project.\n\nArgs:\n    root_dir: Root directory to search from\n\nReturns:\n    List of Path objects for test files",
      "parameters": [
        {
          "name": "root_dir",
          "type": "str",
          "default": null
        }
      ],
      "return_type": "List[Path]",
      "complexity": 2,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "find_conftest_files",
      "file": "src/claude_skills/claude_skills/run_tests/test_discovery.py",
      "line": 41,
      "language": "python",
      "docstring": "Find all conftest.py files.\n\nArgs:\n    root_dir: Root directory to search from\n\nReturns:\n    List of Path objects for conftest.py files",
      "parameters": [
        {
          "name": "root_dir",
          "type": "str",
          "default": null
        }
      ],
      "return_type": "List[Path]",
      "complexity": 1,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "analyze_test_file",
      "file": "src/claude_skills/claude_skills/run_tests/test_discovery.py",
      "line": 55,
      "language": "python",
      "docstring": "Analyze a test file for its structure.\n\nArgs:\n    file_path: Path to the test file\n\nReturns:\n    Dictionary with analysis results",
      "parameters": [
        {
          "name": "file_path",
          "type": "Path",
          "default": null
        }
      ],
      "return_type": "Dict",
      "complexity": 6,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "analyze_conftest",
      "file": "src/claude_skills/claude_skills/run_tests/test_discovery.py",
      "line": 121,
      "language": "python",
      "docstring": "Analyze a conftest.py file for fixtures and configuration.\n\nArgs:\n    file_path: Path to conftest.py file\n\nReturns:\n    Dictionary with analysis results",
      "parameters": [
        {
          "name": "file_path",
          "type": "Path",
          "default": null
        }
      ],
      "return_type": "Dict",
      "complexity": 7,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "get_directory_structure",
      "file": "src/claude_skills/claude_skills/run_tests/test_discovery.py",
      "line": 179,
      "language": "python",
      "docstring": "Build a directory structure from test files.\n\nArgs:\n    test_files: List of test file paths\n    root: Root directory path\n\nReturns:\n    Dictionary mapping directory paths to lists of file names",
      "parameters": [
        {
          "name": "test_files",
          "type": "List[Path]",
          "default": null
        },
        {
          "name": "root",
          "type": "Path",
          "default": null
        }
      ],
      "return_type": "Dict",
      "complexity": 3,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "print_tree_structure",
      "file": "src/claude_skills/claude_skills/run_tests/test_discovery.py",
      "line": 204,
      "language": "python",
      "docstring": "Print directory structure as a tree.\n\nArgs:\n    structure: Directory structure dictionary\n    indent: Indentation level",
      "parameters": [
        {
          "name": "structure",
          "type": "Dict",
          "default": null
        },
        {
          "name": "indent",
          "type": "int",
          "default": null
        }
      ],
      "return_type": null,
      "complexity": 4,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "get_summary_stats",
      "file": "src/claude_skills/claude_skills/run_tests/test_discovery.py",
      "line": 225,
      "language": "python",
      "docstring": "Get summary statistics for all test files.\n\nArgs:\n    test_files: List of test file paths\n    conftest_files: List of conftest file paths\n\nReturns:\n    Dictionary with summary statistics",
      "parameters": [
        {
          "name": "test_files",
          "type": "List[Path]",
          "default": null
        },
        {
          "name": "conftest_files",
          "type": "List[Path]",
          "default": null
        }
      ],
      "return_type": "Dict",
      "complexity": 3,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "collect_all_fixtures",
      "file": "src/claude_skills/claude_skills/run_tests/test_discovery.py",
      "line": 257,
      "language": "python",
      "docstring": "Collect all fixtures from conftest files.\n\nArgs:\n    conftest_files: List of conftest file paths\n    root: Root directory path\n\nReturns:\n    Dictionary mapping fixture names to their locations",
      "parameters": [
        {
          "name": "conftest_files",
          "type": "List[Path]",
          "default": null
        },
        {
          "name": "root",
          "type": "Path",
          "default": null
        }
      ],
      "return_type": "Dict[str, List[str]]",
      "complexity": 4,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "collect_all_markers",
      "file": "src/claude_skills/claude_skills/run_tests/test_discovery.py",
      "line": 283,
      "language": "python",
      "docstring": "Collect all markers from test files with usage counts.\n\nArgs:\n    test_files: List of test file paths\n\nReturns:\n    Dictionary mapping marker names to usage counts",
      "parameters": [
        {
          "name": "test_files",
          "type": "List[Path]",
          "default": null
        }
      ],
      "return_type": "Dict[str, int]",
      "complexity": 3,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "print_discovery_report",
      "file": "src/claude_skills/claude_skills/run_tests/test_discovery.py",
      "line": 303,
      "language": "python",
      "docstring": "Print a comprehensive discovery report.\n\nArgs:\n    root_dir: Root directory to analyze\n    show_summary: Show summary statistics only\n    show_tree: Show directory tree structure\n    show_fixtures: Show all fixtures\n    show_markers: Show all markers\n    show_detailed: Show detailed analysis of each file\n    printer: PrettyPrinter instance (creates default if None)\n\nReturns:\n    Exit code (0 for success, 1 for error)",
      "parameters": [
        {
          "name": "root_dir",
          "type": "str",
          "default": null
        },
        {
          "name": "show_summary",
          "type": "bool",
          "default": null
        },
        {
          "name": "show_tree",
          "type": "bool",
          "default": null
        },
        {
          "name": "show_fixtures",
          "type": "bool",
          "default": null
        },
        {
          "name": "show_markers",
          "type": "bool",
          "default": null
        },
        {
          "name": "show_detailed",
          "type": "bool",
          "default": null
        },
        {
          "name": "printer",
          "type": "Optional[PrettyPrinter]",
          "default": null
        }
      ],
      "return_type": "int",
      "complexity": 35,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "get_config_path",
      "file": "src/claude_skills/claude_skills/run_tests/tool_checking.py",
      "line": 37,
      "language": "python",
      "docstring": "Get the path to the config.yaml file.\n\nReturns:\n    Path to config.yaml in the skill root directory",
      "parameters": [],
      "return_type": "Path",
      "complexity": 1,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "load_tool_config",
      "file": "src/claude_skills/claude_skills/run_tests/tool_checking.py",
      "line": 49,
      "language": "python",
      "docstring": "Load tool configuration from config.yaml with fallback to defaults.\n\nReturns:\n    Dict with tool configuration",
      "parameters": [],
      "return_type": "Dict",
      "complexity": 7,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "get_enabled_tools",
      "file": "src/claude_skills/claude_skills/run_tests/tool_checking.py",
      "line": 96,
      "language": "python",
      "docstring": "Get only the enabled tools from configuration.\n\nReturns:\n    Dict with only enabled tools",
      "parameters": [],
      "return_type": "Dict",
      "complexity": 1,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "check_tool_availability",
      "file": "src/claude_skills/claude_skills/run_tests/tool_checking.py",
      "line": 111,
      "language": "python",
      "docstring": "Check which external tools are installed and enabled.\n\nOnly checks tools that are enabled in the configuration.\n\nReturns:\n    Dict mapping tool names to availability status",
      "parameters": [],
      "return_type": "Dict[str, bool]",
      "complexity": 2,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "get_available_tools",
      "file": "src/claude_skills/claude_skills/run_tests/tool_checking.py",
      "line": 130,
      "language": "python",
      "docstring": "Get list of available external tools.\n\nReturns:\n    List of tool names that are installed",
      "parameters": [],
      "return_type": "List[str]",
      "complexity": 1,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "get_missing_tools",
      "file": "src/claude_skills/claude_skills/run_tests/tool_checking.py",
      "line": 141,
      "language": "python",
      "docstring": "Get list of missing external tools.\n\nReturns:\n    List of tool names that are not installed",
      "parameters": [],
      "return_type": "List[str]",
      "complexity": 1,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "get_routing_suggestions",
      "file": "src/claude_skills/claude_skills/run_tests/tool_checking.py",
      "line": 152,
      "language": "python",
      "docstring": "Provide routing suggestions based on available tools.\n\nArgs:\n    available_tools: List of tool names that are available\n\nReturns:\n    List of suggestion strings",
      "parameters": [
        {
          "name": "available_tools",
          "type": "List[str]",
          "default": null
        }
      ],
      "return_type": "List[str]",
      "complexity": 14,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "get_quick_routing",
      "file": "src/claude_skills/claude_skills/run_tests/tool_checking.py",
      "line": 211,
      "language": "python",
      "docstring": "Get quick tool routing suggestion for a failure type.\n\nArgs:\n    failure_type: Type of test failure (assertion, exception, etc.)\n    available_tools: List of available tools (auto-detected if None)\n\nReturns:\n    Routing suggestion string",
      "parameters": [
        {
          "name": "failure_type",
          "type": "str",
          "default": null
        },
        {
          "name": "available_tools",
          "type": "Optional[List[str]]",
          "default": null
        }
      ],
      "return_type": "str",
      "complexity": 7,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "print_tool_status",
      "file": "src/claude_skills/claude_skills/run_tests/tool_checking.py",
      "line": 256,
      "language": "python",
      "docstring": "Print tool availability status to console.\n\nArgs:\n    printer: PrettyPrinter instance (creates default if None)\n    include_routing: If provided, also show routing for this failure type\n\nReturns:\n    Exit code: 0 if any tools available, 1 if none",
      "parameters": [
        {
          "name": "printer",
          "type": "Optional[PrettyPrinter]",
          "default": null
        },
        {
          "name": "include_routing",
          "type": "Optional[str]",
          "default": null
        }
      ],
      "return_type": "int",
      "complexity": 6,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "get_tool_status_dict",
      "file": "src/claude_skills/claude_skills/run_tests/tool_checking.py",
      "line": 303,
      "language": "python",
      "docstring": "Get tool status as a dictionary (for JSON output).\n\nReturns:\n    Dict with 'available' and 'missing' keys",
      "parameters": [],
      "return_type": "Dict",
      "complexity": 1,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "load_consensus_config",
      "file": "src/claude_skills/claude_skills/run_tests/tool_checking.py",
      "line": 333,
      "language": "python",
      "docstring": "Load consensus configuration from config.yaml.\n\nReturns:\n    Dict with consensus configuration",
      "parameters": [],
      "return_type": "Dict",
      "complexity": 5,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "get_auto_trigger_failures",
      "file": "src/claude_skills/claude_skills/run_tests/tool_checking.py",
      "line": 358,
      "language": "python",
      "docstring": "Get list of failure types that auto-trigger consensus.\n\nReturns:\n    List of failure type names",
      "parameters": [],
      "return_type": "List[str]",
      "complexity": 3,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "get_consensus_info",
      "file": "src/claude_skills/claude_skills/run_tests/tool_checking.py",
      "line": 378,
      "language": "python",
      "docstring": "Get consensus configuration info (for display/debugging).\n\nReturns:\n    Dict with consensus pairs and auto-trigger info",
      "parameters": [],
      "return_type": "Dict",
      "complexity": 2,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "format_execution_plan",
      "file": "src/claude_skills/claude_skills/sdd_next/cli.py",
      "line": 56,
      "language": "python",
      "docstring": "Format an execution plan for a task with proper newlines and structure.\n\nArgs:\n    spec_id: Specification ID\n    task_id: Task ID to format\n    specs_dir: Path to specs directory\n\nReturns:\n    Formatted execution plan string ready for display",
      "parameters": [
        {
          "name": "spec_id",
          "type": "str",
          "default": null
        },
        {
          "name": "task_id",
          "type": "str",
          "default": null
        },
        {
          "name": "specs_dir",
          "type": "Path",
          "default": null
        }
      ],
      "return_type": "str",
      "complexity": 39,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "cmd_verify_tools",
      "file": "src/claude_skills/claude_skills/sdd_next/cli.py",
      "line": 254,
      "language": "python",
      "docstring": "Verify required tools are available.",
      "parameters": [
        {
          "name": "args",
          "type": null,
          "default": null
        },
        {
          "name": "printer",
          "type": null,
          "default": null
        }
      ],
      "return_type": null,
      "complexity": 3,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "cmd_find_specs",
      "file": "src/claude_skills/claude_skills/sdd_next/cli.py",
      "line": 273,
      "language": "python",
      "docstring": "Find specs directories.",
      "parameters": [
        {
          "name": "args",
          "type": null,
          "default": null
        },
        {
          "name": "printer",
          "type": null,
          "default": null
        }
      ],
      "return_type": null,
      "complexity": 5,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "cmd_next_task",
      "file": "src/claude_skills/claude_skills/sdd_next/cli.py",
      "line": 296,
      "language": "python",
      "docstring": "Find next actionable task.",
      "parameters": [
        {
          "name": "args",
          "type": null,
          "default": null
        },
        {
          "name": "printer",
          "type": null,
          "default": null
        }
      ],
      "return_type": null,
      "complexity": 7,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "cmd_task_info",
      "file": "src/claude_skills/claude_skills/sdd_next/cli.py",
      "line": 337,
      "language": "python",
      "docstring": "Get detailed task information.",
      "parameters": [
        {
          "name": "args",
          "type": null,
          "default": null
        },
        {
          "name": "printer",
          "type": null,
          "default": null
        }
      ],
      "return_type": null,
      "complexity": 8,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "cmd_check_deps",
      "file": "src/claude_skills/claude_skills/sdd_next/cli.py",
      "line": 378,
      "language": "python",
      "docstring": "Check task dependencies.",
      "parameters": [
        {
          "name": "args",
          "type": null,
          "default": null
        },
        {
          "name": "printer",
          "type": null,
          "default": null
        }
      ],
      "return_type": null,
      "complexity": 12,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "cmd_progress",
      "file": "src/claude_skills/claude_skills/sdd_next/cli.py",
      "line": 425,
      "language": "python",
      "docstring": "Show overall progress.",
      "parameters": [
        {
          "name": "args",
          "type": null,
          "default": null
        },
        {
          "name": "printer",
          "type": null,
          "default": null
        }
      ],
      "return_type": null,
      "complexity": 6,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "cmd_init_env",
      "file": "src/claude_skills/claude_skills/sdd_next/cli.py",
      "line": 458,
      "language": "python",
      "docstring": "Initialize development environment.",
      "parameters": [
        {
          "name": "args",
          "type": null,
          "default": null
        },
        {
          "name": "printer",
          "type": null,
          "default": null
        }
      ],
      "return_type": null,
      "complexity": 6,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "cmd_prepare_task",
      "file": "src/claude_skills/claude_skills/sdd_next/cli.py",
      "line": 483,
      "language": "python",
      "docstring": "Prepare task for implementation.",
      "parameters": [
        {
          "name": "args",
          "type": null,
          "default": null
        },
        {
          "name": "printer",
          "type": null,
          "default": null
        }
      ],
      "return_type": null,
      "complexity": 12,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "cmd_format_plan",
      "file": "src/claude_skills/claude_skills/sdd_next/cli.py",
      "line": 530,
      "language": "python",
      "docstring": "Format execution plan for display.",
      "parameters": [
        {
          "name": "args",
          "type": null,
          "default": null
        },
        {
          "name": "printer",
          "type": null,
          "default": null
        }
      ],
      "return_type": null,
      "complexity": 3,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "cmd_validate_spec",
      "file": "src/claude_skills/claude_skills/sdd_next/cli.py",
      "line": 549,
      "language": "python",
      "docstring": "Validate spec file.",
      "parameters": [
        {
          "name": "args",
          "type": null,
          "default": null
        },
        {
          "name": "printer",
          "type": null,
          "default": null
        }
      ],
      "return_type": null,
      "complexity": 10,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "cmd_find_pattern",
      "file": "src/claude_skills/claude_skills/sdd_next/cli.py",
      "line": 586,
      "language": "python",
      "docstring": "Find files matching a pattern.",
      "parameters": [
        {
          "name": "args",
          "type": null,
          "default": null
        },
        {
          "name": "printer",
          "type": null,
          "default": null
        }
      ],
      "return_type": null,
      "complexity": 5,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "cmd_detect_project",
      "file": "src/claude_skills/claude_skills/sdd_next/cli.py",
      "line": 607,
      "language": "python",
      "docstring": "Detect project type and dependencies.",
      "parameters": [
        {
          "name": "args",
          "type": null,
          "default": null
        },
        {
          "name": "printer",
          "type": null,
          "default": null
        }
      ],
      "return_type": null,
      "complexity": 12,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "cmd_find_tests",
      "file": "src/claude_skills/claude_skills/sdd_next/cli.py",
      "line": 646,
      "language": "python",
      "docstring": "Find test files and patterns.",
      "parameters": [
        {
          "name": "args",
          "type": null,
          "default": null
        },
        {
          "name": "printer",
          "type": null,
          "default": null
        }
      ],
      "return_type": null,
      "complexity": 9,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "cmd_check_environment",
      "file": "src/claude_skills/claude_skills/sdd_next/cli.py",
      "line": 678,
      "language": "python",
      "docstring": "Check environmental requirements.",
      "parameters": [
        {
          "name": "args",
          "type": null,
          "default": null
        },
        {
          "name": "printer",
          "type": null,
          "default": null
        }
      ],
      "return_type": null,
      "complexity": 13,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "cmd_find_circular_deps",
      "file": "src/claude_skills/claude_skills/sdd_next/cli.py",
      "line": 721,
      "language": "python",
      "docstring": "Find circular dependencies in JSON spec.",
      "parameters": [
        {
          "name": "args",
          "type": null,
          "default": null
        },
        {
          "name": "printer",
          "type": null,
          "default": null
        }
      ],
      "return_type": null,
      "complexity": 11,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "cmd_find_related_files",
      "file": "src/claude_skills/claude_skills/sdd_next/cli.py",
      "line": 761,
      "language": "python",
      "docstring": "Find files related to a source file.",
      "parameters": [
        {
          "name": "args",
          "type": null,
          "default": null
        },
        {
          "name": "printer",
          "type": null,
          "default": null
        }
      ],
      "return_type": null,
      "complexity": 11,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "cmd_validate_paths",
      "file": "src/claude_skills/claude_skills/sdd_next/cli.py",
      "line": 797,
      "language": "python",
      "docstring": "Validate and normalize paths.",
      "parameters": [
        {
          "name": "args",
          "type": null,
          "default": null
        },
        {
          "name": "printer",
          "type": null,
          "default": null
        }
      ],
      "return_type": null,
      "complexity": 7,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "cmd_spec_stats",
      "file": "src/claude_skills/claude_skills/sdd_next/cli.py",
      "line": 824,
      "language": "python",
      "docstring": "Show spec file statistics.",
      "parameters": [
        {
          "name": "args",
          "type": null,
          "default": null
        },
        {
          "name": "printer",
          "type": null,
          "default": null
        }
      ],
      "return_type": null,
      "complexity": 10,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "register_next",
      "file": "src/claude_skills/claude_skills/sdd_next/cli.py",
      "line": 871,
      "language": "python",
      "docstring": "Register 'next' subcommands for unified CLI.",
      "parameters": [
        {
          "name": "subparsers",
          "type": null,
          "default": null
        },
        {
          "name": "parent_parser",
          "type": null,
          "default": null
        }
      ],
      "return_type": null,
      "complexity": 1,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "get_next_task",
      "file": "src/claude_skills/claude_skills/sdd_next/discovery.py",
      "line": 17,
      "language": "python",
      "docstring": "Find the next actionable task.\n\nArgs:\n    spec_data: JSON spec file data\n\nReturns:\n    Tuple of (task_id, task_data) or None if no task available",
      "parameters": [
        {
          "name": "spec_data",
          "type": "Dict",
          "default": null
        }
      ],
      "return_type": "Optional[Tuple[str, Dict]]",
      "complexity": 14,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "get_task_info",
      "file": "src/claude_skills/claude_skills/sdd_next/discovery.py",
      "line": 57,
      "language": "python",
      "docstring": "Get detailed information about a task.\n\nArgs:\n    spec_data: JSON spec file data\n    task_id: Task identifier\n\nReturns:\n    Task data dictionary or None",
      "parameters": [
        {
          "name": "spec_data",
          "type": "Dict",
          "default": null
        },
        {
          "name": "task_id",
          "type": "str",
          "default": null
        }
      ],
      "return_type": "Optional[Dict]",
      "complexity": 1,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "check_dependencies",
      "file": "src/claude_skills/claude_skills/sdd_next/discovery.py",
      "line": 71,
      "language": "python",
      "docstring": "Check dependency status for a task.\n\nArgs:\n    spec_data: JSON spec file data\n    task_id: Task identifier\n\nReturns:\n    Dictionary with dependency analysis",
      "parameters": [
        {
          "name": "spec_data",
          "type": "Dict",
          "default": null
        },
        {
          "name": "task_id",
          "type": "str",
          "default": null
        }
      ],
      "return_type": "Dict",
      "complexity": 8,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "prepare_task",
      "file": "src/claude_skills/claude_skills/sdd_next/discovery.py",
      "line": 137,
      "language": "python",
      "docstring": "Prepare complete context for task implementation.\n\nCombines task discovery, dependency checking, and detail extraction.\nNow includes automatic spec validation and doc-query context gathering.\n\nArgs:\n    spec_id: Specification ID\n    specs_dir: Path to specs/active directory\n    task_id: Optional task ID (auto-discovers if not provided)\n\nReturns:\n    Complete task preparation data with validation and context",
      "parameters": [
        {
          "name": "spec_id",
          "type": "str",
          "default": null
        },
        {
          "name": "specs_dir",
          "type": "Path",
          "default": null
        },
        {
          "name": "task_id",
          "type": "Optional[str]",
          "default": null
        }
      ],
      "return_type": "Dict",
      "complexity": 11,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "detect_project",
      "file": "src/claude_skills/claude_skills/sdd_next/project.py",
      "line": 13,
      "language": "python",
      "docstring": "Detect project type and extract dependencies.\n\nArgs:\n    directory: Directory to analyze (defaults to current directory)\n\nReturns:\n    Dictionary with project type, dependencies, and metadata",
      "parameters": [
        {
          "name": "directory",
          "type": "Optional[Path]",
          "default": null
        }
      ],
      "return_type": "Dict",
      "complexity": 21,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "find_tests",
      "file": "src/claude_skills/claude_skills/sdd_next/project.py",
      "line": 118,
      "language": "python",
      "docstring": "Discover test files and patterns in the project.\n\nArgs:\n    directory: Directory to search (defaults to current directory)\n    source_file: Optional source file to find corresponding test\n\nReturns:\n    Dictionary with test files, patterns, and framework detection",
      "parameters": [
        {
          "name": "directory",
          "type": "Optional[Path]",
          "default": null
        },
        {
          "name": "source_file",
          "type": "Optional[str]",
          "default": null
        }
      ],
      "return_type": "Dict",
      "complexity": 17,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "check_environment",
      "file": "src/claude_skills/claude_skills/sdd_next/project.py",
      "line": 224,
      "language": "python",
      "docstring": "Check environmental requirements and configuration.\n\nArgs:\n    directory: Directory to check (defaults to current directory)\n    required_deps: Optional list of required dependencies to check\n\nReturns:\n    Dictionary with environment validation results",
      "parameters": [
        {
          "name": "directory",
          "type": "Optional[Path]",
          "default": null
        },
        {
          "name": "required_deps",
          "type": "Optional[List[str]]",
          "default": null
        }
      ],
      "return_type": "Dict",
      "complexity": 14,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "find_related_files",
      "file": "src/claude_skills/claude_skills/sdd_next/project.py",
      "line": 303,
      "language": "python",
      "docstring": "Find files related to a given file.\n\nArgs:\n    file_path: Path to the source file\n    directory: Project directory (defaults to current directory)\n\nReturns:\n    Dictionary with categorized related files",
      "parameters": [
        {
          "name": "file_path",
          "type": "str",
          "default": null
        },
        {
          "name": "directory",
          "type": "Optional[Path]",
          "default": null
        }
      ],
      "return_type": "Dict",
      "complexity": 12,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "validate_spec",
      "file": "src/claude_skills/claude_skills/sdd_next/validation.py",
      "line": 16,
      "language": "python",
      "docstring": "Validate a JSON spec file using the shared hierarchy validator.",
      "parameters": [
        {
          "name": "spec_file",
          "type": "Path",
          "default": null
        },
        {
          "name": "specs_dir",
          "type": "Optional[Path]",
          "default": null
        }
      ],
      "return_type": "Dict",
      "complexity": 5,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "find_circular_deps",
      "file": "src/claude_skills/claude_skills/sdd_next/validation.py",
      "line": 48,
      "language": "python",
      "docstring": "Detected circular dependencies wrapper (backwards compatible).",
      "parameters": [
        {
          "name": "spec_data",
          "type": "Dict",
          "default": null
        }
      ],
      "return_type": "Dict",
      "complexity": 1,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "validate_paths",
      "file": "src/claude_skills/claude_skills/sdd_next/validation.py",
      "line": 53,
      "language": "python",
      "docstring": "Validate and normalize filesystem paths.",
      "parameters": [
        {
          "name": "paths",
          "type": "list",
          "default": null
        },
        {
          "name": "base_directory",
          "type": "Optional[Path]",
          "default": null
        }
      ],
      "return_type": "Dict",
      "complexity": 1,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "spec_stats",
      "file": "src/claude_skills/claude_skills/sdd_next/validation.py",
      "line": 58,
      "language": "python",
      "docstring": "Return statistics and metadata about a JSON spec file.",
      "parameters": [
        {
          "name": "spec_file",
          "type": "Path",
          "default": null
        },
        {
          "name": "json_spec_file",
          "type": "Optional[Path]",
          "default": null
        }
      ],
      "return_type": "Dict",
      "complexity": 15,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "init_environment",
      "file": "src/claude_skills/claude_skills/sdd_next/workflow.py",
      "line": 15,
      "language": "python",
      "docstring": "Initialize development environment with complete setup.\n\nArgs:\n    spec_path: Optional path to spec file or directory\n\nReturns:\n    Dictionary with environment paths and validation status",
      "parameters": [
        {
          "name": "spec_path",
          "type": "Optional[str]",
          "default": null
        }
      ],
      "return_type": "Dict",
      "complexity": 3,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "find_pattern",
      "file": "src/claude_skills/claude_skills/sdd_next/workflow.py",
      "line": 57,
      "language": "python",
      "docstring": "Find files matching a pattern.\n\nArgs:\n    pattern: Glob pattern (e.g., \"*.ts\", \"src/**/*.spec.ts\")\n    directory: Directory to search (defaults to current directory)\n\nReturns:\n    List of matching file paths",
      "parameters": [
        {
          "name": "pattern",
          "type": "str",
          "default": null
        },
        {
          "name": "directory",
          "type": "Optional[Path]",
          "default": null
        }
      ],
      "return_type": "List[str]",
      "complexity": 4,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "cmd_create",
      "file": "src/claude_skills/claude_skills/sdd_plan/cli.py",
      "line": 21,
      "language": "python",
      "docstring": "Create a new specification.",
      "parameters": [
        {
          "name": "args",
          "type": null,
          "default": null
        },
        {
          "name": "printer",
          "type": null,
          "default": null
        }
      ],
      "return_type": null,
      "complexity": 4,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "cmd_analyze",
      "file": "src/claude_skills/claude_skills/sdd_plan/cli.py",
      "line": 62,
      "language": "python",
      "docstring": "Analyze codebase for planning.",
      "parameters": [
        {
          "name": "args",
          "type": null,
          "default": null
        },
        {
          "name": "printer",
          "type": null,
          "default": null
        }
      ],
      "return_type": null,
      "complexity": 6,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "cmd_template",
      "file": "src/claude_skills/claude_skills/sdd_plan/cli.py",
      "line": 119,
      "language": "python",
      "docstring": "Work with spec templates.",
      "parameters": [
        {
          "name": "args",
          "type": null,
          "default": null
        },
        {
          "name": "printer",
          "type": null,
          "default": null
        }
      ],
      "return_type": null,
      "complexity": 7,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "register_plan",
      "file": "src/claude_skills/claude_skills/sdd_plan/cli.py",
      "line": 154,
      "language": "python",
      "docstring": "Register plan subcommands for unified CLI.",
      "parameters": [
        {
          "name": "subparsers",
          "type": null,
          "default": null
        },
        {
          "name": "parent_parser",
          "type": null,
          "default": null
        }
      ],
      "return_type": null,
      "complexity": 1,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "analyze_codebase",
      "file": "src/claude_skills/claude_skills/sdd_plan/planner.py",
      "line": 15,
      "language": "python",
      "docstring": "Analyze codebase using doc-query if available.\n\nArgs:\n    directory: Directory to analyze\n\nReturns:\n    Analysis results dictionary",
      "parameters": [
        {
          "name": "directory",
          "type": "Path",
          "default": null
        }
      ],
      "return_type": "Dict[str, Any]",
      "complexity": 5,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "parse_doc_query_stats",
      "file": "src/claude_skills/claude_skills/sdd_plan/planner.py",
      "line": 59,
      "language": "python",
      "docstring": "Parse doc-query stats output.\n\nArgs:\n    output: stdout from doc-query stats\n\nReturns:\n    Parsed statistics dictionary",
      "parameters": [
        {
          "name": "output",
          "type": "str",
          "default": null
        }
      ],
      "return_type": "Dict[str, Any]",
      "complexity": 5,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "create_spec_interactive",
      "file": "src/claude_skills/claude_skills/sdd_plan/planner.py",
      "line": 88,
      "language": "python",
      "docstring": "Create a new spec interactively.\n\nArgs:\n    title: Optional spec title (will prompt if not provided)\n    template: Template to use (simple, medium, complex, security)\n    specs_dir: Directory to save spec (defaults to specs/active)\n\nReturns:\n    Tuple of (success, message, spec_dict)",
      "parameters": [
        {
          "name": "title",
          "type": "Optional[str]",
          "default": null
        },
        {
          "name": "template",
          "type": "str",
          "default": null
        },
        {
          "name": "specs_dir",
          "type": "Path",
          "default": null
        }
      ],
      "return_type": "Tuple[bool, str, Optional[Dict[str, Any]]]",
      "complexity": 6,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "find_specs_directory",
      "file": "src/claude_skills/claude_skills/sdd_plan/planner.py",
      "line": 140,
      "language": "python",
      "docstring": "Find the specs directory in the project.\n\nReturns:\n    Path to specs directory or None if not found",
      "parameters": [],
      "return_type": "Optional[Path]",
      "complexity": 4,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "suggest_documentation_generation",
      "file": "src/claude_skills/claude_skills/sdd_plan/planner.py",
      "line": 158,
      "language": "python",
      "docstring": "Suggest generating documentation if not available.\n\nArgs:\n    directory: Project directory\n\nReturns:\n    Suggestion message",
      "parameters": [
        {
          "name": "directory",
          "type": "Path",
          "default": null
        }
      ],
      "return_type": "str",
      "complexity": 1,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "get_project_context",
      "file": "src/claude_skills/claude_skills/sdd_plan/planner.py",
      "line": 180,
      "language": "python",
      "docstring": "Get context about the project for planning.\n\nArgs:\n    directory: Project directory\n\nReturns:\n    Context dictionary with project info",
      "parameters": [
        {
          "name": "directory",
          "type": "Path",
          "default": null
        }
      ],
      "return_type": "Dict[str, Any]",
      "complexity": 2,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "list_templates",
      "file": "src/claude_skills/claude_skills/sdd_plan/templates.py",
      "line": 53,
      "language": "python",
      "docstring": "Get all available templates.\n\nReturns:\n    Dictionary of template_id -> template_info",
      "parameters": [],
      "return_type": "Dict[str, Dict[str, Any]]",
      "complexity": 1,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "get_template",
      "file": "src/claude_skills/claude_skills/sdd_plan/templates.py",
      "line": 63,
      "language": "python",
      "docstring": "Get a specific template by ID.\n\nArgs:\n    template_id: Template identifier (simple, medium, complex, security)\n\nReturns:\n    Template dictionary or None if not found",
      "parameters": [
        {
          "name": "template_id",
          "type": "str",
          "default": null
        }
      ],
      "return_type": "Dict[str, Any]",
      "complexity": 1,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "generate_spec_from_template",
      "file": "src/claude_skills/claude_skills/sdd_plan/templates.py",
      "line": 76,
      "language": "python",
      "docstring": "Generate a spec structure from a template.\n\nArgs:\n    template_id: Template to use\n    title: Specification title\n    spec_id: Optional spec ID (auto-generated if not provided)\n    **kwargs: Additional metadata to override template defaults\n\nReturns:\n    Spec dictionary ready to be serialized to JSON",
      "parameters": [
        {
          "name": "template_id",
          "type": "str",
          "default": null
        },
        {
          "name": "title",
          "type": "str",
          "default": null
        },
        {
          "name": "spec_id",
          "type": "str",
          "default": null
        }
      ],
      "return_type": "Dict[str, Any]",
      "complexity": 4,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "get_template_description",
      "file": "src/claude_skills/claude_skills/sdd_plan/templates.py",
      "line": 161,
      "language": "python",
      "docstring": "Get a human-readable description of a template.\n\nArgs:\n    template_id: Template identifier\n\nReturns:\n    Formatted description string",
      "parameters": [
        {
          "name": "template_id",
          "type": "str",
          "default": null
        }
      ],
      "return_type": "str",
      "complexity": 3,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "cmd_review",
      "file": "src/claude_skills/claude_skills/sdd_plan_review/cli.py",
      "line": 25,
      "language": "python",
      "docstring": "Review a specification file using multiple AI models.",
      "parameters": [
        {
          "name": "args",
          "type": null,
          "default": null
        },
        {
          "name": "printer",
          "type": null,
          "default": null
        }
      ],
      "return_type": null,
      "complexity": 17,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "cmd_list_tools",
      "file": "src/claude_skills/claude_skills/sdd_plan_review/cli.py",
      "line": 158,
      "language": "python",
      "docstring": "List available AI CLI tools.",
      "parameters": [
        {
          "name": "args",
          "type": null,
          "default": null
        },
        {
          "name": "printer",
          "type": null,
          "default": null
        }
      ],
      "return_type": null,
      "complexity": 14,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "register_plan_review",
      "file": "src/claude_skills/claude_skills/sdd_plan_review/cli.py",
      "line": 216,
      "language": "python",
      "docstring": "Register plan-review subcommands for unified CLI.",
      "parameters": [
        {
          "name": "subparsers",
          "type": null,
          "default": null
        },
        {
          "name": "parent_parser",
          "type": null,
          "default": null
        }
      ],
      "return_type": null,
      "complexity": 1,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "generate_review_prompt",
      "file": "src/claude_skills/claude_skills/sdd_plan_review/prompts.py",
      "line": 40,
      "language": "python",
      "docstring": "Generate an unbiased, critical review prompt.\n\nArgs:\n    spec_content: Full specification content\n    review_type: Type of review (quick, full, security, feasibility)\n    spec_id: Specification ID\n    title: Specification title\n\nReturns:\n    Formatted prompt string",
      "parameters": [
        {
          "name": "spec_content",
          "type": "str",
          "default": null
        },
        {
          "name": "review_type",
          "type": "str",
          "default": null
        },
        {
          "name": "spec_id",
          "type": "str",
          "default": null
        },
        {
          "name": "title",
          "type": "str",
          "default": null
        }
      ],
      "return_type": "str",
      "complexity": 4,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "_generate_full_review_prompt",
      "file": "src/claude_skills/claude_skills/sdd_plan_review/prompts.py",
      "line": 68,
      "language": "python",
      "docstring": "Generate full comprehensive review prompt.",
      "parameters": [
        {
          "name": "spec_content",
          "type": "str",
          "default": null
        },
        {
          "name": "spec_id",
          "type": "str",
          "default": null
        },
        {
          "name": "title",
          "type": "str",
          "default": null
        }
      ],
      "return_type": "str",
      "complexity": 1,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": false
    },
    {
      "name": "_generate_quick_review_prompt",
      "file": "src/claude_skills/claude_skills/sdd_plan_review/prompts.py",
      "line": 130,
      "language": "python",
      "docstring": "Generate quick review prompt focusing on completeness and clarity.",
      "parameters": [
        {
          "name": "spec_content",
          "type": "str",
          "default": null
        },
        {
          "name": "spec_id",
          "type": "str",
          "default": null
        },
        {
          "name": "title",
          "type": "str",
          "default": null
        }
      ],
      "return_type": "str",
      "complexity": 1,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": false
    },
    {
      "name": "_generate_security_review_prompt",
      "file": "src/claude_skills/claude_skills/sdd_plan_review/prompts.py",
      "line": 167,
      "language": "python",
      "docstring": "Generate security-focused review prompt.",
      "parameters": [
        {
          "name": "spec_content",
          "type": "str",
          "default": null
        },
        {
          "name": "spec_id",
          "type": "str",
          "default": null
        },
        {
          "name": "title",
          "type": "str",
          "default": null
        }
      ],
      "return_type": "str",
      "complexity": 1,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": false
    },
    {
      "name": "_generate_feasibility_review_prompt",
      "file": "src/claude_skills/claude_skills/sdd_plan_review/prompts.py",
      "line": 225,
      "language": "python",
      "docstring": "Generate feasibility-focused review prompt.",
      "parameters": [
        {
          "name": "spec_content",
          "type": "str",
          "default": null
        },
        {
          "name": "spec_id",
          "type": "str",
          "default": null
        },
        {
          "name": "title",
          "type": "str",
          "default": null
        }
      ],
      "return_type": "str",
      "complexity": 1,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": false
    },
    {
      "name": "get_stance_instruction",
      "file": "src/claude_skills/claude_skills/sdd_plan_review/prompts.py",
      "line": 275,
      "language": "python",
      "docstring": "Get stance-specific instruction for a model.\n\nArgs:\n    stance: for, against, or neutral\n\nReturns:\n    Stance instruction string",
      "parameters": [
        {
          "name": "stance",
          "type": "str",
          "default": null
        }
      ],
      "return_type": "str",
      "complexity": 3,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "generate_markdown_report",
      "file": "src/claude_skills/claude_skills/sdd_plan_review/reporting.py",
      "line": 12,
      "language": "python",
      "docstring": "Generate comprehensive markdown review report.\n\nArgs:\n    consensus: Consensus data from synthesis\n    spec_id: Specification ID\n    spec_title: Specification title\n    review_type: Type of review performed\n\nReturns:\n    Formatted markdown report",
      "parameters": [
        {
          "name": "consensus",
          "type": "Dict[str, Any]",
          "default": null
        },
        {
          "name": "spec_id",
          "type": "str",
          "default": null
        },
        {
          "name": "spec_title",
          "type": "str",
          "default": null
        },
        {
          "name": "review_type",
          "type": "str",
          "default": null
        }
      ],
      "return_type": "str",
      "complexity": 34,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "_get_recommendation_summary",
      "file": "src/claude_skills/claude_skills/sdd_plan_review/reporting.py",
      "line": 245,
      "language": "python",
      "docstring": "Get summary text for recommendation.",
      "parameters": [
        {
          "name": "consensus",
          "type": "Dict[str, Any]",
          "default": null
        },
        {
          "name": "recommendation",
          "type": "str",
          "default": null
        }
      ],
      "return_type": "str",
      "complexity": 3,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": false
    },
    {
      "name": "_get_score_assessment",
      "file": "src/claude_skills/claude_skills/sdd_plan_review/reporting.py",
      "line": 266,
      "language": "python",
      "docstring": "Get qualitative assessment for a score.",
      "parameters": [
        {
          "name": "score",
          "type": "float",
          "default": null
        }
      ],
      "return_type": "str",
      "complexity": 5,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": false
    },
    {
      "name": "_format_issue",
      "file": "src/claude_skills/claude_skills/sdd_plan_review/reporting.py",
      "line": 280,
      "language": "python",
      "docstring": "Format an issue for display.",
      "parameters": [
        {
          "name": "number",
          "type": "int",
          "default": null
        },
        {
          "name": "issue",
          "type": "Dict[str, Any]",
          "default": null
        },
        {
          "name": "brief",
          "type": "bool",
          "default": null
        }
      ],
      "return_type": "List[str]",
      "complexity": 5,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": false
    },
    {
      "name": "generate_json_report",
      "file": "src/claude_skills/claude_skills/sdd_plan_review/reporting.py",
      "line": 306,
      "language": "python",
      "docstring": "Generate JSON format review report.\n\nArgs:\n    consensus: Consensus data\n    spec_id: Specification ID\n    spec_title: Specification title\n    review_type: Review type\n\nReturns:\n    JSON-serializable report dictionary",
      "parameters": [
        {
          "name": "consensus",
          "type": "Dict[str, Any]",
          "default": null
        },
        {
          "name": "spec_id",
          "type": "str",
          "default": null
        },
        {
          "name": "spec_title",
          "type": "str",
          "default": null
        },
        {
          "name": "review_type",
          "type": "str",
          "default": null
        }
      ],
      "return_type": "Dict[str, Any]",
      "complexity": 1,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "check_tool_available",
      "file": "src/claude_skills/claude_skills/sdd_plan_review/reviewer.py",
      "line": 40,
      "language": "python",
      "docstring": "Check if an AI CLI tool is available.\n\nArgs:\n    tool_name: Name of the tool (gemini, codex, cursor-agent)\n\nReturns:\n    True if tool is available, False otherwise",
      "parameters": [
        {
          "name": "tool_name",
          "type": "str",
          "default": null
        }
      ],
      "return_type": "bool",
      "complexity": 4,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "detect_available_tools",
      "file": "src/claude_skills/claude_skills/sdd_plan_review/reviewer.py",
      "line": 78,
      "language": "python",
      "docstring": "Detect which AI CLI tools are installed and available.\n\nReturns:\n    List of available tool names",
      "parameters": [],
      "return_type": "List[str]",
      "complexity": 3,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "call_tool",
      "file": "src/claude_skills/claude_skills/sdd_plan_review/reviewer.py",
      "line": 92,
      "language": "python",
      "docstring": "Call an AI CLI tool with a prompt.\n\nArgs:\n    tool_name: Name of tool to call\n    prompt: Prompt to send\n    timeout: Optional timeout override\n\nReturns:\n    Result dictionary with success, output, error",
      "parameters": [
        {
          "name": "tool_name",
          "type": "str",
          "default": null
        },
        {
          "name": "prompt",
          "type": "str",
          "default": null
        },
        {
          "name": "timeout",
          "type": "Optional[int]",
          "default": null
        }
      ],
      "return_type": "Dict[str, Any]",
      "complexity": 8,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "review_with_tools",
      "file": "src/claude_skills/claude_skills/sdd_plan_review/reviewer.py",
      "line": 191,
      "language": "python",
      "docstring": "Review a spec using multiple AI tools with full synthesis.\n\nArgs:\n    spec_content: Specification content to review\n    tools: List of tool names to use\n    review_type: Type of review (quick, full, security, feasibility)\n    spec_id: Specification ID\n    spec_title: Specification title\n    parallel: Run tools in parallel (vs sequential)\n\nReturns:\n    Review results with parsed responses and consensus",
      "parameters": [
        {
          "name": "spec_content",
          "type": "str",
          "default": null
        },
        {
          "name": "tools",
          "type": "List[str]",
          "default": null
        },
        {
          "name": "review_type",
          "type": "str",
          "default": null
        },
        {
          "name": "spec_id",
          "type": "str",
          "default": null
        },
        {
          "name": "spec_title",
          "type": "str",
          "default": null
        },
        {
          "name": "parallel",
          "type": "bool",
          "default": null
        }
      ],
      "return_type": "Dict[str, Any]",
      "complexity": 12,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "parse_response",
      "file": "src/claude_skills/claude_skills/sdd_plan_review/synthesis.py",
      "line": 15,
      "language": "python",
      "docstring": "Parse AI tool response into structured format.\n\nTries multiple parsing strategies:\n1. Extract JSON from code blocks\n2. Extract JSON from raw text\n3. Regex extraction of key fields\n4. Return error with raw output\n\nArgs:\n    tool_output: Raw output from AI tool\n    tool_name: Name of the tool for logging\n\nReturns:\n    Parsed response dictionary",
      "parameters": [
        {
          "name": "tool_output",
          "type": "str",
          "default": null
        },
        {
          "name": "tool_name",
          "type": "str",
          "default": null
        }
      ],
      "return_type": "Dict[str, Any]",
      "complexity": 9,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "extract_with_regex",
      "file": "src/claude_skills/claude_skills/sdd_plan_review/synthesis.py",
      "line": 80,
      "language": "python",
      "docstring": "Extract structured data using regex patterns.\n\nArgs:\n    text: Raw text to parse\n\nReturns:\n    Extracted data dictionary or None",
      "parameters": [
        {
          "name": "text",
          "type": "str",
          "default": null
        }
      ],
      "return_type": "Optional[Dict[str, Any]]",
      "complexity": 4,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "normalize_response",
      "file": "src/claude_skills/claude_skills/sdd_plan_review/synthesis.py",
      "line": 116,
      "language": "python",
      "docstring": "Normalize and validate response data.\n\nArgs:\n    data: Raw parsed data\n    tool_name: Tool name for context\n\nReturns:\n    Normalized response",
      "parameters": [
        {
          "name": "data",
          "type": "Dict[str, Any]",
          "default": null
        },
        {
          "name": "tool_name",
          "type": "str",
          "default": null
        }
      ],
      "return_type": "Dict[str, Any]",
      "complexity": 22,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "normalize_severity",
      "file": "src/claude_skills/claude_skills/sdd_plan_review/synthesis.py",
      "line": 192,
      "language": "python",
      "docstring": "Normalize severity to standard values.",
      "parameters": [
        {
          "name": "severity",
          "type": "str",
          "default": null
        }
      ],
      "return_type": "str",
      "complexity": 8,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "build_consensus",
      "file": "src/claude_skills/claude_skills/sdd_plan_review/synthesis.py",
      "line": 208,
      "language": "python",
      "docstring": "Build consensus from multiple model responses.\n\nArgs:\n    responses: List of normalized response dictionaries\n\nReturns:\n    Consensus dictionary with aggregated scores and recommendations",
      "parameters": [
        {
          "name": "responses",
          "type": "List[Dict[str, Any]]",
          "default": null
        }
      ],
      "return_type": "Dict[str, Any]",
      "complexity": 15,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "aggregate_issues",
      "file": "src/claude_skills/claude_skills/sdd_plan_review/synthesis.py",
      "line": 308,
      "language": "python",
      "docstring": "Aggregate and deduplicate issues from all models.\n\nArgs:\n    responses: List of model responses\n\nReturns:\n    Deduplicated list of issues with model attribution",
      "parameters": [
        {
          "name": "responses",
          "type": "List[Dict[str, Any]]",
          "default": null
        }
      ],
      "return_type": "List[Dict[str, Any]]",
      "complexity": 4,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "calculate_consensus_level",
      "file": "src/claude_skills/claude_skills/sdd_plan_review/synthesis.py",
      "line": 347,
      "language": "python",
      "docstring": "Calculate consensus level based on score variance.\n\nArgs:\n    responses: List of model responses\n\nReturns:\n    Consensus level string",
      "parameters": [
        {
          "name": "responses",
          "type": "List[Dict[str, Any]]",
          "default": null
        }
      ],
      "return_type": "str",
      "complexity": 5,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "identify_agreements",
      "file": "src/claude_skills/claude_skills/sdd_plan_review/synthesis.py",
      "line": 378,
      "language": "python",
      "docstring": "Identify points of agreement and disagreement.\n\nArgs:\n    responses: List of model responses\n\nReturns:\n    Tuple of (agreements list, disagreements list)",
      "parameters": [
        {
          "name": "responses",
          "type": "List[Dict[str, Any]]",
          "default": null
        }
      ],
      "return_type": "Tuple[List[str], List[Dict[str, Any]]]",
      "complexity": 6,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "cmd_execute_verify",
      "file": "src/claude_skills/claude_skills/sdd_update/cli.py",
      "line": 48,
      "language": "python",
      "docstring": "Execute a verification task automatically (Priority 1 Integration).",
      "parameters": [
        {
          "name": "args",
          "type": null,
          "default": null
        },
        {
          "name": "printer",
          "type": null,
          "default": null
        }
      ],
      "return_type": null,
      "complexity": 28,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "cmd_update_status",
      "file": "src/claude_skills/claude_skills/sdd_update/cli.py",
      "line": 155,
      "language": "python",
      "docstring": "Update task status.",
      "parameters": [
        {
          "name": "args",
          "type": null,
          "default": null
        },
        {
          "name": "printer",
          "type": null,
          "default": null
        }
      ],
      "return_type": null,
      "complexity": 2,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "cmd_mark_blocked",
      "file": "src/claude_skills/claude_skills/sdd_update/cli.py",
      "line": 178,
      "language": "python",
      "docstring": "Mark task as blocked.",
      "parameters": [
        {
          "name": "args",
          "type": null,
          "default": null
        },
        {
          "name": "printer",
          "type": null,
          "default": null
        }
      ],
      "return_type": null,
      "complexity": 2,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "cmd_unblock_task",
      "file": "src/claude_skills/claude_skills/sdd_update/cli.py",
      "line": 201,
      "language": "python",
      "docstring": "Unblock a task.",
      "parameters": [
        {
          "name": "args",
          "type": null,
          "default": null
        },
        {
          "name": "printer",
          "type": null,
          "default": null
        }
      ],
      "return_type": null,
      "complexity": 2,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "cmd_add_journal",
      "file": "src/claude_skills/claude_skills/sdd_update/cli.py",
      "line": 222,
      "language": "python",
      "docstring": "Add journal entry.",
      "parameters": [
        {
          "name": "args",
          "type": null,
          "default": null
        },
        {
          "name": "printer",
          "type": null,
          "default": null
        }
      ],
      "return_type": null,
      "complexity": 2,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "cmd_add_revision",
      "file": "src/claude_skills/claude_skills/sdd_update/cli.py",
      "line": 246,
      "language": "python",
      "docstring": "Add revision entry.",
      "parameters": [
        {
          "name": "args",
          "type": null,
          "default": null
        },
        {
          "name": "printer",
          "type": null,
          "default": null
        }
      ],
      "return_type": null,
      "complexity": 2,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "cmd_update_frontmatter",
      "file": "src/claude_skills/claude_skills/sdd_update/cli.py",
      "line": 268,
      "language": "python",
      "docstring": "Update metadata field in JSON spec.",
      "parameters": [
        {
          "name": "args",
          "type": null,
          "default": null
        },
        {
          "name": "printer",
          "type": null,
          "default": null
        }
      ],
      "return_type": null,
      "complexity": 1,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "cmd_add_verification",
      "file": "src/claude_skills/claude_skills/sdd_update/cli.py",
      "line": 292,
      "language": "python",
      "docstring": "Add verification result.",
      "parameters": [
        {
          "name": "args",
          "type": null,
          "default": null
        },
        {
          "name": "printer",
          "type": null,
          "default": null
        }
      ],
      "return_type": null,
      "complexity": 2,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "cmd_format_verification_summary",
      "file": "src/claude_skills/claude_skills/sdd_update/cli.py",
      "line": 317,
      "language": "python",
      "docstring": "Format verification results summary.",
      "parameters": [
        {
          "name": "args",
          "type": null,
          "default": null
        },
        {
          "name": "printer",
          "type": null,
          "default": null
        }
      ],
      "return_type": null,
      "complexity": 6,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "cmd_move_spec",
      "file": "src/claude_skills/claude_skills/sdd_update/cli.py",
      "line": 350,
      "language": "python",
      "docstring": "Move spec to another folder.",
      "parameters": [
        {
          "name": "args",
          "type": null,
          "default": null
        },
        {
          "name": "printer",
          "type": null,
          "default": null
        }
      ],
      "return_type": null,
      "complexity": 1,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "cmd_complete_spec",
      "file": "src/claude_skills/claude_skills/sdd_update/cli.py",
      "line": 366,
      "language": "python",
      "docstring": "Mark spec as completed and move to completed folder.",
      "parameters": [
        {
          "name": "args",
          "type": null,
          "default": null
        },
        {
          "name": "printer",
          "type": null,
          "default": null
        }
      ],
      "return_type": null,
      "complexity": 2,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "cmd_track_time",
      "file": "src/claude_skills/claude_skills/sdd_update/cli.py",
      "line": 389,
      "language": "python",
      "docstring": "Track time spent on task.",
      "parameters": [
        {
          "name": "args",
          "type": null,
          "default": null
        },
        {
          "name": "printer",
          "type": null,
          "default": null
        }
      ],
      "return_type": null,
      "complexity": 2,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "cmd_time_report",
      "file": "src/claude_skills/claude_skills/sdd_update/cli.py",
      "line": 410,
      "language": "python",
      "docstring": "Generate time tracking report.",
      "parameters": [
        {
          "name": "args",
          "type": null,
          "default": null
        },
        {
          "name": "printer",
          "type": null,
          "default": null
        }
      ],
      "return_type": null,
      "complexity": 5,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "cmd_status_report",
      "file": "src/claude_skills/claude_skills/sdd_update/cli.py",
      "line": 434,
      "language": "python",
      "docstring": "Get status report.",
      "parameters": [
        {
          "name": "args",
          "type": null,
          "default": null
        },
        {
          "name": "printer",
          "type": null,
          "default": null
        }
      ],
      "return_type": null,
      "complexity": 5,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "cmd_audit_spec",
      "file": "src/claude_skills/claude_skills/sdd_update/cli.py",
      "line": 456,
      "language": "python",
      "docstring": "Perform deep audit of JSON spec.",
      "parameters": [
        {
          "name": "args",
          "type": null,
          "default": null
        },
        {
          "name": "printer",
          "type": null,
          "default": null
        }
      ],
      "return_type": null,
      "complexity": 4,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "cmd_query_tasks",
      "file": "src/claude_skills/claude_skills/sdd_update/cli.py",
      "line": 478,
      "language": "python",
      "docstring": "Query and filter tasks.",
      "parameters": [
        {
          "name": "args",
          "type": null,
          "default": null
        },
        {
          "name": "printer",
          "type": null,
          "default": null
        }
      ],
      "return_type": null,
      "complexity": 10,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "cmd_get_task",
      "file": "src/claude_skills/claude_skills/sdd_update/cli.py",
      "line": 511,
      "language": "python",
      "docstring": "Get detailed task information.",
      "parameters": [
        {
          "name": "args",
          "type": null,
          "default": null
        },
        {
          "name": "printer",
          "type": null,
          "default": null
        }
      ],
      "return_type": null,
      "complexity": 5,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "cmd_list_phases",
      "file": "src/claude_skills/claude_skills/sdd_update/cli.py",
      "line": 534,
      "language": "python",
      "docstring": "List all phases.",
      "parameters": [
        {
          "name": "args",
          "type": null,
          "default": null
        },
        {
          "name": "printer",
          "type": null,
          "default": null
        }
      ],
      "return_type": null,
      "complexity": 5,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "cmd_check_complete",
      "file": "src/claude_skills/claude_skills/sdd_update/cli.py",
      "line": 556,
      "language": "python",
      "docstring": "Check if spec or phase is ready to complete.",
      "parameters": [
        {
          "name": "args",
          "type": null,
          "default": null
        },
        {
          "name": "printer",
          "type": null,
          "default": null
        }
      ],
      "return_type": null,
      "complexity": 4,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "cmd_phase_time",
      "file": "src/claude_skills/claude_skills/sdd_update/cli.py",
      "line": 579,
      "language": "python",
      "docstring": "Calculate time for a phase.",
      "parameters": [
        {
          "name": "args",
          "type": null,
          "default": null
        },
        {
          "name": "printer",
          "type": null,
          "default": null
        }
      ],
      "return_type": null,
      "complexity": 5,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "cmd_list_blockers",
      "file": "src/claude_skills/claude_skills/sdd_update/cli.py",
      "line": 602,
      "language": "python",
      "docstring": "List all blocked tasks.",
      "parameters": [
        {
          "name": "args",
          "type": null,
          "default": null
        },
        {
          "name": "printer",
          "type": null,
          "default": null
        }
      ],
      "return_type": null,
      "complexity": 5,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "cmd_reconcile_state",
      "file": "src/claude_skills/claude_skills/sdd_update/cli.py",
      "line": 624,
      "language": "python",
      "docstring": "Reconcile JSON spec to fix inconsistent task statuses.",
      "parameters": [
        {
          "name": "args",
          "type": null,
          "default": null
        },
        {
          "name": "printer",
          "type": null,
          "default": null
        }
      ],
      "return_type": null,
      "complexity": 2,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "cmd_check_journaling",
      "file": "src/claude_skills/claude_skills/sdd_update/cli.py",
      "line": 643,
      "language": "python",
      "docstring": "Check for unjournaled completed tasks.",
      "parameters": [
        {
          "name": "args",
          "type": null,
          "default": null
        },
        {
          "name": "printer",
          "type": null,
          "default": null
        }
      ],
      "return_type": null,
      "complexity": 7,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "cmd_bulk_journal",
      "file": "src/claude_skills/claude_skills/sdd_update/cli.py",
      "line": 682,
      "language": "python",
      "docstring": "Bulk journal completed tasks.",
      "parameters": [
        {
          "name": "args",
          "type": null,
          "default": null
        },
        {
          "name": "printer",
          "type": null,
          "default": null
        }
      ],
      "return_type": null,
      "complexity": 3,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "cmd_complete_task",
      "file": "src/claude_skills/claude_skills/sdd_update/cli.py",
      "line": 709,
      "language": "python",
      "docstring": "Complete task workflow (status, journaling, metadata sync).",
      "parameters": [
        {
          "name": "args",
          "type": null,
          "default": null
        },
        {
          "name": "printer",
          "type": null,
          "default": null
        }
      ],
      "return_type": null,
      "complexity": 5,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "cmd_sync_metadata",
      "file": "src/claude_skills/claude_skills/sdd_update/cli.py",
      "line": 743,
      "language": "python",
      "docstring": "Synchronize spec metadata with hierarchy data.",
      "parameters": [
        {
          "name": "args",
          "type": null,
          "default": null
        },
        {
          "name": "printer",
          "type": null,
          "default": null
        }
      ],
      "return_type": null,
      "complexity": 2,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "register_update",
      "file": "src/claude_skills/claude_skills/sdd_update/cli.py",
      "line": 762,
      "language": "python",
      "docstring": "Register 'update' subcommands for unified CLI.\n\nArgs:\n    subparsers: The subparsers object to add commands to\n    parent_parser: Parent parser with global options (--json, --quiet, --verbose, etc.)",
      "parameters": [
        {
          "name": "subparsers",
          "type": null,
          "default": null
        },
        {
          "name": "parent_parser",
          "type": null,
          "default": null
        }
      ],
      "return_type": null,
      "complexity": 1,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "mark_task_journaled",
      "file": "src/claude_skills/claude_skills/sdd_update/journal.py",
      "line": 24,
      "language": "python",
      "docstring": "Mark a task as journaled by clearing the needs_journaling flag.\n\nCalled automatically when add_journal_entry() includes a task_id.\n\nArgs:\n    spec_id: Specification ID\n    task_id: Task identifier\n    specs_dir: Path to specs directory\n    printer: Optional printer for output\n\nReturns:\n    True if successful, False otherwise",
      "parameters": [
        {
          "name": "spec_id",
          "type": "str",
          "default": null
        },
        {
          "name": "task_id",
          "type": "str",
          "default": null
        },
        {
          "name": "specs_dir",
          "type": "Path",
          "default": null
        },
        {
          "name": "printer",
          "type": "Optional[PrettyPrinter]",
          "default": null
        }
      ],
      "return_type": "bool",
      "complexity": 9,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "_build_journal_entry",
      "file": "src/claude_skills/claude_skills/sdd_update/journal.py",
      "line": 88,
      "language": "python",
      "docstring": "Construct a journal entry payload and return entry plus timestamp.",
      "parameters": [
        {
          "name": "title",
          "type": "str",
          "default": null
        },
        {
          "name": "content",
          "type": "str",
          "default": null
        },
        {
          "name": "entry_type",
          "type": "str",
          "default": null
        },
        {
          "name": "author",
          "type": "str",
          "default": null
        },
        {
          "name": "task_id",
          "type": "Optional[str]",
          "default": null
        }
      ],
      "return_type": "Tuple[Dict[str, Any], str]",
      "complexity": 2,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": false
    },
    {
      "name": "_ensure_journal_container",
      "file": "src/claude_skills/claude_skills/sdd_update/journal.py",
      "line": 114,
      "language": "python",
      "docstring": "Ensure spec_data has a journal container.",
      "parameters": [
        {
          "name": "spec_data",
          "type": "Dict[str, Any]",
          "default": null
        }
      ],
      "return_type": "None",
      "complexity": 3,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": false
    },
    {
      "name": "add_journal_entry",
      "file": "src/claude_skills/claude_skills/sdd_update/journal.py",
      "line": 120,
      "language": "python",
      "docstring": "Add an entry to the journal array in the JSON spec file.\n\nArgs:\n    spec_id: Specification ID\n    title: Entry title (e.g., \"Task 1-2 Started\", \"Blocker: Redis Dependency\")\n    content: Entry content (plain text)\n    task_id: Optional task ID to reference\n    entry_type: Type of entry (status_change, deviation, blocker, decision, note)\n    author: Author of the entry (default: claude-code)\n    specs_dir: Optional specs directory (auto-detected if not provided)\n    dry_run: If True, show entry without writing\n    printer: Optional printer for output\n\nReturns:\n    True if successful, False otherwise",
      "parameters": [
        {
          "name": "spec_id",
          "type": "str",
          "default": null
        },
        {
          "name": "title",
          "type": "str",
          "default": null
        },
        {
          "name": "content",
          "type": "str",
          "default": null
        },
        {
          "name": "task_id",
          "type": "Optional[str]",
          "default": null
        },
        {
          "name": "entry_type",
          "type": "str",
          "default": null
        },
        {
          "name": "author",
          "type": "str",
          "default": null
        },
        {
          "name": "specs_dir",
          "type": "Optional[Path]",
          "default": null
        },
        {
          "name": "dry_run",
          "type": "bool",
          "default": null
        },
        {
          "name": "printer",
          "type": "Optional[PrettyPrinter]",
          "default": null
        }
      ],
      "return_type": "bool",
      "complexity": 10,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "update_metadata",
      "file": "src/claude_skills/claude_skills/sdd_update/journal.py",
      "line": 210,
      "language": "python",
      "docstring": "Update a single field in the JSON spec metadata.\n\nArgs:\n    spec_id: Specification ID\n    key: Metadata key to update\n    value: New value (can be string, int, list, dict, etc.)\n    specs_dir: Optional specs directory (auto-detected if not provided)\n    dry_run: If True, show change without writing\n    printer: Optional printer for output\n\nReturns:\n    True if successful, False otherwise",
      "parameters": [
        {
          "name": "spec_id",
          "type": "str",
          "default": null
        },
        {
          "name": "key",
          "type": "str",
          "default": null
        },
        {
          "name": "value",
          "type": "Any",
          "default": null
        },
        {
          "name": "specs_dir",
          "type": "Optional[Path]",
          "default": null
        },
        {
          "name": "dry_run",
          "type": "bool",
          "default": null
        },
        {
          "name": "printer",
          "type": "Optional[PrettyPrinter]",
          "default": null
        }
      ],
      "return_type": "bool",
      "complexity": 9,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "add_revision_entry",
      "file": "src/claude_skills/claude_skills/sdd_update/journal.py",
      "line": 281,
      "language": "python",
      "docstring": "Add a revision entry to the JSON spec metadata.revisions array.\n\nArgs:\n    spec_id: Specification ID\n    version: Version string (e.g., \"1.1\", \"2.0\")\n    changes: Description of changes\n    author: Author of the changes\n    specs_dir: Optional specs directory (auto-detected if not provided)\n    dry_run: If True, show entry without writing\n    printer: Optional printer for output\n\nReturns:\n    True if successful, False otherwise",
      "parameters": [
        {
          "name": "spec_id",
          "type": "str",
          "default": null
        },
        {
          "name": "version",
          "type": "str",
          "default": null
        },
        {
          "name": "changes",
          "type": "str",
          "default": null
        },
        {
          "name": "author",
          "type": "str",
          "default": null
        },
        {
          "name": "specs_dir",
          "type": "Optional[Path]",
          "default": null
        },
        {
          "name": "dry_run",
          "type": "bool",
          "default": null
        },
        {
          "name": "printer",
          "type": "Optional[PrettyPrinter]",
          "default": null
        }
      ],
      "return_type": "bool",
      "complexity": 10,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "_render_template",
      "file": "src/claude_skills/claude_skills/sdd_update/journal.py",
      "line": 375,
      "language": "python",
      "docstring": "Render a journal template using string.Template.",
      "parameters": [
        {
          "name": "template_name",
          "type": "str",
          "default": null
        },
        {
          "name": "context",
          "type": "Dict[str, Any]",
          "default": null
        }
      ],
      "return_type": "str",
      "complexity": 2,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": false
    },
    {
      "name": "bulk_journal_tasks",
      "file": "src/claude_skills/claude_skills/sdd_update/journal.py",
      "line": 386,
      "language": "python",
      "docstring": "Add journal entries for multiple completed tasks at once.\n\nGenerates a journal entry for each task with:\n- Task ID and title\n- Completion timestamp\n- Status change note\n\nArgs:\n    spec_id: Specification ID\n    specs_dir: Optional specs directory (auto-detected if not provided)\n    task_ids: List of task IDs to journal (if None, journals all unjournaled tasks)\n    dry_run: If True, show entries without writing\n    printer: Optional printer for output\n\nReturns:\n    True if successful, False otherwise",
      "parameters": [
        {
          "name": "spec_id",
          "type": "str",
          "default": null
        },
        {
          "name": "specs_dir",
          "type": "Optional[Path]",
          "default": null
        },
        {
          "name": "task_ids",
          "type": "Optional[List[str]]",
          "default": null
        },
        {
          "name": "dry_run",
          "type": "bool",
          "default": null
        },
        {
          "name": "printer",
          "type": "Optional[PrettyPrinter]",
          "default": null
        }
      ],
      "return_type": "bool",
      "complexity": 21,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "sync_metadata_from_state",
      "file": "src/claude_skills/claude_skills/sdd_update/journal.py",
      "line": 537,
      "language": "python",
      "docstring": "Automatically synchronize JSON metadata with hierarchy data.\n\nUpdates:\n- last_updated: Current timestamp\n- progress_percentage: Calculated from hierarchy\n- status: \"completed\" when all tasks done, otherwise \"active\"\n- current_phase: ID of first in-progress phase\n\nArgs:\n    spec_id: Specification ID\n    specs_dir: Optional specs directory (auto-detected if not provided)\n    dry_run: If True, show changes without writing\n    printer: Optional printer for output\n\nReturns:\n    True if successful, False otherwise",
      "parameters": [
        {
          "name": "spec_id",
          "type": "str",
          "default": null
        },
        {
          "name": "specs_dir",
          "type": "Optional[Path]",
          "default": null
        },
        {
          "name": "dry_run",
          "type": "bool",
          "default": null
        },
        {
          "name": "printer",
          "type": "Optional[PrettyPrinter]",
          "default": null
        }
      ],
      "return_type": "bool",
      "complexity": 21,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "move_spec",
      "file": "src/claude_skills/claude_skills/sdd_update/lifecycle.py",
      "line": 18,
      "language": "python",
      "docstring": "Move a spec file between lifecycle folders.\n\nArgs:\n    spec_file: Path to current spec file\n    target_folder: Target folder name (active, completed, archived)\n    dry_run: If True, show move without executing\n    printer: Optional printer for output\n\nReturns:\n    True if successful, False otherwise",
      "parameters": [
        {
          "name": "spec_file",
          "type": "Path",
          "default": null
        },
        {
          "name": "target_folder",
          "type": "str",
          "default": null
        },
        {
          "name": "dry_run",
          "type": "bool",
          "default": null
        },
        {
          "name": "printer",
          "type": "Optional[PrettyPrinter]",
          "default": null
        }
      ],
      "return_type": "bool",
      "complexity": 8,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "complete_spec",
      "file": "src/claude_skills/claude_skills/sdd_update/lifecycle.py",
      "line": 80,
      "language": "python",
      "docstring": "Mark a spec as completed and move it to completed folder.\n\nPerforms the following:\n1. Verifies all tasks are completed\n2. Updates JSON metadata (status, completed_date, actual_hours)\n3. Moves JSON spec file to completed/ folder\n\nArgs:\n    spec_id: Specification ID\n    spec_file: Path to JSON spec file\n    specs_dir: Path to specs directory\n    actual_hours: Optional actual hours spent\n    dry_run: If True, show changes without executing\n    printer: Optional printer for output\n\nReturns:\n    True if successful, False otherwise",
      "parameters": [
        {
          "name": "spec_id",
          "type": "str",
          "default": null
        },
        {
          "name": "spec_file",
          "type": "Path",
          "default": null
        },
        {
          "name": "specs_dir",
          "type": "Path",
          "default": null
        },
        {
          "name": "actual_hours",
          "type": "Optional[float]",
          "default": null
        },
        {
          "name": "dry_run",
          "type": "bool",
          "default": null
        },
        {
          "name": "printer",
          "type": "Optional[PrettyPrinter]",
          "default": null
        }
      ],
      "return_type": "bool",
      "complexity": 15,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "phase_time",
      "file": "src/claude_skills/claude_skills/sdd_update/query.py",
      "line": 35,
      "language": "python",
      "docstring": "Calculate time spent on a specific phase.\n\nThis is a time-tracking specific operation that remains in sdd-update.\n\nArgs:\n    spec_id: Specification ID\n    phase_id: Phase ID to calculate time for\n    specs_dir: Path to specs directory\n    printer: Optional printer for output\n\nReturns:\n    Dictionary with time breakdown, or None on error",
      "parameters": [
        {
          "name": "spec_id",
          "type": "str",
          "default": null
        },
        {
          "name": "phase_id",
          "type": "str",
          "default": null
        },
        {
          "name": "specs_dir",
          "type": "Path",
          "default": null
        },
        {
          "name": "printer",
          "type": "Optional[PrettyPrinter]",
          "default": null
        }
      ],
      "return_type": "Optional[Dict]",
      "complexity": 14,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "find_verify_tasks_for_task",
      "file": "src/claude_skills/claude_skills/sdd_update/status.py",
      "line": 17,
      "language": "python",
      "docstring": "Find all verify tasks associated with a given task.\n\nVerify tasks are identified by:\n1. Having type=\"verify\"\n2. Being a sibling or child of the task (same parent or task is parent)\n3. Having an ID pattern like verify-X-Y where X matches task-X-Y\n\nArgs:\n    spec_data: Loaded JSON spec data\n    task_id: Task ID to find verify tasks for (e.g., \"task-1-1\")\n\nReturns:\n    List of verify task IDs",
      "parameters": [
        {
          "name": "spec_data",
          "type": "dict",
          "default": null
        },
        {
          "name": "task_id",
          "type": "str",
          "default": null
        }
      ],
      "return_type": "List[str]",
      "complexity": 5,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "update_task_status",
      "file": "src/claude_skills/claude_skills/sdd_update/status.py",
      "line": 52,
      "language": "python",
      "docstring": "Update a task's status with automatic progress recalculation.\n\nArgs:\n    spec_id: Specification ID\n    task_id: Task identifier\n    new_status: New status (pending, in_progress, completed, blocked)\n    specs_dir: Path to specs/active directory\n    note: Optional note about the status change\n    dry_run: If True, don't save changes\n    verify: If True and new_status is 'completed', run associated verify tasks\n    printer: Optional printer for output\n\nReturns:\n    True if successful, False otherwise",
      "parameters": [
        {
          "name": "spec_id",
          "type": "str",
          "default": null
        },
        {
          "name": "task_id",
          "type": "str",
          "default": null
        },
        {
          "name": "new_status",
          "type": "str",
          "default": null
        },
        {
          "name": "specs_dir",
          "type": "Path",
          "default": null
        },
        {
          "name": "note",
          "type": "Optional[str]",
          "default": null
        },
        {
          "name": "dry_run",
          "type": "bool",
          "default": null
        },
        {
          "name": "verify",
          "type": "bool",
          "default": null
        },
        {
          "name": "printer",
          "type": "Optional[PrettyPrinter]",
          "default": null
        }
      ],
      "return_type": "bool",
      "complexity": 37,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "mark_task_blocked",
      "file": "src/claude_skills/claude_skills/sdd_update/status.py",
      "line": 259,
      "language": "python",
      "docstring": "Mark a task as blocked with detailed blocker information.\n\nArgs:\n    spec_id: Specification ID\n    task_id: Task identifier\n    reason: Description of why task is blocked\n    specs_dir: Path to specs/active directory\n    blocker_type: Type of blocker (dependency, technical, resource, decision)\n    ticket: Optional ticket/issue reference\n    dry_run: If True, don't save changes\n    printer: Optional printer for output\n\nReturns:\n    True if successful, False otherwise",
      "parameters": [
        {
          "name": "spec_id",
          "type": "str",
          "default": null
        },
        {
          "name": "task_id",
          "type": "str",
          "default": null
        },
        {
          "name": "reason",
          "type": "str",
          "default": null
        },
        {
          "name": "specs_dir",
          "type": "Path",
          "default": null
        },
        {
          "name": "blocker_type",
          "type": "str",
          "default": null
        },
        {
          "name": "ticket",
          "type": "Optional[str]",
          "default": null
        },
        {
          "name": "dry_run",
          "type": "bool",
          "default": null
        },
        {
          "name": "printer",
          "type": "Optional[PrettyPrinter]",
          "default": null
        }
      ],
      "return_type": "bool",
      "complexity": 10,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "unblock_task",
      "file": "src/claude_skills/claude_skills/sdd_update/status.py",
      "line": 353,
      "language": "python",
      "docstring": "Unblock a task and optionally set it to pending or in_progress.\n\nArgs:\n    spec_id: Specification ID\n    task_id: Task identifier\n    resolution: Optional description of how blocker was resolved\n    specs_dir: Path to specs/active directory\n    dry_run: If True, don't save changes\n    printer: Optional printer for output\n\nReturns:\n    True if successful, False otherwise",
      "parameters": [
        {
          "name": "spec_id",
          "type": "str",
          "default": null
        },
        {
          "name": "task_id",
          "type": "str",
          "default": null
        },
        {
          "name": "resolution",
          "type": "Optional[str]",
          "default": null
        },
        {
          "name": "specs_dir",
          "type": "Path",
          "default": null
        },
        {
          "name": "dry_run",
          "type": "bool",
          "default": null
        },
        {
          "name": "printer",
          "type": "Optional[PrettyPrinter]",
          "default": null
        }
      ],
      "return_type": "bool",
      "complexity": 13,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "track_time",
      "file": "src/claude_skills/claude_skills/sdd_update/time_tracking.py",
      "line": 15,
      "language": "python",
      "docstring": "Record actual time spent on a task.\n\nArgs:\n    spec_id: Specification ID\n    task_id: Task identifier\n    actual_hours: Actual hours spent on task\n    specs_dir: Path to specs/active directory\n    dry_run: If True, show change without saving\n    printer: Optional printer for output\n\nReturns:\n    True if successful, False otherwise",
      "parameters": [
        {
          "name": "spec_id",
          "type": "str",
          "default": null
        },
        {
          "name": "task_id",
          "type": "str",
          "default": null
        },
        {
          "name": "actual_hours",
          "type": "float",
          "default": null
        },
        {
          "name": "specs_dir",
          "type": "Path",
          "default": null
        },
        {
          "name": "dry_run",
          "type": "bool",
          "default": null
        },
        {
          "name": "printer",
          "type": "Optional[PrettyPrinter]",
          "default": null
        }
      ],
      "return_type": "bool",
      "complexity": 9,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "generate_time_report",
      "file": "src/claude_skills/claude_skills/sdd_update/time_tracking.py",
      "line": 84,
      "language": "python",
      "docstring": "Generate time variance report for a spec.\n\nArgs:\n    spec_id: Specification ID\n    specs_dir: Path to specs/active directory\n    printer: Optional printer for output\n\nReturns:\n    Dictionary with time analysis, or None on error",
      "parameters": [
        {
          "name": "spec_id",
          "type": "str",
          "default": null
        },
        {
          "name": "specs_dir",
          "type": "Path",
          "default": null
        },
        {
          "name": "printer",
          "type": "Optional[PrettyPrinter]",
          "default": null
        }
      ],
      "return_type": "Optional[Dict]",
      "complexity": 9,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "validate_spec",
      "file": "src/claude_skills/claude_skills/sdd_update/validation.py",
      "line": 16,
      "language": "python",
      "docstring": "Validate JSON spec consistency using comprehensive hierarchy validator.\n\nChecks for:\n- Valid JSON structure\n- Required fields present\n- Parent-child relationships valid\n- No orphaned nodes\n- No circular dependencies\n- Progress calculations correct\n\nArgs:\n    spec_id: Specification ID\n    specs_dir: Path to specs/active directory\n    printer: Optional printer for output\n\nReturns:\n    True if valid, False if issues found",
      "parameters": [
        {
          "name": "spec_id",
          "type": "str",
          "default": null
        },
        {
          "name": "specs_dir",
          "type": "Path",
          "default": null
        },
        {
          "name": "printer",
          "type": "Optional[PrettyPrinter]",
          "default": null
        }
      ],
      "return_type": "bool",
      "complexity": 6,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "get_status_report",
      "file": "src/claude_skills/claude_skills/sdd_update/validation.py",
      "line": 73,
      "language": "python",
      "docstring": "Generate comprehensive status report.\n\nArgs:\n    spec_id: Specification ID\n    specs_dir: Path to specs/active directory\n    printer: Optional printer for output\n\nReturns:\n    Dictionary with status information, or None on error",
      "parameters": [
        {
          "name": "spec_id",
          "type": "str",
          "default": null
        },
        {
          "name": "specs_dir",
          "type": "Path",
          "default": null
        },
        {
          "name": "printer",
          "type": "Optional[PrettyPrinter]",
          "default": null
        }
      ],
      "return_type": "Optional[Dict]",
      "complexity": 7,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "audit_spec",
      "file": "src/claude_skills/claude_skills/sdd_update/validation.py",
      "line": 146,
      "language": "python",
      "docstring": "Perform deep audit of JSON spec.\n\nMore comprehensive than validate_spec, includes:\n- Circular dependency detection\n- Progress calculation verification\n- Metadata completeness checks\n\nArgs:\n    spec_id: Specification ID\n    specs_dir: Path to specs/active directory\n    printer: Optional printer for output\n\nReturns:\n    Dictionary with audit results",
      "parameters": [
        {
          "name": "spec_id",
          "type": "str",
          "default": null
        },
        {
          "name": "specs_dir",
          "type": "Path",
          "default": null
        },
        {
          "name": "printer",
          "type": "Optional[PrettyPrinter]",
          "default": null
        }
      ],
      "return_type": "Dict",
      "complexity": 16,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "reconcile_state",
      "file": "src/claude_skills/claude_skills/sdd_update/validation.py",
      "line": 227,
      "language": "python",
      "docstring": "Reconcile JSON spec by fixing inconsistent task statuses.\n\nFinds tasks where metadata.completed_at exists but status != \"completed\",\nand updates their status to match the metadata. This fixes issues where\na task was marked complete but the status wasn't properly updated.\n\nArgs:\n    spec_id: Specification ID\n    specs_dir: Path to specs/active directory\n    dry_run: If True, don't save changes\n    printer: Optional printer for output\n\nReturns:\n    True if reconciliation successful, False otherwise",
      "parameters": [
        {
          "name": "spec_id",
          "type": "str",
          "default": null
        },
        {
          "name": "specs_dir",
          "type": "Path",
          "default": null
        },
        {
          "name": "dry_run",
          "type": "bool",
          "default": null
        },
        {
          "name": "printer",
          "type": "Optional[PrettyPrinter]",
          "default": null
        }
      ],
      "return_type": "bool",
      "complexity": 15,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "detect_unjournaled_tasks",
      "file": "src/claude_skills/claude_skills/sdd_update/validation.py",
      "line": 323,
      "language": "python",
      "docstring": "Find completed tasks that need journal entries.\n\nReturns list of tasks with:\n- task_id\n- title\n- completed_at timestamp\n- parent_id (for context)\n\nArgs:\n    spec_id: Specification ID\n    specs_dir: Path to specs directory\n    printer: Optional printer for output\n\nReturns:\n    List of unjournaled task dictionaries, or None on error",
      "parameters": [
        {
          "name": "spec_id",
          "type": "str",
          "default": null
        },
        {
          "name": "specs_dir",
          "type": "Path",
          "default": null
        },
        {
          "name": "printer",
          "type": "Optional[PrettyPrinter]",
          "default": null
        }
      ],
      "return_type": "List[Dict]",
      "complexity": 7,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "add_verification_result",
      "file": "src/claude_skills/claude_skills/sdd_update/verification.py",
      "line": 17,
      "language": "python",
      "docstring": "Add verification results to the JSON spec file hierarchy node metadata.\n\nArgs:\n    spec_id: Specification ID\n    verify_id: Verification identifier (e.g., 'verify-1-1')\n    status: PASSED, FAILED, or PARTIAL\n    command: Command that was run (if automated)\n    output: Command output or test results\n    issues: Issues found during verification\n    notes: Additional notes\n    specs_dir: Optional specs directory (auto-detected if not provided)\n    dry_run: If True, show result without writing\n    printer: Optional printer for output\n\nReturns:\n    True if successful, False otherwise",
      "parameters": [
        {
          "name": "spec_id",
          "type": "str",
          "default": null
        },
        {
          "name": "verify_id",
          "type": "str",
          "default": null
        },
        {
          "name": "status",
          "type": "str",
          "default": null
        },
        {
          "name": "command",
          "type": "Optional[str]",
          "default": null
        },
        {
          "name": "output",
          "type": "Optional[str]",
          "default": null
        },
        {
          "name": "issues",
          "type": "Optional[str]",
          "default": null
        },
        {
          "name": "notes",
          "type": "Optional[str]",
          "default": null
        },
        {
          "name": "specs_dir",
          "type": "Optional[Path]",
          "default": null
        },
        {
          "name": "dry_run",
          "type": "bool",
          "default": null
        },
        {
          "name": "printer",
          "type": "Optional[PrettyPrinter]",
          "default": null
        }
      ],
      "return_type": "bool",
      "complexity": 18,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "format_verification_summary",
      "file": "src/claude_skills/claude_skills/sdd_update/verification.py",
      "line": 143,
      "language": "python",
      "docstring": "Format a summary of multiple verification results with proper newlines.\n\nArgs:\n    verification_results: List of dicts with keys:\n        - verify_id: str (e.g., 'verify-1-1')\n        - title: str\n        - status: str ('PASSED', 'FAILED', 'PARTIAL')\n        - command: Optional[str]\n        - result: Optional[str]\n        - notes: Optional[str]\n\nReturns:\n    Formatted summary string ready for display",
      "parameters": [
        {
          "name": "verification_results",
          "type": "list[dict]",
          "default": null
        }
      ],
      "return_type": "str",
      "complexity": 6,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "_get_timestamp",
      "file": "src/claude_skills/claude_skills/sdd_update/workflow.py",
      "line": 26,
      "language": "python",
      "docstring": null,
      "parameters": [],
      "return_type": "str",
      "complexity": 1,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": false
    },
    {
      "name": "_derive_default_journal",
      "file": "src/claude_skills/claude_skills/sdd_update/workflow.py",
      "line": 30,
      "language": "python",
      "docstring": null,
      "parameters": [
        {
          "name": "task_id",
          "type": "str",
          "default": null
        },
        {
          "name": "task_title",
          "type": "str",
          "default": null
        },
        {
          "name": "actual_hours",
          "type": "Optional[float]",
          "default": null
        },
        {
          "name": "note",
          "type": "Optional[str]",
          "default": null
        }
      ],
      "return_type": "Tuple[str, str]",
      "complexity": 4,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": false
    },
    {
      "name": "_bump_version",
      "file": "src/claude_skills/claude_skills/sdd_update/workflow.py",
      "line": 48,
      "language": "python",
      "docstring": "Determine the next semantic version based on bump type.",
      "parameters": [
        {
          "name": "current_version",
          "type": "Optional[str]",
          "default": null
        },
        {
          "name": "bump",
          "type": "str",
          "default": null
        }
      ],
      "return_type": "Optional[str]",
      "complexity": 5,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": false
    },
    {
      "name": "_simulate_workflow",
      "file": "src/claude_skills/claude_skills/sdd_update/workflow.py",
      "line": 73,
      "language": "python",
      "docstring": null,
      "parameters": [
        {
          "name": "state",
          "type": "Dict[str, Any]",
          "default": null
        },
        {
          "name": "task_id",
          "type": "str",
          "default": null
        },
        {
          "name": "actual_hours",
          "type": "Optional[float]",
          "default": null
        },
        {
          "name": "note",
          "type": "Optional[str]",
          "default": null
        },
        {
          "name": "journal_title",
          "type": "Optional[str]",
          "default": null
        },
        {
          "name": "journal_content",
          "type": "Optional[str]",
          "default": null
        },
        {
          "name": "journal_entry_type",
          "type": "str",
          "default": null
        },
        {
          "name": "author",
          "type": "str",
          "default": null
        },
        {
          "name": "revision_version",
          "type": "Optional[str]",
          "default": null
        },
        {
          "name": "revision_changes",
          "type": "Optional[str]",
          "default": null
        }
      ],
      "return_type": "Dict[str, Any]",
      "complexity": 13,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": false
    },
    {
      "name": "_calculate_diff",
      "file": "src/claude_skills/claude_skills/sdd_update/workflow.py",
      "line": 167,
      "language": "python",
      "docstring": null,
      "parameters": [
        {
          "name": "before",
          "type": "Dict[str, Any]",
          "default": null
        },
        {
          "name": "after",
          "type": "Dict[str, Any]",
          "default": null
        },
        {
          "name": "task_id",
          "type": "str",
          "default": null
        }
      ],
      "return_type": "Dict[str, Any]",
      "complexity": 8,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": false
    },
    {
      "name": "_print_diff",
      "file": "src/claude_skills/claude_skills/sdd_update/workflow.py",
      "line": 215,
      "language": "python",
      "docstring": null,
      "parameters": [
        {
          "name": "diff",
          "type": "Dict[str, Any]",
          "default": null
        },
        {
          "name": "printer",
          "type": "PrettyPrinter",
          "default": null
        }
      ],
      "return_type": "None",
      "complexity": 8,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": false
    },
    {
      "name": "complete_task_workflow",
      "file": "src/claude_skills/claude_skills/sdd_update/workflow.py",
      "line": 239,
      "language": "python",
      "docstring": "Complete a task with optional journaling, time tracking, and revision updates.",
      "parameters": [],
      "return_type": "Optional[Dict[str, Any]]",
      "complexity": 27,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "_stats_to_dict",
      "file": "src/claude_skills/claude_skills/sdd_validate/cli.py",
      "line": 43,
      "language": "python",
      "docstring": null,
      "parameters": [
        {
          "name": "stats",
          "type": null,
          "default": null
        }
      ],
      "return_type": "Dict[str, Any]",
      "complexity": 1,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": false
    },
    {
      "name": "_dependencies_to_dict",
      "file": "src/claude_skills/claude_skills/sdd_validate/cli.py",
      "line": 47,
      "language": "python",
      "docstring": null,
      "parameters": [
        {
          "name": "analysis",
          "type": null,
          "default": null
        }
      ],
      "return_type": "Dict[str, Any]",
      "complexity": 2,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": false
    },
    {
      "name": "_normalized_to_dict",
      "file": "src/claude_skills/claude_skills/sdd_validate/cli.py",
      "line": 59,
      "language": "python",
      "docstring": null,
      "parameters": [
        {
          "name": "normalized",
          "type": "NormalizedValidationResult",
          "default": null
        }
      ],
      "return_type": "Dict[str, Any]",
      "complexity": 1,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": false
    },
    {
      "name": "_serialize_fix_action",
      "file": "src/claude_skills/claude_skills/sdd_validate/cli.py",
      "line": 63,
      "language": "python",
      "docstring": null,
      "parameters": [
        {
          "name": "action",
          "type": null,
          "default": null
        }
      ],
      "return_type": "Dict[str, Any]",
      "complexity": 1,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": false
    },
    {
      "name": "_status_to_exit_code",
      "file": "src/claude_skills/claude_skills/sdd_validate/cli.py",
      "line": 74,
      "language": "python",
      "docstring": null,
      "parameters": [
        {
          "name": "status",
          "type": "str",
          "default": null
        }
      ],
      "return_type": "int",
      "complexity": 3,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": false
    },
    {
      "name": "_filter_actions_by_selection",
      "file": "src/claude_skills/claude_skills/sdd_validate/cli.py",
      "line": 82,
      "language": "python",
      "docstring": "Filter actions based on ID or category selection.",
      "parameters": [
        {
          "name": "actions",
          "type": null,
          "default": null
        },
        {
          "name": "selection_criteria",
          "type": null,
          "default": null
        }
      ],
      "return_type": null,
      "complexity": 6,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": false
    },
    {
      "name": "_interactive_select_fixes",
      "file": "src/claude_skills/claude_skills/sdd_validate/cli.py",
      "line": 100,
      "language": "python",
      "docstring": "Interactively prompt user to select fixes.",
      "parameters": [
        {
          "name": "actions",
          "type": null,
          "default": null
        },
        {
          "name": "printer",
          "type": null,
          "default": null
        }
      ],
      "return_type": null,
      "complexity": 10,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": false
    },
    {
      "name": "cmd_validate",
      "file": "src/claude_skills/claude_skills/sdd_validate/cli.py",
      "line": 145,
      "language": "python",
      "docstring": "Validate JSON spec file.",
      "parameters": [
        {
          "name": "args",
          "type": null,
          "default": null
        },
        {
          "name": "printer",
          "type": null,
          "default": null
        }
      ],
      "return_type": null,
      "complexity": 15,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "cmd_fix",
      "file": "src/claude_skills/claude_skills/sdd_validate/cli.py",
      "line": 231,
      "language": "python",
      "docstring": "Auto-fix validation issues in spec file.",
      "parameters": [
        {
          "name": "args",
          "type": null,
          "default": null
        },
        {
          "name": "printer",
          "type": null,
          "default": null
        }
      ],
      "return_type": null,
      "complexity": 33,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "cmd_report",
      "file": "src/claude_skills/claude_skills/sdd_validate/cli.py",
      "line": 360,
      "language": "python",
      "docstring": "Generate detailed validation report.",
      "parameters": [
        {
          "name": "args",
          "type": null,
          "default": null
        },
        {
          "name": "printer",
          "type": null,
          "default": null
        }
      ],
      "return_type": null,
      "complexity": 8,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "cmd_stats",
      "file": "src/claude_skills/claude_skills/sdd_validate/cli.py",
      "line": 413,
      "language": "python",
      "docstring": "Show spec statistics and complexity metrics.",
      "parameters": [
        {
          "name": "args",
          "type": null,
          "default": null
        },
        {
          "name": "printer",
          "type": null,
          "default": null
        }
      ],
      "return_type": null,
      "complexity": 5,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "cmd_check_deps",
      "file": "src/claude_skills/claude_skills/sdd_validate/cli.py",
      "line": 443,
      "language": "python",
      "docstring": "Check for circular dependencies.",
      "parameters": [
        {
          "name": "args",
          "type": null,
          "default": null
        },
        {
          "name": "printer",
          "type": null,
          "default": null
        }
      ],
      "return_type": null,
      "complexity": 18,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "register_validate",
      "file": "src/claude_skills/claude_skills/sdd_validate/cli.py",
      "line": 503,
      "language": "python",
      "docstring": "Register 'validate' subcommand for unified CLI.\n\nArgs:\n    subparsers: ArgumentParser subparsers object\n    parent_parser: Parent parser with global options\n\nNote:\n    Handlers receive (args, printer) when invoked from main().",
      "parameters": [
        {
          "name": "subparsers",
          "type": null,
          "default": null
        },
        {
          "name": "parent_parser",
          "type": null,
          "default": null
        }
      ],
      "return_type": null,
      "complexity": 1,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "compute_diff",
      "file": "src/claude_skills/claude_skills/sdd_validate/diff.py",
      "line": 30,
      "language": "python",
      "docstring": "Compute differences between before and after spec states.\n\nArgs:\n    before: Spec data before fixes\n    after: Spec data after fixes\n\nReturns:\n    DiffReport with all detected changes",
      "parameters": [
        {
          "name": "before",
          "type": "Dict[str, Any]",
          "default": null
        },
        {
          "name": "after",
          "type": "Dict[str, Any]",
          "default": null
        }
      ],
      "return_type": "DiffReport",
      "complexity": 6,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "_compare_nodes",
      "file": "src/claude_skills/claude_skills/sdd_validate/diff.py",
      "line": 89,
      "language": "python",
      "docstring": "Compare two node dicts and return list of changes.",
      "parameters": [
        {
          "name": "node_id",
          "type": "str",
          "default": null
        },
        {
          "name": "before",
          "type": "Dict[str, Any]",
          "default": null
        },
        {
          "name": "after",
          "type": "Dict[str, Any]",
          "default": null
        }
      ],
      "return_type": "List[FieldChange]",
      "complexity": 6,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": false
    },
    {
      "name": "_compare_dicts",
      "file": "src/claude_skills/claude_skills/sdd_validate/diff.py",
      "line": 142,
      "language": "python",
      "docstring": "Compare two dictionaries and return field changes.",
      "parameters": [
        {
          "name": "node_id",
          "type": "str",
          "default": null
        },
        {
          "name": "dict_name",
          "type": "str",
          "default": null
        },
        {
          "name": "before",
          "type": "Dict[str, Any]",
          "default": null
        },
        {
          "name": "after",
          "type": "Dict[str, Any]",
          "default": null
        }
      ],
      "return_type": "List[FieldChange]",
      "complexity": 5,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": false
    },
    {
      "name": "format_diff_markdown",
      "file": "src/claude_skills/claude_skills/sdd_validate/diff.py",
      "line": 171,
      "language": "python",
      "docstring": "Format diff report as markdown.",
      "parameters": [
        {
          "name": "report",
          "type": "DiffReport",
          "default": null
        },
        {
          "name": "spec_id",
          "type": "str",
          "default": null
        }
      ],
      "return_type": "str",
      "complexity": 13,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "format_diff_json",
      "file": "src/claude_skills/claude_skills/sdd_validate/diff.py",
      "line": 234,
      "language": "python",
      "docstring": "Format diff report as JSON.",
      "parameters": [
        {
          "name": "report",
          "type": "DiffReport",
          "default": null
        }
      ],
      "return_type": "str",
      "complexity": 2,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "_format_value",
      "file": "src/claude_skills/claude_skills/sdd_validate/diff.py",
      "line": 256,
      "language": "python",
      "docstring": "Format a value for display in diff output.",
      "parameters": [
        {
          "name": "value",
          "type": "Any",
          "default": null
        }
      ],
      "return_type": "str",
      "complexity": 4,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": false
    },
    {
      "name": "collect_fix_actions",
      "file": "src/claude_skills/claude_skills/sdd_validate/fix.py",
      "line": 54,
      "language": "python",
      "docstring": "Translate a validation result into fix actions.",
      "parameters": [
        {
          "name": "result",
          "type": "JsonSpecValidationResult",
          "default": null
        }
      ],
      "return_type": "List[FixAction]",
      "complexity": 9,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "apply_fix_actions",
      "file": "src/claude_skills/claude_skills/sdd_validate/fix.py",
      "line": 98,
      "language": "python",
      "docstring": "Apply fix actions to a spec file.",
      "parameters": [
        {
          "name": "actions",
          "type": "Iterable[FixAction]",
          "default": null
        },
        {
          "name": "spec_path",
          "type": "str",
          "default": null
        }
      ],
      "return_type": "FixReport",
      "complexity": 12,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "_build_counts_action",
      "file": "src/claude_skills/claude_skills/sdd_validate/fix.py",
      "line": 162,
      "language": "python",
      "docstring": null,
      "parameters": [
        {
          "name": "error",
          "type": "EnhancedError",
          "default": null
        },
        {
          "name": "spec_data",
          "type": "Dict[str, Any]",
          "default": null
        }
      ],
      "return_type": "Optional[FixAction]",
      "complexity": 4,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": false
    },
    {
      "name": "_build_metadata_action",
      "file": "src/claude_skills/claude_skills/sdd_validate/fix.py",
      "line": 184,
      "language": "python",
      "docstring": null,
      "parameters": [
        {
          "name": "error",
          "type": "EnhancedError",
          "default": null
        },
        {
          "name": "spec_data",
          "type": "Dict[str, Any]",
          "default": null
        }
      ],
      "return_type": "Optional[FixAction]",
      "complexity": 8,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": false
    },
    {
      "name": "_build_hierarchy_action",
      "file": "src/claude_skills/claude_skills/sdd_validate/fix.py",
      "line": 226,
      "language": "python",
      "docstring": null,
      "parameters": [
        {
          "name": "error",
          "type": "EnhancedError",
          "default": null
        },
        {
          "name": "spec_data",
          "type": "Dict[str, Any]",
          "default": null
        }
      ],
      "return_type": "Optional[FixAction]",
      "complexity": 9,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": false
    },
    {
      "name": "_build_date_action",
      "file": "src/claude_skills/claude_skills/sdd_validate/fix.py",
      "line": 262,
      "language": "python",
      "docstring": null,
      "parameters": [
        {
          "name": "error",
          "type": "EnhancedError",
          "default": null
        },
        {
          "name": "spec_data",
          "type": "Dict[str, Any]",
          "default": null
        }
      ],
      "return_type": "Optional[FixAction]",
      "complexity": 5,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": false
    },
    {
      "name": "_build_status_action",
      "file": "src/claude_skills/claude_skills/sdd_validate/fix.py",
      "line": 287,
      "language": "python",
      "docstring": null,
      "parameters": [
        {
          "name": "error",
          "type": "EnhancedError",
          "default": null
        },
        {
          "name": "spec_data",
          "type": "Dict[str, Any]",
          "default": null
        }
      ],
      "return_type": "Optional[FixAction]",
      "complexity": 8,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": false
    },
    {
      "name": "_normalize_timestamp",
      "file": "src/claude_skills/claude_skills/sdd_validate/fix.py",
      "line": 322,
      "language": "python",
      "docstring": null,
      "parameters": [
        {
          "name": "value",
          "type": "Any",
          "default": null
        }
      ],
      "return_type": "Optional[str]",
      "complexity": 5,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": false
    },
    {
      "name": "_resolve_node_id",
      "file": "src/claude_skills/claude_skills/sdd_validate/fix.py",
      "line": 343,
      "language": "python",
      "docstring": null,
      "parameters": [
        {
          "name": "error",
          "type": "EnhancedError",
          "default": null
        },
        {
          "name": "hierarchy",
          "type": "Dict[str, Any]",
          "default": null
        }
      ],
      "return_type": "Optional[str]",
      "complexity": 5,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": false
    },
    {
      "name": "_normalize_status",
      "file": "src/claude_skills/claude_skills/sdd_validate/fix.py",
      "line": 353,
      "language": "python",
      "docstring": null,
      "parameters": [
        {
          "name": "value",
          "type": "Any",
          "default": null
        }
      ],
      "return_type": "str",
      "complexity": 3,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": false
    },
    {
      "name": "_build_missing_fields_action",
      "file": "src/claude_skills/claude_skills/sdd_validate/fix.py",
      "line": 374,
      "language": "python",
      "docstring": "Add missing required node fields with sensible defaults.",
      "parameters": [
        {
          "name": "error",
          "type": "EnhancedError",
          "default": null
        },
        {
          "name": "spec_data",
          "type": "Dict[str, Any]",
          "default": null
        }
      ],
      "return_type": "Optional[FixAction]",
      "complexity": 15,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": false
    },
    {
      "name": "_build_empty_title_action",
      "file": "src/claude_skills/claude_skills/sdd_validate/fix.py",
      "line": 429,
      "language": "python",
      "docstring": "Generate title from node ID for nodes with empty titles.",
      "parameters": [
        {
          "name": "error",
          "type": "EnhancedError",
          "default": null
        },
        {
          "name": "spec_data",
          "type": "Dict[str, Any]",
          "default": null
        }
      ],
      "return_type": "Optional[FixAction]",
      "complexity": 7,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": false
    },
    {
      "name": "_build_invalid_type_action",
      "file": "src/claude_skills/claude_skills/sdd_validate/fix.py",
      "line": 461,
      "language": "python",
      "docstring": "Normalize invalid node types.",
      "parameters": [
        {
          "name": "error",
          "type": "EnhancedError",
          "default": null
        },
        {
          "name": "spec_data",
          "type": "Dict[str, Any]",
          "default": null
        }
      ],
      "return_type": "Optional[FixAction]",
      "complexity": 6,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": false
    },
    {
      "name": "_normalize_node_type",
      "file": "src/claude_skills/claude_skills/sdd_validate/fix.py",
      "line": 496,
      "language": "python",
      "docstring": "Normalize node type to valid value.",
      "parameters": [
        {
          "name": "value",
          "type": "Any",
          "default": null
        }
      ],
      "return_type": "str",
      "complexity": 3,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": false
    },
    {
      "name": "_build_verification_type_action",
      "file": "src/claude_skills/claude_skills/sdd_validate/fix.py",
      "line": 517,
      "language": "python",
      "docstring": "Fix verification_type for verify nodes.",
      "parameters": [
        {
          "name": "error",
          "type": "EnhancedError",
          "default": null
        },
        {
          "name": "spec_data",
          "type": "Dict[str, Any]",
          "default": null
        }
      ],
      "return_type": "Optional[FixAction]",
      "complexity": 9,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": false
    },
    {
      "name": "_build_bidirectional_deps_action",
      "file": "src/claude_skills/claude_skills/sdd_validate/fix.py",
      "line": 550,
      "language": "python",
      "docstring": "Synchronize bidirectional dependency relationships.",
      "parameters": [
        {
          "name": "error",
          "type": "EnhancedError",
          "default": null
        },
        {
          "name": "spec_data",
          "type": "Dict[str, Any]",
          "default": null
        }
      ],
      "return_type": "Optional[FixAction]",
      "complexity": 11,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": false
    },
    {
      "name": "_build_missing_deps_structure_action",
      "file": "src/claude_skills/claude_skills/sdd_validate/fix.py",
      "line": 610,
      "language": "python",
      "docstring": "Create dependencies dict structure.",
      "parameters": [
        {
          "name": "error",
          "type": "EnhancedError",
          "default": null
        },
        {
          "name": "spec_data",
          "type": "Dict[str, Any]",
          "default": null
        }
      ],
      "return_type": "Optional[FixAction]",
      "complexity": 7,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": false
    },
    {
      "name": "_build_leaf_count_action",
      "file": "src/claude_skills/claude_skills/sdd_validate/fix.py",
      "line": 646,
      "language": "python",
      "docstring": "Fix leaf node total_tasks to be 1.",
      "parameters": [
        {
          "name": "error",
          "type": "EnhancedError",
          "default": null
        },
        {
          "name": "spec_data",
          "type": "Dict[str, Any]",
          "default": null
        }
      ],
      "return_type": "Optional[FixAction]",
      "complexity": 9,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": false
    },
    {
      "name": "_build_orphan_action",
      "file": "src/claude_skills/claude_skills/sdd_validate/fix.py",
      "line": 679,
      "language": "python",
      "docstring": "Handle orphaned nodes by attaching to spec-root.",
      "parameters": [
        {
          "name": "error",
          "type": "EnhancedError",
          "default": null
        },
        {
          "name": "spec_data",
          "type": "Dict[str, Any]",
          "default": null
        }
      ],
      "return_type": "Optional[FixAction]",
      "complexity": 9,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": false
    },
    {
      "name": "_category_from_field",
      "file": "src/claude_skills/claude_skills/sdd_validate/formatting.py",
      "line": 57,
      "language": "python",
      "docstring": null,
      "parameters": [
        {
          "name": "field",
          "type": "str",
          "default": null
        }
      ],
      "return_type": "str",
      "complexity": 3,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": false
    },
    {
      "name": "_collect_messages",
      "file": "src/claude_skills/claude_skills/sdd_validate/formatting.py",
      "line": 65,
      "language": "python",
      "docstring": null,
      "parameters": [
        {
          "name": "result",
          "type": "JsonSpecValidationResult",
          "default": null
        },
        {
          "name": "fields",
          "type": "Iterable[str]",
          "default": null
        },
        {
          "name": "severity",
          "type": "str",
          "default": null
        }
      ],
      "return_type": "List[Dict[str, Any]]",
      "complexity": 4,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": false
    },
    {
      "name": "_merge_enhanced_issues",
      "file": "src/claude_skills/claude_skills/sdd_validate/formatting.py",
      "line": 83,
      "language": "python",
      "docstring": null,
      "parameters": [
        {
          "name": "issues",
          "type": "List[Dict[str, Any]]",
          "default": null
        },
        {
          "name": "enhanced_errors",
          "type": "List[EnhancedError]",
          "default": null
        }
      ],
      "return_type": "Tuple[List[Dict[str, Any]], int, int]",
      "complexity": 8,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": false
    },
    {
      "name": "normalize_validation_result",
      "file": "src/claude_skills/claude_skills/sdd_validate/formatting.py",
      "line": 133,
      "language": "python",
      "docstring": "Convert a raw validation result into aggregate counts and issue metadata.",
      "parameters": [
        {
          "name": "result",
          "type": "JsonSpecValidationResult",
          "default": null
        }
      ],
      "return_type": "NormalizedValidationResult",
      "complexity": 3,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "format_validation_summary",
      "file": "src/claude_skills/claude_skills/sdd_validate/formatting.py",
      "line": 171,
      "language": "python",
      "docstring": "Render a human-readable summary of validation findings.",
      "parameters": [
        {
          "name": "result",
          "type": "NormalizedValidationResult",
          "default": null
        }
      ],
      "return_type": "str",
      "complexity": 7,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "generate_report",
      "file": "src/claude_skills/claude_skills/sdd_validate/reporting.py",
      "line": 11,
      "language": "python",
      "docstring": "Generate a validation report in the requested format.",
      "parameters": [
        {
          "name": "result",
          "type": "JsonSpecValidationResult",
          "default": null
        }
      ],
      "return_type": "str",
      "complexity": 40,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "calculate_statistics",
      "file": "src/claude_skills/claude_skills/sdd_validate/stats.py",
      "line": 29,
      "language": "python",
      "docstring": "Compute statistics for a spec file.",
      "parameters": [
        {
          "name": "spec_data",
          "type": "Dict[str, Any]",
          "default": null
        }
      ],
      "return_type": "SpecStatistics",
      "complexity": 13,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    },
    {
      "name": "render_statistics",
      "file": "src/claude_skills/claude_skills/sdd_validate/stats.py",
      "line": 104,
      "language": "python",
      "docstring": "Render statistics for display.",
      "parameters": [
        {
          "name": "stats",
          "type": "SpecStatistics",
          "default": null
        }
      ],
      "return_type": "str",
      "complexity": 6,
      "decorators": [],
      "is_async": false,
      "is_exported": false,
      "is_public": true
    }
  ],
  "dependencies": {
    "scripts/extract_sdd_commands.py": [
      "argparse",
      "json",
      "re",
      "collections.defaultdict",
      "dataclasses.dataclass",
      "pathlib.Path",
      "typing.Dict",
      "typing.List"
    ],
    "scripts/validate_sdd_commands.py": [
      "argparse",
      "json",
      "re",
      "subprocess",
      "sys",
      "collections.defaultdict",
      "dataclasses.dataclass",
      "pathlib.Path",
      "typing.Dict",
      "typing.List",
      "typing.Set",
      "typing.Tuple",
      "typing.Optional"
    ],
    "src/claude_skills/claude_skills/__init__.py": [
      "claude_skills.common.find_specs_directory",
      "claude_skills.common.load_json_spec",
      "claude_skills.common.PrettyPrinter"
    ],
    "src/claude_skills/claude_skills/cli/sdd/__init__.py": [
      "sys",
      "argparse",
      "pathlib.Path",
      "claude_skills.common.PrettyPrinter",
      "claude_skills.common.metrics.track_metrics",
      "claude_skills.cli.sdd.options.add_global_options",
      "claude_skills.cli.sdd.options.create_global_parent_parser",
      "claude_skills.cli.sdd.registry.register_all_subcommands"
    ],
    "src/claude_skills/claude_skills/cli/sdd/options.py": [
      "argparse"
    ],
    "src/claude_skills/claude_skills/cli/sdd/registry.py": [
      "logging"
    ],
    "src/claude_skills/claude_skills/cli/skills_dev/registry.py": [
      "__future__.annotations",
      "argparse",
      "contextlib",
      "importlib",
      "io",
      "runpy",
      "sys",
      "dataclasses.dataclass",
      "typing.Any",
      "typing.Iterable",
      "typing.Sequence",
      "claude_skills.common.PrettyPrinter"
    ],
    "src/claude_skills/claude_skills/code_doc/__init__.py": [
      "parser.CodebaseAnalyzer",
      "calculator.calculate_complexity",
      "calculator.calculate_statistics",
      "formatter.MarkdownGenerator",
      "formatter.JSONGenerator",
      "generator.DocumentationGenerator"
    ],
    "src/claude_skills/claude_skills/code_doc/ai_consultation.py": [
      "subprocess",
      "sys",
      "pathlib.Path",
      "typing.Dict",
      "typing.List",
      "typing.Optional",
      "typing.Tuple",
      "concurrent.futures.ThreadPoolExecutor",
      "concurrent.futures.as_completed",
      "time"
    ],
    "src/claude_skills/claude_skills/code_doc/calculator.py": [
      "ast",
      "typing.Dict",
      "typing.List",
      "typing.Any",
      "collections.defaultdict"
    ],
    "src/claude_skills/claude_skills/code_doc/cli.py": [
      "__future__.annotations",
      "argparse",
      "json",
      "sys",
      "traceback",
      "pathlib.Path",
      "typing.Iterable",
      "typing.Optional",
      "claude_skills.common.PrettyPrinter",
      "claude_skills.common.metrics.track_metrics",
      "claude_skills.code_doc.generator.DocumentationGenerator",
      "claude_skills.code_doc.parsers.Language",
      "claude_skills.code_doc.parsers.create_parser_factory",
      "claude_skills.code_doc.calculator.calculate_statistics",
      "claude_skills.code_doc.detectors.detect_framework",
      "claude_skills.code_doc.detectors.identify_key_files",
      "claude_skills.code_doc.detectors.detect_layers",
      "claude_skills.code_doc.detectors.suggest_reading_order",
      "claude_skills.code_doc.detectors.extract_readme",
      "claude_skills.code_doc.detectors.create_context_summary",
      "claude_skills.code_doc.ai_consultation.get_available_tools",
      "claude_skills.code_doc.ai_consultation.generate_architecture_docs",
      "claude_skills.code_doc.ai_consultation.generate_ai_context_docs",
      "claude_skills.code_doc.ai_consultation.compose_architecture_doc",
      "claude_skills.code_doc.ai_consultation.compose_ai_context_doc"
    ],
    "src/claude_skills/claude_skills/code_doc/detectors.py": [
      "typing.Dict",
      "typing.List",
      "typing.Any",
      "typing.Optional",
      "typing.Set",
      "pathlib.Path",
      "collections.defaultdict",
      "fnmatch"
    ],
    "src/claude_skills/claude_skills/code_doc/formatter.py": [
      "datetime.datetime",
      "typing.Dict",
      "typing.List",
      "typing.Any",
      "collections.defaultdict"
    ],
    "src/claude_skills/claude_skills/code_doc/generator.py": [
      "json",
      "pathlib.Path",
      "typing.Dict",
      "typing.Any",
      "typing.Optional",
      "typing.List"
    ],
    "src/claude_skills/claude_skills/code_doc/parser.py": [
      "ast",
      "pathlib.Path",
      "typing.Dict",
      "typing.List",
      "typing.Any",
      "collections.defaultdict"
    ],
    "src/claude_skills/claude_skills/code_doc/parsers/__init__.py": [
      "base.BaseParser",
      "base.Language",
      "base.ParsedParameter",
      "base.ParsedFunction",
      "base.ParsedClass",
      "base.ParsedModule",
      "base.ParseResult",
      "factory.ParserFactory",
      "factory.create_parser_factory",
      "python.PythonParser"
    ],
    "src/claude_skills/claude_skills/code_doc/parsers/base.py": [
      "abc.ABC",
      "abc.abstractmethod",
      "dataclasses.dataclass",
      "dataclasses.field",
      "typing.List",
      "typing.Dict",
      "typing.Any",
      "typing.Optional",
      "pathlib.Path",
      "enum.Enum"
    ],
    "src/claude_skills/claude_skills/code_doc/parsers/css.py": [
      "pathlib.Path",
      "typing.List",
      "typing.Dict",
      "typing.Optional",
      "sys",
      "base.BaseParser",
      "base.Language",
      "base.ParseResult",
      "base.ParsedModule",
      "base.ParsedFunction"
    ],
    "src/claude_skills/claude_skills/code_doc/parsers/factory.py": [
      "pathlib.Path",
      "typing.Dict",
      "typing.List",
      "typing.Optional",
      "typing.Set",
      "typing.Type",
      "collections.defaultdict",
      "base.BaseParser",
      "base.Language",
      "base.ParseResult"
    ],
    "src/claude_skills/claude_skills/code_doc/parsers/go.py": [
      "pathlib.Path",
      "typing.List",
      "typing.Optional",
      "sys",
      "base.BaseParser",
      "base.Language",
      "base.ParseResult",
      "base.ParsedModule",
      "base.ParsedClass",
      "base.ParsedFunction",
      "base.ParsedParameter"
    ],
    "src/claude_skills/claude_skills/code_doc/parsers/html.py": [
      "pathlib.Path",
      "typing.List",
      "typing.Dict",
      "typing.Optional",
      "sys",
      "base.BaseParser",
      "base.Language",
      "base.ParseResult",
      "base.ParsedModule",
      "base.ParsedFunction"
    ],
    "src/claude_skills/claude_skills/code_doc/parsers/javascript.py": [
      "pathlib.Path",
      "typing.List",
      "typing.Optional",
      "sys",
      "base.BaseParser",
      "base.Language",
      "base.ParseResult",
      "base.ParsedModule",
      "base.ParsedClass",
      "base.ParsedFunction",
      "base.ParsedParameter"
    ],
    "src/claude_skills/claude_skills/code_doc/parsers/python.py": [
      "ast",
      "sys",
      "pathlib.Path",
      "typing.List",
      "collections.defaultdict",
      "base.BaseParser",
      "base.Language",
      "base.ParseResult",
      "base.ParsedModule",
      "base.ParsedClass",
      "base.ParsedFunction",
      "base.ParsedParameter"
    ],
    "src/claude_skills/claude_skills/common/__init__.py": [
      "spec.load_json_spec",
      "spec.save_json_spec",
      "spec.backup_json_spec",
      "spec.get_node",
      "spec.update_node",
      "spec.extract_frontmatter",
      "progress.recalculate_progress",
      "progress.update_parent_status",
      "progress.get_progress_summary",
      "progress.list_phases",
      "paths.find_specs_directory",
      "paths.validate_path",
      "paths.validate_and_normalize_paths",
      "paths.normalize_path",
      "paths.batch_check_paths_exist",
      "paths.find_files_by_pattern",
      "paths.ensure_directory",
      "printer.PrettyPrinter",
      "validation.EnhancedError",
      "validation.SpecValidationResult",
      "validation.JsonSpecValidationResult",
      "validation.validate_status",
      "validation.validate_node_type",
      "validation.validate_spec_id_format",
      "validation.validate_iso8601_date",
      "validation.normalize_message_text",
      "hierarchy_validation.validate_spec_hierarchy",
      "hierarchy_validation.validate_structure",
      "hierarchy_validation.validate_hierarchy",
      "hierarchy_validation.validate_nodes",
      "hierarchy_validation.validate_task_counts",
      "hierarchy_validation.validate_dependencies",
      "hierarchy_validation.validate_metadata",
      "reporting.generate_spec_report",
      "reporting.generate_json_spec_report",
      "reporting.generate_combined_report",
      "dependency_analysis.analyze_dependencies",
      "dependency_analysis.DEFAULT_BOTTLENECK_THRESHOLD",
      "dependency_analysis.has_dependency_cycle",
      "dependency_analysis.validate_dependency_graph",
      "dependency_analysis.get_dependency_chain",
      "dependency_analysis.find_blocking_tasks",
      "dependency_analysis.find_circular_dependencies",
      "query_operations.query_tasks",
      "query_operations.get_task",
      "query_operations.list_phases",
      "query_operations.check_complete",
      "query_operations.list_blockers",
      "metrics.track_metrics",
      "metrics.capture_metrics",
      "metrics.record_metric",
      "metrics.get_metrics_file_path",
      "metrics.is_metrics_enabled",
      "doc_helper.check_doc_query_available",
      "doc_helper.check_sdd_integration_available",
      "doc_helper.get_task_context_from_docs",
      "doc_helper.should_generate_docs",
      "doc_helper.ensure_documentation_exists",
      "integrations.validate_spec_before_proceed",
      "integrations.execute_verify_task",
      "integrations.get_session_state"
    ],
    "src/claude_skills/claude_skills/common/dependency_analysis.py": [
      "dataclasses.dataclass",
      "typing.Dict",
      "typing.Iterable",
      "typing.List",
      "typing.Optional",
      "typing.Set",
      "typing.Tuple"
    ],
    "src/claude_skills/claude_skills/common/doc_helper.py": [
      "json",
      "subprocess",
      "shutil",
      "typing.Optional",
      "pathlib.Path"
    ],
    "src/claude_skills/claude_skills/common/hierarchy_validation.py": [
      "re",
      "pathlib.Path",
      "typing.Dict",
      "typing.Iterable",
      "typing.List",
      "typing.Tuple",
      "typing.Optional",
      "typing.Set",
      "claude_skills.common.EnhancedError",
      "claude_skills.common.JsonSpecValidationResult",
      "claude_skills.common.validate_status",
      "claude_skills.common.validate_node_type",
      "claude_skills.common.validate_spec_id_format",
      "claude_skills.common.validate_iso8601_date",
      "claude_skills.common.normalize_message_text"
    ],
    "src/claude_skills/claude_skills/common/integrations.py": [
      "json",
      "subprocess",
      "time",
      "typing.Optional",
      "pathlib.Path",
      "datetime.datetime",
      "hierarchy_validation.validate_spec_hierarchy"
    ],
    "src/claude_skills/claude_skills/common/metrics.py": [
      "os",
      "sys",
      "json",
      "time",
      "functools",
      "pathlib.Path",
      "datetime.datetime",
      "typing.Optional",
      "typing.Dict",
      "typing.Any",
      "contextlib.contextmanager"
    ],
    "src/claude_skills/claude_skills/common/paths.py": [
      "sys",
      "pathlib.Path",
      "typing.Optional",
      "typing.List",
      "typing.Dict"
    ],
    "src/claude_skills/claude_skills/common/printer.py": [
      "sys"
    ],
    "src/claude_skills/claude_skills/common/progress.py": [
      "typing.Dict",
      "typing.List"
    ],
    "src/claude_skills/claude_skills/common/query_operations.py": [
      "pathlib.Path",
      "typing.Optional",
      "typing.Dict",
      "typing.List",
      "spec.load_json_spec",
      "spec.get_node",
      "progress.list_phases",
      "printer.PrettyPrinter"
    ],
    "src/claude_skills/claude_skills/common/reporting.py": [
      "pathlib.Path",
      "datetime.datetime",
      "typing.List",
      "claude_skills.common.SpecValidationResult",
      "claude_skills.common.JsonSpecValidationResult"
    ],
    "src/claude_skills/claude_skills/common/spec.py": [
      "sys",
      "json",
      "shutil",
      "datetime.datetime",
      "datetime.timezone",
      "pathlib.Path",
      "typing.Optional",
      "typing.Dict",
      "typing.Any",
      "typing.Union",
      "paths.find_spec_file"
    ],
    "src/claude_skills/claude_skills/common/spec_analysis.py": [
      "json",
      "re",
      "pathlib.Path",
      "typing.Dict",
      "typing.Optional",
      "spec.extract_frontmatter"
    ],
    "src/claude_skills/claude_skills/common/validation.py": [
      "re",
      "dataclasses.dataclass",
      "dataclasses.field",
      "typing.Any",
      "typing.Dict",
      "typing.List",
      "typing.Optional",
      "typing.Tuple"
    ],
    "src/claude_skills/claude_skills/dev_tools/generate_docs.py": [
      "argparse",
      "importlib",
      "sys",
      "pathlib.Path",
      "typing.Dict",
      "typing.List",
      "typing.Tuple",
      "typing.Optional",
      "io",
      "contextlib.redirect_stdout",
      "contextlib.redirect_stderr"
    ],
    "src/claude_skills/claude_skills/dev_tools/sdd_start_helper.py": [
      "argparse",
      "json",
      "os",
      "sys",
      "pathlib.Path",
      "datetime.datetime",
      "common.integrations.get_session_state"
    ],
    "src/claude_skills/claude_skills/dev_tools/setup_project_permissions.py": [
      "argparse",
      "json",
      "sys",
      "pathlib.Path"
    ],
    "src/claude_skills/claude_skills/doc_query/cli.py": [
      "__future__.annotations",
      "argparse",
      "json",
      "sys",
      "typing.Any",
      "typing.Dict",
      "typing.List",
      "typing.Optional",
      "claude_skills.common.PrettyPrinter",
      "claude_skills.common.metrics.track_metrics",
      "claude_skills.doc_query.doc_query_lib.DocumentationQuery",
      "claude_skills.doc_query.doc_query_lib.QueryResult",
      "claude_skills.doc_query.doc_query_lib.check_docs_exist"
    ],
    "src/claude_skills/claude_skills/doc_query/doc_query_lib.py": [
      "json",
      "re",
      "textwrap",
      "pathlib.Path",
      "typing.Dict",
      "typing.List",
      "typing.Optional",
      "typing.Union",
      "typing.Any",
      "typing.Iterable",
      "dataclasses.dataclass"
    ],
    "src/claude_skills/claude_skills/doc_query/sdd_integration.py": [
      "re",
      "pathlib.Path",
      "typing.Dict",
      "typing.List",
      "typing.Optional",
      "typing.Set",
      "doc_query_lib.DocumentationQuery",
      "doc_query_lib.QueryResult"
    ],
    "src/claude_skills/claude_skills/run_tests/cli.py": [
      "__future__.annotations",
      "argparse",
      "json",
      "sys",
      "typing.Any",
      "typing.Dict",
      "typing.List",
      "typing.Optional",
      "claude_skills.common.PrettyPrinter",
      "claude_skills.common.metrics.track_metrics",
      "claude_skills.run_tests.tool_checking.print_tool_status",
      "claude_skills.run_tests.tool_checking.get_tool_status_dict",
      "claude_skills.run_tests.tool_checking.FAILURE_TYPES",
      "claude_skills.run_tests.consultation.consult_with_auto_routing",
      "claude_skills.run_tests.consultation.consult_multi_agent",
      "claude_skills.run_tests.consultation.run_consultation",
      "claude_skills.run_tests.consultation.print_routing_matrix",
      "claude_skills.run_tests.consultation.should_auto_trigger_consensus",
      "claude_skills.run_tests.consultation.get_consensus_pair_for_failure",
      "claude_skills.run_tests.consultation.FAILURE_TYPES",
      "claude_skills.run_tests.consultation.MULTI_AGENT_PAIRS",
      "claude_skills.run_tests.consultation.get_available_tools",
      "claude_skills.run_tests.test_discovery.print_discovery_report",
      "claude_skills.run_tests.pytest_runner.run_pytest",
      "claude_skills.run_tests.pytest_runner.list_presets",
      "claude_skills.run_tests.pytest_runner.get_presets",
      "claude_skills.run_tests.pytest_runner.validate_preset"
    ],
    "src/claude_skills/claude_skills/run_tests/consultation.py": [
      "subprocess",
      "pathlib.Path",
      "typing.Dict",
      "typing.List",
      "typing.Optional",
      "typing.Tuple",
      "typing.NamedTuple",
      "concurrent.futures.ThreadPoolExecutor",
      "concurrent.futures.as_completed",
      "time",
      "claude_skills.common.PrettyPrinter",
      "claude_skills.run_tests.tool_checking.check_tool_availability",
      "claude_skills.run_tests.tool_checking.get_available_tools",
      "claude_skills.run_tests.tool_checking.get_config_path"
    ],
    "src/claude_skills/claude_skills/run_tests/pytest_runner.py": [
      "subprocess",
      "pathlib.Path",
      "typing.Dict",
      "typing.List",
      "typing.Optional",
      "claude_skills.common.PrettyPrinter"
    ],
    "src/claude_skills/claude_skills/run_tests/test_discovery.py": [
      "re",
      "collections.defaultdict",
      "pathlib.Path",
      "typing.Dict",
      "typing.List",
      "typing.Optional",
      "typing.Set",
      "typing.Tuple",
      "claude_skills.common.PrettyPrinter"
    ],
    "src/claude_skills/claude_skills/run_tests/tool_checking.py": [
      "shutil",
      "yaml",
      "pathlib.Path",
      "typing.Dict",
      "typing.List",
      "typing.Optional",
      "claude_skills.common.PrettyPrinter"
    ],
    "src/claude_skills/claude_skills/sdd_next/__init__.py": [
      "discovery.get_next_task",
      "discovery.get_task_info",
      "discovery.check_dependencies",
      "discovery.prepare_task",
      "project.detect_project",
      "project.find_tests",
      "project.check_environment",
      "project.find_related_files",
      "validation.validate_spec",
      "validation.find_circular_deps",
      "validation.validate_paths",
      "validation.spec_stats",
      "workflow.init_environment",
      "workflow.find_pattern"
    ],
    "src/claude_skills/claude_skills/sdd_next/cli.py": [
      "json",
      "sys",
      "argparse",
      "pathlib.Path",
      "typing.List",
      "os",
      "claude_skills.common.find_specs_directory",
      "claude_skills.common.load_json_spec",
      "claude_skills.common.get_progress_summary",
      "claude_skills.common.list_phases",
      "claude_skills.common.PrettyPrinter",
      "claude_skills.common.query_tasks",
      "claude_skills.common.check_complete",
      "claude_skills.common.list_blockers",
      "claude_skills.sdd_next.discovery.get_next_task",
      "claude_skills.sdd_next.discovery.get_task_info",
      "claude_skills.sdd_next.discovery.check_dependencies",
      "claude_skills.sdd_next.discovery.prepare_task",
      "claude_skills.sdd_next.project.detect_project",
      "claude_skills.sdd_next.project.find_tests",
      "claude_skills.sdd_next.project.check_environment",
      "claude_skills.sdd_next.project.find_related_files",
      "claude_skills.sdd_next.validation.validate_spec",
      "claude_skills.sdd_next.validation.find_circular_deps",
      "claude_skills.sdd_next.validation.validate_paths",
      "claude_skills.sdd_next.validation.spec_stats",
      "claude_skills.sdd_next.workflow.init_environment",
      "claude_skills.sdd_next.workflow.find_pattern"
    ],
    "src/claude_skills/claude_skills/sdd_next/discovery.py": [
      "pathlib.Path",
      "typing.Optional",
      "typing.Dict",
      "typing.Tuple",
      "claude_skills.common.load_json_spec",
      "claude_skills.common.get_node",
      "claude_skills.common.validate_spec_before_proceed",
      "claude_skills.common.get_task_context_from_docs",
      "claude_skills.common.check_doc_query_available"
    ],
    "src/claude_skills/claude_skills/sdd_next/project.py": [
      "json",
      "pathlib.Path",
      "typing.Dict",
      "typing.List",
      "typing.Optional"
    ],
    "src/claude_skills/claude_skills/sdd_next/validation.py": [
      "json",
      "pathlib.Path",
      "typing.Dict",
      "typing.Optional",
      "claude_skills.common.load_json_spec",
      "claude_skills.common.find_circular_dependencies",
      "claude_skills.common.validate_and_normalize_paths",
      "claude_skills.common.validate_spec_hierarchy",
      "claude_skills.common.spec_analysis.get_json_spec_metadata"
    ],
    "src/claude_skills/claude_skills/sdd_next/workflow.py": [
      "pathlib.Path",
      "typing.Dict",
      "typing.List",
      "typing.Optional",
      "claude_skills.common.find_specs_directory",
      "claude_skills.common.ensure_directory"
    ],
    "src/claude_skills/claude_skills/sdd_plan/__init__.py": [
      "claude_skills.sdd_plan.templates.list_templates",
      "claude_skills.sdd_plan.templates.get_template",
      "claude_skills.sdd_plan.templates.generate_spec_from_template",
      "claude_skills.sdd_plan.templates.get_template_description",
      "claude_skills.sdd_plan.planner.analyze_codebase",
      "claude_skills.sdd_plan.planner.create_spec_interactive",
      "claude_skills.sdd_plan.planner.find_specs_directory",
      "claude_skills.sdd_plan.planner.get_project_context"
    ],
    "src/claude_skills/claude_skills/sdd_plan/cli.py": [
      "argparse",
      "sys",
      "json",
      "pathlib.Path",
      "claude_skills.common.PrettyPrinter",
      "claude_skills.sdd_plan.list_templates",
      "claude_skills.sdd_plan.get_template_description",
      "claude_skills.sdd_plan.create_spec_interactive",
      "claude_skills.sdd_plan.analyze_codebase",
      "claude_skills.sdd_plan.get_project_context",
      "claude_skills.sdd_plan.find_specs_directory"
    ],
    "src/claude_skills/claude_skills/sdd_plan/planner.py": [
      "json",
      "subprocess",
      "pathlib.Path",
      "typing.Dict",
      "typing.Any",
      "typing.Optional",
      "typing.Tuple",
      "datetime.datetime"
    ],
    "src/claude_skills/claude_skills/sdd_plan/templates.py": [
      "typing.Dict",
      "typing.Any",
      "datetime.datetime"
    ],
    "src/claude_skills/claude_skills/sdd_plan_review/__init__.py": [
      "claude_skills.sdd_plan_review.reviewer.check_tool_available",
      "claude_skills.sdd_plan_review.reviewer.detect_available_tools",
      "claude_skills.sdd_plan_review.reviewer.review_with_tools",
      "claude_skills.sdd_plan_review.prompts.generate_review_prompt",
      "claude_skills.sdd_plan_review.synthesis.parse_response",
      "claude_skills.sdd_plan_review.synthesis.build_consensus",
      "claude_skills.sdd_plan_review.reporting.generate_markdown_report",
      "claude_skills.sdd_plan_review.reporting.generate_json_report"
    ],
    "src/claude_skills/claude_skills/sdd_plan_review/cli.py": [
      "argparse",
      "sys",
      "json",
      "pathlib.Path",
      "claude_skills.common.PrettyPrinter",
      "claude_skills.common.load_json_spec",
      "claude_skills.sdd_plan_review.check_tool_available",
      "claude_skills.sdd_plan_review.detect_available_tools",
      "claude_skills.sdd_plan_review.review_with_tools",
      "claude_skills.sdd_plan_review.reporting.generate_markdown_report",
      "claude_skills.sdd_plan_review.reporting.generate_json_report"
    ],
    "src/claude_skills/claude_skills/sdd_plan_review/prompts.py": [
      "typing.Dict",
      "typing.Any"
    ],
    "src/claude_skills/claude_skills/sdd_plan_review/reporting.py": [
      "datetime.datetime",
      "typing.Dict",
      "typing.Any",
      "typing.List"
    ],
    "src/claude_skills/claude_skills/sdd_plan_review/reviewer.py": [
      "subprocess",
      "json",
      "time",
      "tempfile",
      "pathlib.Path",
      "typing.Dict",
      "typing.Any",
      "typing.List",
      "typing.Optional",
      "typing.Tuple",
      "concurrent.futures.ThreadPoolExecutor",
      "concurrent.futures.as_completed",
      "concurrent.futures.wait",
      "claude_skills.sdd_plan_review.prompts.generate_review_prompt",
      "claude_skills.sdd_plan_review.synthesis.parse_response",
      "claude_skills.sdd_plan_review.synthesis.build_consensus"
    ],
    "src/claude_skills/claude_skills/sdd_plan_review/synthesis.py": [
      "json",
      "re",
      "typing.Dict",
      "typing.Any",
      "typing.List",
      "typing.Optional",
      "typing.Tuple",
      "statistics.mean",
      "statistics.median"
    ],
    "src/claude_skills/claude_skills/sdd_update/__init__.py": [
      "status.update_task_status",
      "status.mark_task_blocked",
      "status.unblock_task",
      "journal.add_journal_entry",
      "journal.update_metadata",
      "verification.add_verification_result",
      "lifecycle.move_spec",
      "lifecycle.complete_spec",
      "time_tracking.track_time",
      "time_tracking.generate_time_report",
      "validation.validate_spec",
      "validation.get_status_report",
      "validation.audit_spec",
      "query.query_tasks",
      "query.get_task",
      "query.list_phases",
      "query.check_complete",
      "query.phase_time",
      "query.list_blockers"
    ],
    "src/claude_skills/claude_skills/sdd_update/cli.py": [
      "argparse",
      "json",
      "sys",
      "pathlib.Path",
      "claude_skills.common.find_specs_directory",
      "claude_skills.common.PrettyPrinter",
      "claude_skills.common.execute_verify_task",
      "claude_skills.common.load_json_spec",
      "claude_skills.sdd_update.status.update_task_status",
      "claude_skills.sdd_update.status.mark_task_blocked",
      "claude_skills.sdd_update.status.unblock_task",
      "claude_skills.sdd_update.workflow.complete_task_workflow",
      "claude_skills.sdd_update.journal.add_journal_entry",
      "claude_skills.sdd_update.journal.update_metadata",
      "claude_skills.sdd_update.journal.bulk_journal_tasks",
      "claude_skills.sdd_update.journal.sync_metadata_from_state",
      "claude_skills.sdd_update.journal.add_revision_entry",
      "claude_skills.sdd_update.verification.add_verification_result",
      "claude_skills.sdd_update.verification.format_verification_summary",
      "claude_skills.sdd_update.lifecycle.move_spec",
      "claude_skills.sdd_update.lifecycle.complete_spec",
      "claude_skills.sdd_update.time_tracking.track_time",
      "claude_skills.sdd_update.time_tracking.generate_time_report",
      "claude_skills.sdd_update.validation.validate_spec",
      "claude_skills.sdd_update.validation.get_status_report",
      "claude_skills.sdd_update.validation.audit_spec",
      "claude_skills.sdd_update.validation.reconcile_state",
      "claude_skills.sdd_update.validation.detect_unjournaled_tasks",
      "claude_skills.sdd_update.query.query_tasks",
      "claude_skills.sdd_update.query.get_task",
      "claude_skills.sdd_update.query.list_phases",
      "claude_skills.sdd_update.query.check_complete",
      "claude_skills.sdd_update.query.phase_time",
      "claude_skills.sdd_update.query.list_blockers"
    ],
    "src/claude_skills/claude_skills/sdd_update/journal.py": [
      "pathlib.Path",
      "typing.Optional",
      "typing.List",
      "typing.Dict",
      "typing.Any",
      "typing.Tuple",
      "datetime.datetime",
      "datetime.timezone",
      "string.Template",
      "claude_skills.common.printer.PrettyPrinter",
      "claude_skills.common.spec.load_json_spec",
      "claude_skills.common.spec.save_json_spec",
      "claude_skills.common.spec.update_node",
      "claude_skills.common.paths.find_specs_directory"
    ],
    "src/claude_skills/claude_skills/sdd_update/lifecycle.py": [
      "shutil",
      "pathlib.Path",
      "typing.Optional",
      "datetime.datetime",
      "datetime.timezone",
      "claude_skills.common.spec.load_json_spec",
      "claude_skills.common.spec.save_json_spec",
      "claude_skills.common.paths.ensure_directory",
      "claude_skills.common.printer.PrettyPrinter"
    ],
    "src/claude_skills/claude_skills/sdd_update/query.py": [
      "pathlib.Path",
      "typing.Optional",
      "typing.Dict",
      "typing.List",
      "claude_skills.common.query_operations.query_tasks",
      "claude_skills.common.query_operations.get_task",
      "claude_skills.common.query_operations.list_phases",
      "claude_skills.common.query_operations.check_complete",
      "claude_skills.common.query_operations.list_blockers",
      "claude_skills.common.spec.load_json_spec",
      "claude_skills.common.printer.PrettyPrinter"
    ],
    "src/claude_skills/claude_skills/sdd_update/status.py": [
      "pathlib.Path",
      "typing.Optional",
      "typing.List",
      "datetime.datetime",
      "datetime.timezone",
      "claude_skills.common.spec.load_json_spec",
      "claude_skills.common.spec.save_json_spec",
      "claude_skills.common.spec.update_node",
      "claude_skills.common.progress.recalculate_progress",
      "claude_skills.common.printer.PrettyPrinter",
      "claude_skills.common.execute_verify_task"
    ],
    "src/claude_skills/claude_skills/sdd_update/time_tracking.py": [
      "pathlib.Path",
      "typing.Optional",
      "typing.Dict",
      "claude_skills.common.spec.load_json_spec",
      "claude_skills.common.spec.save_json_spec",
      "claude_skills.common.spec.update_node",
      "claude_skills.common.printer.PrettyPrinter"
    ],
    "src/claude_skills/claude_skills/sdd_update/validation.py": [
      "pathlib.Path",
      "typing.Optional",
      "typing.Dict",
      "typing.List",
      "claude_skills.common.spec.load_json_spec",
      "claude_skills.common.progress.get_progress_summary",
      "claude_skills.common.progress.list_phases",
      "claude_skills.common.progress.get_task_counts_by_status",
      "claude_skills.common.printer.PrettyPrinter",
      "claude_skills.common.dependency_analysis.find_circular_dependencies",
      "claude_skills.common.hierarchy_validation.validate_spec_hierarchy"
    ],
    "src/claude_skills/claude_skills/sdd_update/verification.py": [
      "pathlib.Path",
      "typing.Optional",
      "datetime.datetime",
      "datetime.timezone",
      "claude_skills.common.printer.PrettyPrinter",
      "claude_skills.common.spec.load_json_spec",
      "claude_skills.common.spec.save_json_spec",
      "claude_skills.common.spec.update_node",
      "claude_skills.common.paths.find_specs_directory"
    ],
    "src/claude_skills/claude_skills/sdd_update/workflow.py": [
      "__future__.annotations",
      "copy",
      "json",
      "datetime.datetime",
      "datetime.timezone",
      "pathlib.Path",
      "typing.Any",
      "typing.Dict",
      "typing.Optional",
      "typing.Tuple",
      "claude_skills.common.printer.PrettyPrinter",
      "claude_skills.common.spec.load_json_spec",
      "journal.add_journal_entry",
      "journal.add_revision_entry",
      "journal.mark_task_journaled",
      "journal.sync_metadata_from_state",
      "journal._build_journal_entry",
      "journal._ensure_journal_container",
      "status.update_task_status",
      "time_tracking.track_time"
    ],
    "src/claude_skills/claude_skills/sdd_validate/__init__.py": [
      "formatting.NormalizedValidationResult",
      "formatting.format_validation_summary",
      "formatting.normalize_validation_result",
      "fix.FixAction",
      "fix.FixReport",
      "fix.collect_fix_actions",
      "fix.apply_fix_actions",
      "stats.SpecStatistics",
      "stats.calculate_statistics",
      "stats.render_statistics",
      "reporting.generate_report",
      "diff.DiffReport",
      "diff.compute_diff",
      "diff.format_diff_markdown",
      "diff.format_diff_json"
    ],
    "src/claude_skills/claude_skills/sdd_validate/cli.py": [
      "argparse",
      "json",
      "sys",
      "pathlib.Path",
      "dataclasses.asdict",
      "typing.Any",
      "typing.Dict"
    ],
    "src/claude_skills/claude_skills/sdd_validate/diff.py": [
      "__future__.annotations",
      "copy",
      "json",
      "dataclasses.dataclass",
      "dataclasses.field",
      "typing.Any",
      "typing.Dict",
      "typing.List",
      "typing.Optional",
      "typing.Tuple"
    ],
    "src/claude_skills/claude_skills/sdd_validate/fix.py": [
      "__future__.annotations",
      "re",
      "copy",
      "dataclasses.asdict",
      "dataclasses.dataclass",
      "dataclasses.field",
      "json",
      "datetime.datetime",
      "datetime.timezone",
      "pathlib.Path",
      "typing.Any",
      "typing.Callable",
      "typing.Dict",
      "typing.Iterable",
      "typing.List",
      "typing.Optional",
      "typing.Sequence",
      "typing.Set",
      "claude_skills.common.backup_json_spec",
      "claude_skills.common.recalculate_progress",
      "claude_skills.common.save_json_spec",
      "claude_skills.common.validate_status",
      "claude_skills.common.validate_spec_hierarchy",
      "claude_skills.common.validation.EnhancedError",
      "claude_skills.common.validation.JsonSpecValidationResult",
      "claude_skills.sdd_validate.formatting.normalize_validation_result"
    ],
    "src/claude_skills/claude_skills/sdd_validate/formatting.py": [
      "__future__.annotations",
      "dataclasses.dataclass",
      "dataclasses.field",
      "typing.Any",
      "typing.Dict",
      "typing.Iterable",
      "typing.List",
      "typing.Optional",
      "typing.Sequence",
      "typing.Tuple",
      "claude_skills.common.validation.EnhancedError",
      "claude_skills.common.validation.JsonSpecValidationResult"
    ],
    "src/claude_skills/claude_skills/sdd_validate/reporting.py": [
      "__future__.annotations",
      "typing.Any",
      "typing.Dict",
      "typing.Optional",
      "claude_skills.common.JsonSpecValidationResult",
      "claude_skills.sdd_validate.formatting.NormalizedValidationResult",
      "claude_skills.sdd_validate.formatting.normalize_validation_result"
    ],
    "src/claude_skills/claude_skills/sdd_validate/stats.py": [
      "__future__.annotations",
      "dataclasses.dataclass",
      "pathlib.Path",
      "typing.Any",
      "typing.Dict"
    ]
  }
}